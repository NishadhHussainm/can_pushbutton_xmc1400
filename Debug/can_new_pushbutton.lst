
can_new_pushbutton.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001dd0  10001000  10001000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .VENEER_Code  00000144  2000000c  10002dd0  0000800c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 Stack         00000400  20000150  00000000  00000150  2**0
                  ALLOC
  3 .data         00000070  20000550  10002f14  00008550  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000010  200005c0  00000470  000085c0  2**2
                  ALLOC
  5 .no_init      00000004  20003ffc  00003eac  00000150  2**2
                  ALLOC
  6 .debug_aranges 00000990  00000000  00000000  000085c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000f1b8  00000000  00000000  00008f50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000027fb  00000000  00000000  00018108  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005fe8  00000000  00000000  0001a903  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001e00  00000000  00000000  000208ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00006f31  00000000  00000000  000226ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000030a4  00000000  00000000  0002961d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000007c8  00000000  00000000  0002c6c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .build_attributes 00000516  00000000  00000000  0002ce90  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

10001000 <__Vectors>:
10001000:	50 05 00 20 1d 10 00 10 00 00 00 00 9d 10 00 10     P.. ............
10001010:	00 18 04 00 00 01 00 00 00 00 00 80                 ............

1000101c <Reset_Handler>:
    .thumb_func 
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler: 
/* Initialize interrupt veneer */
	ldr	r1, =eROData
1000101c:	4911      	ldr	r1, [pc, #68]	; (10001064 <__copy_data+0xe>)
	ldr	r2, =VeneerStart
1000101e:	4a12      	ldr	r2, [pc, #72]	; (10001068 <__copy_data+0x12>)
	ldr	r3, =VeneerEnd
10001020:	4b12      	ldr	r3, [pc, #72]	; (1000106c <__copy_data+0x16>)
	bl  __copy_data
10001022:	f000 f818 	bl	10001056 <__copy_data>

    ldr  r0, =SystemInit
10001026:	4812      	ldr	r0, [pc, #72]	; (10001070 <__copy_data+0x1a>)
    blx  r0
10001028:	4780      	blx	r0
	
/* Initialize data */
	ldr	r1, =DataLoadAddr
1000102a:	4912      	ldr	r1, [pc, #72]	; (10001074 <__copy_data+0x1e>)
	ldr	r2, =__data_start
1000102c:	4a12      	ldr	r2, [pc, #72]	; (10001078 <__copy_data+0x22>)
	ldr	r3, =__data_end
1000102e:	4b13      	ldr	r3, [pc, #76]	; (1000107c <__copy_data+0x26>)
	bl  __copy_data
10001030:	f000 f811 	bl	10001056 <__copy_data>

/* RAM code */
	ldr	r1, =__ram_code_load
10001034:	4912      	ldr	r1, [pc, #72]	; (10001080 <__copy_data+0x2a>)
	ldr	r2, =__ram_code_start
10001036:	4a13      	ldr	r2, [pc, #76]	; (10001084 <__copy_data+0x2e>)
	ldr	r3, =__ram_code_end
10001038:	4b13      	ldr	r3, [pc, #76]	; (10001088 <__copy_data+0x32>)
	bl  __copy_data
1000103a:	f000 f80c 	bl	10001056 <__copy_data>
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
#ifndef __SKIP_BSS_CLEAR
	ldr	r1, =__bss_start
1000103e:	4913      	ldr	r1, [pc, #76]	; (1000108c <__copy_data+0x36>)
	ldr	r2, =__bss_end
10001040:	4a13      	ldr	r2, [pc, #76]	; (10001090 <__copy_data+0x3a>)

	movs	r0, 0
10001042:	2000      	movs	r0, #0

	subs	r2, r1
10001044:	1a52      	subs	r2, r2, r1
	ble	.L_loop3_done
10001046:	dd02      	ble.n	1000104e <Reset_Handler+0x32>

.L_loop3:
	subs	r2, #4
10001048:	3a04      	subs	r2, #4
	str	r0, [r1, r2]
1000104a:	5088      	str	r0, [r1, r2]
	bgt	.L_loop3
1000104c:	dcfc      	bgt.n	10001048 <Reset_Handler+0x2c>
.L_loop3_done:
#endif /* __SKIP_BSS_CLEAR */

#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
1000104e:	4811      	ldr	r0, [pc, #68]	; (10001094 <__copy_data+0x3e>)
    blx  r0
10001050:	4780      	blx	r0
#endif

    ldr  r0, =main
10001052:	4811      	ldr	r0, [pc, #68]	; (10001098 <__copy_data+0x42>)
    blx  r0
10001054:	4780      	blx	r0

10001056 <__copy_data>:
 *    r3: end of the section to copy to
 *
 *  All addresses must be aligned to 4 bytes boundary.
 *  Uses r0
 */
	subs	r3, r2
10001056:	1a9b      	subs	r3, r3, r2
	ble	.L_loop_done
10001058:	dd03      	ble.n	10001062 <__copy_data+0xc>

.L_loop:
	subs	r3, #4
1000105a:	3b04      	subs	r3, #4
	ldr	r0, [r1,r3]
1000105c:	58c8      	ldr	r0, [r1, r3]
	str	r0, [r2,r3]
1000105e:	50d0      	str	r0, [r2, r3]
	bgt	.L_loop
10001060:	dcfb      	bgt.n	1000105a <__copy_data+0x4>

.L_loop_done:
	bx  lr
10001062:	4770      	bx	lr
    .thumb_func 
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler: 
/* Initialize interrupt veneer */
	ldr	r1, =eROData
10001064:	10002dd0 	.word	0x10002dd0
	ldr	r2, =VeneerStart
10001068:	2000000c 	.word	0x2000000c
	ldr	r3, =VeneerEnd
1000106c:	20000150 	.word	0x20000150
	bl  __copy_data

    ldr  r0, =SystemInit
10001070:	100010a1 	.word	0x100010a1
    blx  r0
	
/* Initialize data */
	ldr	r1, =DataLoadAddr
10001074:	10002f14 	.word	0x10002f14
	ldr	r2, =__data_start
10001078:	20000550 	.word	0x20000550
	ldr	r3, =__data_end
1000107c:	200005c0 	.word	0x200005c0
	bl  __copy_data

/* RAM code */
	ldr	r1, =__ram_code_load
10001080:	10002f84 	.word	0x10002f84
	ldr	r2, =__ram_code_start
10001084:	200005c0 	.word	0x200005c0
	ldr	r3, =__ram_code_end
10001088:	200005c0 	.word	0x200005c0
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
#ifndef __SKIP_BSS_CLEAR
	ldr	r1, =__bss_start
1000108c:	200005c0 	.word	0x200005c0
	ldr	r2, =__bss_end
10001090:	200005cc 	.word	0x200005cc
	bgt	.L_loop3
.L_loop3_done:
#endif /* __SKIP_BSS_CLEAR */

#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
10001094:	10002c19 	.word	0x10002c19
    blx  r0
#endif

    ldr  r0, =main
10001098:	10002b61 	.word	0x10002b61

1000109c <HardFault_Handler>:
    
    .thumb_func
    .weak Default_handler
    .type Default_handler, %function
Default_Handler:
    b  .
1000109c:	e7fe      	b.n	1000109c <HardFault_Handler>
	...

100010a0 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
100010a0:	b580      	push	{r7, lr}
100010a2:	af00      	add	r7, sp, #0
  SystemCoreSetup();
100010a4:	f001 f9e0 	bl	10002468 <SystemCoreSetup>
  SystemCoreClockSetup();
100010a8:	f001 fa2c 	bl	10002504 <SystemCoreClockSetup>
}
100010ac:	46bd      	mov	sp, r7
100010ae:	bd80      	pop	{r7, pc}

100010b0 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
100010b0:	b580      	push	{r7, lr}
100010b2:	af00      	add	r7, sp, #0
  static uint32_t IDIV, FDIV;

  IDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
100010b4:	4b2a      	ldr	r3, [pc, #168]	; (10001160 <SystemCoreClockUpdate+0xb0>)
100010b6:	681a      	ldr	r2, [r3, #0]
100010b8:	23ff      	movs	r3, #255	; 0xff
100010ba:	021b      	lsls	r3, r3, #8
100010bc:	4013      	ands	r3, r2
100010be:	0a1a      	lsrs	r2, r3, #8
100010c0:	4b28      	ldr	r3, [pc, #160]	; (10001164 <SystemCoreClockUpdate+0xb4>)
100010c2:	601a      	str	r2, [r3, #0]

  if (IDIV != 0)
100010c4:	4b27      	ldr	r3, [pc, #156]	; (10001164 <SystemCoreClockUpdate+0xb4>)
100010c6:	681b      	ldr	r3, [r3, #0]
100010c8:	2b00      	cmp	r3, #0
100010ca:	d037      	beq.n	1000113c <SystemCoreClockUpdate+0x8c>
  {
    FDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_FDIV_Msk) >> SCU_CLK_CLKCR_FDIV_Pos;
100010cc:	4b24      	ldr	r3, [pc, #144]	; (10001160 <SystemCoreClockUpdate+0xb0>)
100010ce:	681b      	ldr	r3, [r3, #0]
100010d0:	22ff      	movs	r2, #255	; 0xff
100010d2:	401a      	ands	r2, r3
100010d4:	4b24      	ldr	r3, [pc, #144]	; (10001168 <SystemCoreClockUpdate+0xb8>)
100010d6:	601a      	str	r2, [r3, #0]
    FDIV |= ((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_FDIV_Msk) << 8;
100010d8:	4b21      	ldr	r3, [pc, #132]	; (10001160 <SystemCoreClockUpdate+0xb0>)
100010da:	69db      	ldr	r3, [r3, #28]
100010dc:	2203      	movs	r2, #3
100010de:	4013      	ands	r3, r2
100010e0:	021a      	lsls	r2, r3, #8
100010e2:	4b21      	ldr	r3, [pc, #132]	; (10001168 <SystemCoreClockUpdate+0xb8>)
100010e4:	681b      	ldr	r3, [r3, #0]
100010e6:	431a      	orrs	r2, r3
100010e8:	4b1f      	ldr	r3, [pc, #124]	; (10001168 <SystemCoreClockUpdate+0xb8>)
100010ea:	601a      	str	r2, [r3, #0]
    
    /* Fractional divider is enabled and used */
    if (((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_DCLKSEL_Msk) == 0U)
100010ec:	4b1c      	ldr	r3, [pc, #112]	; (10001160 <SystemCoreClockUpdate+0xb0>)
100010ee:	69da      	ldr	r2, [r3, #28]
100010f0:	2380      	movs	r3, #128	; 0x80
100010f2:	009b      	lsls	r3, r3, #2
100010f4:	4013      	ands	r3, r2
100010f6:	d10e      	bne.n	10001116 <SystemCoreClockUpdate+0x66>
    {
       SystemCoreClock = ((uint32_t)((DCO1_FREQUENCY << 6U) / ((IDIV << 10) + FDIV))) << 4U;
100010f8:	4b1a      	ldr	r3, [pc, #104]	; (10001164 <SystemCoreClockUpdate+0xb4>)
100010fa:	681b      	ldr	r3, [r3, #0]
100010fc:	029a      	lsls	r2, r3, #10
100010fe:	4b1a      	ldr	r3, [pc, #104]	; (10001168 <SystemCoreClockUpdate+0xb8>)
10001100:	681b      	ldr	r3, [r3, #0]
10001102:	18d3      	adds	r3, r2, r3
10001104:	4819      	ldr	r0, [pc, #100]	; (1000116c <SystemCoreClockUpdate+0xbc>)
10001106:	1c19      	adds	r1, r3, #0
10001108:	f000 ff20 	bl	10001f4c <__aeabi_uidiv>
1000110c:	1c03      	adds	r3, r0, #0
1000110e:	011a      	lsls	r2, r3, #4
10001110:	4b17      	ldr	r3, [pc, #92]	; (10001170 <SystemCoreClockUpdate+0xc0>)
10001112:	601a      	str	r2, [r3, #0]
10001114:	e021      	b.n	1000115a <SystemCoreClockUpdate+0xaa>
    }
    else
    {
       SystemCoreClock = ((uint32_t)((OSCHP_GetFrequency() << 6U) / ((IDIV << 10) + FDIV))) << 4U;
10001116:	f000 f82f 	bl	10001178 <OSCHP_GetFrequency>
1000111a:	1c03      	adds	r3, r0, #0
1000111c:	0199      	lsls	r1, r3, #6
1000111e:	4b11      	ldr	r3, [pc, #68]	; (10001164 <SystemCoreClockUpdate+0xb4>)
10001120:	681b      	ldr	r3, [r3, #0]
10001122:	029a      	lsls	r2, r3, #10
10001124:	4b10      	ldr	r3, [pc, #64]	; (10001168 <SystemCoreClockUpdate+0xb8>)
10001126:	681b      	ldr	r3, [r3, #0]
10001128:	18d3      	adds	r3, r2, r3
1000112a:	1c08      	adds	r0, r1, #0
1000112c:	1c19      	adds	r1, r3, #0
1000112e:	f000 ff0d 	bl	10001f4c <__aeabi_uidiv>
10001132:	1c03      	adds	r3, r0, #0
10001134:	011a      	lsls	r2, r3, #4
10001136:	4b0e      	ldr	r3, [pc, #56]	; (10001170 <SystemCoreClockUpdate+0xc0>)
10001138:	601a      	str	r2, [r3, #0]
1000113a:	e00e      	b.n	1000115a <SystemCoreClockUpdate+0xaa>
    }
  }
  else
  {
    /* Fractional divider bypassed. */
    if (((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_DCLKSEL_Msk) == 0U)
1000113c:	4b08      	ldr	r3, [pc, #32]	; (10001160 <SystemCoreClockUpdate+0xb0>)
1000113e:	69da      	ldr	r2, [r3, #28]
10001140:	2380      	movs	r3, #128	; 0x80
10001142:	009b      	lsls	r3, r3, #2
10001144:	4013      	ands	r3, r2
10001146:	d103      	bne.n	10001150 <SystemCoreClockUpdate+0xa0>
    {
        SystemCoreClock = DCO1_FREQUENCY;
10001148:	4b09      	ldr	r3, [pc, #36]	; (10001170 <SystemCoreClockUpdate+0xc0>)
1000114a:	4a0a      	ldr	r2, [pc, #40]	; (10001174 <SystemCoreClockUpdate+0xc4>)
1000114c:	601a      	str	r2, [r3, #0]
1000114e:	e004      	b.n	1000115a <SystemCoreClockUpdate+0xaa>
    }
    else
    {
        SystemCoreClock = OSCHP_GetFrequency();
10001150:	f000 f812 	bl	10001178 <OSCHP_GetFrequency>
10001154:	1c02      	adds	r2, r0, #0
10001156:	4b06      	ldr	r3, [pc, #24]	; (10001170 <SystemCoreClockUpdate+0xc0>)
10001158:	601a      	str	r2, [r3, #0]
    }
  }
}
1000115a:	46bd      	mov	sp, r7
1000115c:	bd80      	pop	{r7, pc}
1000115e:	46c0      	nop			; (mov r8, r8)
10001160:	40010300 	.word	0x40010300
10001164:	200005c0 	.word	0x200005c0
10001168:	200005c4 	.word	0x200005c4
1000116c:	b71b0000 	.word	0xb71b0000
10001170:	20003ffc 	.word	0x20003ffc
10001174:	02dc6c00 	.word	0x02dc6c00

10001178 <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
10001178:	b580      	push	{r7, lr}
1000117a:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
1000117c:	4b01      	ldr	r3, [pc, #4]	; (10001184 <OSCHP_GetFrequency+0xc>)
}
1000117e:	1c18      	adds	r0, r3, #0
10001180:	46bd      	mov	sp, r7
10001182:	bd80      	pop	{r7, pc}
10001184:	01312d00 	.word	0x01312d00

10001188 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
10001188:	b590      	push	{r4, r7, lr}
1000118a:	b085      	sub	sp, #20
1000118c:	af00      	add	r7, sp, #0
1000118e:	60f8      	str	r0, [r7, #12]
10001190:	607a      	str	r2, [r7, #4]
10001192:	230b      	movs	r3, #11
10001194:	18fb      	adds	r3, r7, r3
10001196:	1c0a      	adds	r2, r1, #0
10001198:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
  XMC_ASSERT("XMC_GPIO_Init: Invalid input hysteresis", XMC_GPIO_CHECK_INPUT_HYSTERESIS(config->input_hysteresis));

  /* Switch to input */
  port->IOCR[pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
1000119a:	230b      	movs	r3, #11
1000119c:	18fb      	adds	r3, r7, r3
1000119e:	781b      	ldrb	r3, [r3, #0]
100011a0:	089b      	lsrs	r3, r3, #2
100011a2:	b2db      	uxtb	r3, r3
100011a4:	1c18      	adds	r0, r3, #0
100011a6:	230b      	movs	r3, #11
100011a8:	18fb      	adds	r3, r7, r3
100011aa:	781b      	ldrb	r3, [r3, #0]
100011ac:	089b      	lsrs	r3, r3, #2
100011ae:	b2db      	uxtb	r3, r3
100011b0:	1c1a      	adds	r2, r3, #0
100011b2:	68fb      	ldr	r3, [r7, #12]
100011b4:	3204      	adds	r2, #4
100011b6:	0092      	lsls	r2, r2, #2
100011b8:	58d3      	ldr	r3, [r2, r3]
100011ba:	220b      	movs	r2, #11
100011bc:	18ba      	adds	r2, r7, r2
100011be:	7812      	ldrb	r2, [r2, #0]
100011c0:	2103      	movs	r1, #3
100011c2:	400a      	ands	r2, r1
100011c4:	00d2      	lsls	r2, r2, #3
100011c6:	1c11      	adds	r1, r2, #0
100011c8:	22fc      	movs	r2, #252	; 0xfc
100011ca:	408a      	lsls	r2, r1
100011cc:	43d2      	mvns	r2, r2
100011ce:	401a      	ands	r2, r3
100011d0:	1c11      	adds	r1, r2, #0
100011d2:	68fb      	ldr	r3, [r7, #12]
100011d4:	1d02      	adds	r2, r0, #4
100011d6:	0092      	lsls	r2, r2, #2
100011d8:	50d1      	str	r1, [r2, r3]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
100011da:	68fb      	ldr	r3, [r7, #12]
100011dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
100011de:	220b      	movs	r2, #11
100011e0:	18ba      	adds	r2, r7, r2
100011e2:	7812      	ldrb	r2, [r2, #0]
100011e4:	0052      	lsls	r2, r2, #1
100011e6:	1c11      	adds	r1, r2, #0
100011e8:	2203      	movs	r2, #3
100011ea:	408a      	lsls	r2, r1
100011ec:	43d2      	mvns	r2, r2
100011ee:	401a      	ands	r2, r3
100011f0:	68fb      	ldr	r3, [r7, #12]
100011f2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set input hysteresis */
  port->PHCR[(uint32_t)pin >> 3U] &= ~(uint32_t)((uint32_t)PORT_PHCR_Msk << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U)));
100011f4:	230b      	movs	r3, #11
100011f6:	18fb      	adds	r3, r7, r3
100011f8:	781b      	ldrb	r3, [r3, #0]
100011fa:	08db      	lsrs	r3, r3, #3
100011fc:	b2db      	uxtb	r3, r3
100011fe:	1c18      	adds	r0, r3, #0
10001200:	230b      	movs	r3, #11
10001202:	18fb      	adds	r3, r7, r3
10001204:	781b      	ldrb	r3, [r3, #0]
10001206:	08db      	lsrs	r3, r3, #3
10001208:	b2db      	uxtb	r3, r3
1000120a:	1c1a      	adds	r2, r3, #0
1000120c:	68fb      	ldr	r3, [r7, #12]
1000120e:	3210      	adds	r2, #16
10001210:	0092      	lsls	r2, r2, #2
10001212:	58d3      	ldr	r3, [r2, r3]
10001214:	220b      	movs	r2, #11
10001216:	18ba      	adds	r2, r7, r2
10001218:	7812      	ldrb	r2, [r2, #0]
1000121a:	2107      	movs	r1, #7
1000121c:	400a      	ands	r2, r1
1000121e:	0092      	lsls	r2, r2, #2
10001220:	1c11      	adds	r1, r2, #0
10001222:	2204      	movs	r2, #4
10001224:	408a      	lsls	r2, r1
10001226:	43d2      	mvns	r2, r2
10001228:	401a      	ands	r2, r3
1000122a:	1c11      	adds	r1, r2, #0
1000122c:	68fb      	ldr	r3, [r7, #12]
1000122e:	1c02      	adds	r2, r0, #0
10001230:	3210      	adds	r2, #16
10001232:	0092      	lsls	r2, r2, #2
10001234:	50d1      	str	r1, [r2, r3]
  port->PHCR[(uint32_t)pin >> 3U] |= (uint32_t)config->input_hysteresis << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U));
10001236:	230b      	movs	r3, #11
10001238:	18fb      	adds	r3, r7, r3
1000123a:	781b      	ldrb	r3, [r3, #0]
1000123c:	08db      	lsrs	r3, r3, #3
1000123e:	b2db      	uxtb	r3, r3
10001240:	1c18      	adds	r0, r3, #0
10001242:	230b      	movs	r3, #11
10001244:	18fb      	adds	r3, r7, r3
10001246:	781b      	ldrb	r3, [r3, #0]
10001248:	08db      	lsrs	r3, r3, #3
1000124a:	b2db      	uxtb	r3, r3
1000124c:	1c1a      	adds	r2, r3, #0
1000124e:	68fb      	ldr	r3, [r7, #12]
10001250:	3210      	adds	r2, #16
10001252:	0092      	lsls	r2, r2, #2
10001254:	58d2      	ldr	r2, [r2, r3]
10001256:	687b      	ldr	r3, [r7, #4]
10001258:	785b      	ldrb	r3, [r3, #1]
1000125a:	1c1c      	adds	r4, r3, #0
1000125c:	230b      	movs	r3, #11
1000125e:	18fb      	adds	r3, r7, r3
10001260:	781b      	ldrb	r3, [r3, #0]
10001262:	2107      	movs	r1, #7
10001264:	400b      	ands	r3, r1
10001266:	009b      	lsls	r3, r3, #2
10001268:	409c      	lsls	r4, r3
1000126a:	1c23      	adds	r3, r4, #0
1000126c:	431a      	orrs	r2, r3
1000126e:	1c11      	adds	r1, r2, #0
10001270:	68fb      	ldr	r3, [r7, #12]
10001272:	1c02      	adds	r2, r0, #0
10001274:	3210      	adds	r2, #16
10001276:	0092      	lsls	r2, r2, #2
10001278:	50d1      	str	r1, [r2, r3]

  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
1000127a:	68fb      	ldr	r3, [r7, #12]
1000127c:	4a20      	ldr	r2, [pc, #128]	; (10001300 <XMC_GPIO_Init+0x178>)
1000127e:	4293      	cmp	r3, r2
10001280:	d10b      	bne.n	1000129a <XMC_GPIO_Init+0x112>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
10001282:	68fb      	ldr	r3, [r7, #12]
10001284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
10001286:	220b      	movs	r2, #11
10001288:	18ba      	adds	r2, r7, r2
1000128a:	7812      	ldrb	r2, [r2, #0]
1000128c:	2101      	movs	r1, #1
1000128e:	4091      	lsls	r1, r2
10001290:	1c0a      	adds	r2, r1, #0
10001292:	43d2      	mvns	r2, r2
10001294:	401a      	ands	r2, r3
10001296:	68fb      	ldr	r3, [r7, #12]
10001298:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if ((config->mode & XMC_GPIO_MODE_OE) != 0)
1000129a:	687b      	ldr	r3, [r7, #4]
1000129c:	781b      	ldrb	r3, [r3, #0]
1000129e:	b2db      	uxtb	r3, r3
100012a0:	b25b      	sxtb	r3, r3
100012a2:	2b00      	cmp	r3, #0
100012a4:	da07      	bge.n	100012b6 <XMC_GPIO_Init+0x12e>
  {
    /* If output is enabled */

    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
100012a6:	687b      	ldr	r3, [r7, #4]
100012a8:	685a      	ldr	r2, [r3, #4]
100012aa:	230b      	movs	r3, #11
100012ac:	18fb      	adds	r3, r7, r3
100012ae:	781b      	ldrb	r3, [r3, #0]
100012b0:	409a      	lsls	r2, r3
100012b2:	68fb      	ldr	r3, [r7, #12]
100012b4:	605a      	str	r2, [r3, #4]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << (PORT_IOCR_PC_Size * (pin & 0x3U));
100012b6:	230b      	movs	r3, #11
100012b8:	18fb      	adds	r3, r7, r3
100012ba:	781b      	ldrb	r3, [r3, #0]
100012bc:	089b      	lsrs	r3, r3, #2
100012be:	b2db      	uxtb	r3, r3
100012c0:	1c18      	adds	r0, r3, #0
100012c2:	230b      	movs	r3, #11
100012c4:	18fb      	adds	r3, r7, r3
100012c6:	781b      	ldrb	r3, [r3, #0]
100012c8:	089b      	lsrs	r3, r3, #2
100012ca:	b2db      	uxtb	r3, r3
100012cc:	1c1a      	adds	r2, r3, #0
100012ce:	68fb      	ldr	r3, [r7, #12]
100012d0:	3204      	adds	r2, #4
100012d2:	0092      	lsls	r2, r2, #2
100012d4:	58d2      	ldr	r2, [r2, r3]
100012d6:	687b      	ldr	r3, [r7, #4]
100012d8:	781b      	ldrb	r3, [r3, #0]
100012da:	1c1c      	adds	r4, r3, #0
100012dc:	230b      	movs	r3, #11
100012de:	18fb      	adds	r3, r7, r3
100012e0:	781b      	ldrb	r3, [r3, #0]
100012e2:	2103      	movs	r1, #3
100012e4:	400b      	ands	r3, r1
100012e6:	00db      	lsls	r3, r3, #3
100012e8:	409c      	lsls	r4, r3
100012ea:	1c23      	adds	r3, r4, #0
100012ec:	431a      	orrs	r2, r3
100012ee:	1c11      	adds	r1, r2, #0
100012f0:	68fb      	ldr	r3, [r7, #12]
100012f2:	1d02      	adds	r2, r0, #4
100012f4:	0092      	lsls	r2, r2, #2
100012f6:	50d1      	str	r1, [r2, r3]
}
100012f8:	46bd      	mov	sp, r7
100012fa:	b005      	add	sp, #20
100012fc:	bd90      	pop	{r4, r7, pc}
100012fe:	46c0      	nop			; (mov r8, r8)
10001300:	40040200 	.word	0x40040200

10001304 <XMC_SCU_LockProtectedBits>:
#endif
}

/* API to lock protected bitfields from being modified */
void XMC_SCU_LockProtectedBits(void)
{
10001304:	b580      	push	{r7, lr}
10001306:	af00      	add	r7, sp, #0
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_ENABLE;
10001308:	4b02      	ldr	r3, [pc, #8]	; (10001314 <XMC_SCU_LockProtectedBits+0x10>)
1000130a:	22c3      	movs	r2, #195	; 0xc3
1000130c:	625a      	str	r2, [r3, #36]	; 0x24
}
1000130e:	46bd      	mov	sp, r7
10001310:	bd80      	pop	{r7, pc}
10001312:	46c0      	nop			; (mov r8, r8)
10001314:	40010000 	.word	0x40010000

10001318 <XMC_SCU_UnlockProtectedBits>:

/* API to make protected bitfields available for modification */
void XMC_SCU_UnlockProtectedBits(void)
{
10001318:	b580      	push	{r7, lr}
1000131a:	af00      	add	r7, sp, #0
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_DISABLE;
1000131c:	4b05      	ldr	r3, [pc, #20]	; (10001334 <XMC_SCU_UnlockProtectedBits+0x1c>)
1000131e:	22c0      	movs	r2, #192	; 0xc0
10001320:	625a      	str	r2, [r3, #36]	; 0x24

  while (((SCU_GENERAL->PASSWD) & SCU_GENERAL_PASSWD_PROTS_Msk))
10001322:	46c0      	nop			; (mov r8, r8)
10001324:	4b03      	ldr	r3, [pc, #12]	; (10001334 <XMC_SCU_UnlockProtectedBits+0x1c>)
10001326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001328:	2204      	movs	r2, #4
1000132a:	4013      	ands	r3, r2
1000132c:	d1fa      	bne.n	10001324 <XMC_SCU_UnlockProtectedBits+0xc>
  {
    /* Loop until the lock is removed */
  }
}
1000132e:	46bd      	mov	sp, r7
10001330:	bd80      	pop	{r7, pc}
10001332:	46c0      	nop			; (mov r8, r8)
10001334:	40010000 	.word	0x40010000

10001338 <XMC_SCU_CLOCK_Init>:
}


/* API which initializes the clock tree ofthe device */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
10001338:	b580      	push	{r7, lr}
1000133a:	b086      	sub	sp, #24
1000133c:	af00      	add	r7, sp, #0
1000133e:	6078      	str	r0, [r7, #4]
  /* Remove protection */
  XMC_SCU_UnlockProtectedBits();
10001340:	f7ff ffea 	bl	10001318 <XMC_SCU_UnlockProtectedBits>

#if (UC_SERIES == XMC14)
  /* OSCHP source selection - OSC mode */

  if (config->oschp_mode != XMC_SCU_CLOCK_OSCHP_MODE_DISABLED)
10001344:	687b      	ldr	r3, [r7, #4]
10001346:	799b      	ldrb	r3, [r3, #6]
10001348:	2b30      	cmp	r3, #48	; 0x30
1000134a:	d053      	beq.n	100013f4 <XMC_SCU_CLOCK_Init+0xbc>
  {
    if (OSCHP_GetFrequency() > 20000000U)
1000134c:	f7ff ff14 	bl	10001178 <OSCHP_GetFrequency>
10001350:	1e02      	subs	r2, r0, #0
10001352:	4b49      	ldr	r3, [pc, #292]	; (10001478 <XMC_SCU_CLOCK_Init+0x140>)
10001354:	429a      	cmp	r2, r3
10001356:	d909      	bls.n	1000136c <XMC_SCU_CLOCK_Init+0x34>
    {
      SCU_ANALOG->ANAOSCHPCTRL |= (uint16_t)SCU_ANALOG_ANAOSCHPCTRL_HYSCTRL_Msk;
10001358:	4a48      	ldr	r2, [pc, #288]	; (1000147c <XMC_SCU_CLOCK_Init+0x144>)
1000135a:	4948      	ldr	r1, [pc, #288]	; (1000147c <XMC_SCU_CLOCK_Init+0x144>)
1000135c:	2390      	movs	r3, #144	; 0x90
1000135e:	5acb      	ldrh	r3, [r1, r3]
10001360:	b29b      	uxth	r3, r3
10001362:	2140      	movs	r1, #64	; 0x40
10001364:	430b      	orrs	r3, r1
10001366:	b299      	uxth	r1, r3
10001368:	2390      	movs	r3, #144	; 0x90
1000136a:	52d1      	strh	r1, [r2, r3]
    }

    SCU_ANALOG->ANAOSCHPCTRL = (uint16_t)(SCU_ANALOG->ANAOSCHPCTRL & ~(SCU_ANALOG_ANAOSCHPCTRL_SHBY_Msk | SCU_ANALOG_ANAOSCHPCTRL_MODE_Msk)) |
1000136c:	4a43      	ldr	r2, [pc, #268]	; (1000147c <XMC_SCU_CLOCK_Init+0x144>)
1000136e:	4943      	ldr	r1, [pc, #268]	; (1000147c <XMC_SCU_CLOCK_Init+0x144>)
10001370:	2390      	movs	r3, #144	; 0x90
10001372:	5acb      	ldrh	r3, [r1, r3]
10001374:	b29b      	uxth	r3, r3
10001376:	b29b      	uxth	r3, r3
10001378:	1c19      	adds	r1, r3, #0
1000137a:	2332      	movs	r3, #50	; 0x32
1000137c:	4399      	bics	r1, r3
1000137e:	1c0b      	adds	r3, r1, #0
10001380:	b299      	uxth	r1, r3
                               config->oschp_mode;
10001382:	687b      	ldr	r3, [r7, #4]
10001384:	799b      	ldrb	r3, [r3, #6]
    if (OSCHP_GetFrequency() > 20000000U)
    {
      SCU_ANALOG->ANAOSCHPCTRL |= (uint16_t)SCU_ANALOG_ANAOSCHPCTRL_HYSCTRL_Msk;
    }

    SCU_ANALOG->ANAOSCHPCTRL = (uint16_t)(SCU_ANALOG->ANAOSCHPCTRL & ~(SCU_ANALOG_ANAOSCHPCTRL_SHBY_Msk | SCU_ANALOG_ANAOSCHPCTRL_MODE_Msk)) |
10001386:	b29b      	uxth	r3, r3
10001388:	430b      	orrs	r3, r1
1000138a:	b29b      	uxth	r3, r3
1000138c:	b299      	uxth	r1, r3
1000138e:	2390      	movs	r3, #144	; 0x90
10001390:	52d1      	strh	r1, [r2, r3]
                               config->oschp_mode;

    do
    {
      /* clear the status bit before restarting the detection. */
      SCU_INTERRUPT->SRCLR1 = SCU_INTERRUPT_SRCLR1_LOECI_Msk;
10001392:	4b3b      	ldr	r3, [pc, #236]	; (10001480 <XMC_SCU_CLOCK_Init+0x148>)
10001394:	2202      	movs	r2, #2
10001396:	629a      	str	r2, [r3, #40]	; 0x28

      /* According to errata SCU_CM.023, to reset the XOWD it is needed to disable/enable the watchdog,
         keeping in between at least one DCO2 cycle */

      /* Disable XOWD */
      SCU_CLK->OSCCSR &= ~SCU_CLK_OSCCSR_XOWDEN_Msk;
10001398:	4b3a      	ldr	r3, [pc, #232]	; (10001484 <XMC_SCU_CLOCK_Init+0x14c>)
1000139a:	4a3a      	ldr	r2, [pc, #232]	; (10001484 <XMC_SCU_CLOCK_Init+0x14c>)
1000139c:	6952      	ldr	r2, [r2, #20]
1000139e:	493a      	ldr	r1, [pc, #232]	; (10001488 <XMC_SCU_CLOCK_Init+0x150>)
100013a0:	400a      	ands	r2, r1
100013a2:	615a      	str	r2, [r3, #20]
100013a4:	4b39      	ldr	r3, [pc, #228]	; (1000148c <XMC_SCU_CLOCK_Init+0x154>)
100013a6:	617b      	str	r3, [r7, #20]
100013a8:	e000      	b.n	100013ac <XMC_SCU_CLOCK_Init+0x74>
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while (--cycles > 0U)
  {
    __NOP();
100013aa:	46c0      	nop			; (mov r8, r8)

#if UC_SERIES == XMC14
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while (--cycles > 0U)
100013ac:	697b      	ldr	r3, [r7, #20]
100013ae:	3b01      	subs	r3, #1
100013b0:	617b      	str	r3, [r7, #20]
100013b2:	697b      	ldr	r3, [r7, #20]
100013b4:	2b00      	cmp	r3, #0
100013b6:	d1f8      	bne.n	100013aa <XMC_SCU_CLOCK_Init+0x72>
      /* Clock domains synchronization, at least 1 DCO2 cycle */
      /* delay value calculation assuming worst case DCO1=48Mhz and 3cycles per delay iteration */
      delay(538);

      /* Enable XOWD */
      SCU_CLK->OSCCSR |= SCU_CLK_OSCCSR_XOWDEN_Msk | SCU_CLK_OSCCSR_XOWDRES_Msk;
100013b8:	4b32      	ldr	r3, [pc, #200]	; (10001484 <XMC_SCU_CLOCK_Init+0x14c>)
100013ba:	4a32      	ldr	r2, [pc, #200]	; (10001484 <XMC_SCU_CLOCK_Init+0x14c>)
100013bc:	6952      	ldr	r2, [r2, #20]
100013be:	21c0      	movs	r1, #192	; 0xc0
100013c0:	0489      	lsls	r1, r1, #18
100013c2:	430a      	orrs	r2, r1
100013c4:	615a      	str	r2, [r3, #20]

      /* OSCCSR.XOWDRES bit will be automatically reset to 0 after XOWD is reset */
      while (SCU_CLK->OSCCSR & SCU_CLK_OSCCSR_XOWDRES_Msk);
100013c6:	46c0      	nop			; (mov r8, r8)
100013c8:	4b2e      	ldr	r3, [pc, #184]	; (10001484 <XMC_SCU_CLOCK_Init+0x14c>)
100013ca:	695a      	ldr	r2, [r3, #20]
100013cc:	2380      	movs	r3, #128	; 0x80
100013ce:	045b      	lsls	r3, r3, #17
100013d0:	4013      	ands	r3, r2
100013d2:	d1f9      	bne.n	100013c8 <XMC_SCU_CLOCK_Init+0x90>
100013d4:	4b2e      	ldr	r3, [pc, #184]	; (10001490 <XMC_SCU_CLOCK_Init+0x158>)
100013d6:	613b      	str	r3, [r7, #16]
100013d8:	e000      	b.n	100013dc <XMC_SCU_CLOCK_Init+0xa4>
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while (--cycles > 0U)
  {
    __NOP();
100013da:	46c0      	nop			; (mov r8, r8)

#if UC_SERIES == XMC14
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while (--cycles > 0U)
100013dc:	693b      	ldr	r3, [r7, #16]
100013de:	3b01      	subs	r3, #1
100013e0:	613b      	str	r3, [r7, #16]
100013e2:	693b      	ldr	r3, [r7, #16]
100013e4:	2b00      	cmp	r3, #0
100013e6:	d1f8      	bne.n	100013da <XMC_SCU_CLOCK_Init+0xa2>
      /* Wait a at least 5 DCO2 cycles for the update of the XTAL OWD result */
      /* delay value calculation assuming worst case DCO1=48Mhz and 3cycles per delay iteration */
      delay(2685);

    }
    while (SCU_INTERRUPT->SRRAW1 & SCU_INTERRUPT_SRRAW1_LOECI_Msk);
100013e8:	4b25      	ldr	r3, [pc, #148]	; (10001480 <XMC_SCU_CLOCK_Init+0x148>)
100013ea:	6a1b      	ldr	r3, [r3, #32]
100013ec:	2202      	movs	r2, #2
100013ee:	4013      	ands	r3, r2
100013f0:	d1cf      	bne.n	10001392 <XMC_SCU_CLOCK_Init+0x5a>
100013f2:	e009      	b.n	10001408 <XMC_SCU_CLOCK_Init+0xd0>
  }
  else /* (config->oschp_mode == XMC_SCU_CLOCK_OSCHP_MODE_DISABLED) */
  {
    SCU_ANALOG->ANAOSCHPCTRL |= SCU_ANALOG_ANAOSCHPCTRL_MODE_Msk;
100013f4:	4a21      	ldr	r2, [pc, #132]	; (1000147c <XMC_SCU_CLOCK_Init+0x144>)
100013f6:	4921      	ldr	r1, [pc, #132]	; (1000147c <XMC_SCU_CLOCK_Init+0x144>)
100013f8:	2390      	movs	r3, #144	; 0x90
100013fa:	5acb      	ldrh	r3, [r1, r3]
100013fc:	b29b      	uxth	r3, r3
100013fe:	2130      	movs	r1, #48	; 0x30
10001400:	430b      	orrs	r3, r1
10001402:	b299      	uxth	r1, r3
10001404:	2390      	movs	r3, #144	; 0x90
10001406:	52d1      	strh	r1, [r2, r3]
  }

  SCU_ANALOG->ANAOSCLPCTRL = (uint16_t)config->osclp_mode;
10001408:	4a1c      	ldr	r2, [pc, #112]	; (1000147c <XMC_SCU_CLOCK_Init+0x144>)
1000140a:	687b      	ldr	r3, [r7, #4]
1000140c:	79db      	ldrb	r3, [r3, #7]
1000140e:	b299      	uxth	r1, r3
10001410:	238c      	movs	r3, #140	; 0x8c
10001412:	52d1      	strh	r1, [r2, r3]
#ifndef DISABLE_WAIT_RTC_XTAL_OSC_STARTUP
  if (config->osclp_mode == XMC_SCU_CLOCK_OSCLP_MODE_OSC)
10001414:	687b      	ldr	r3, [r7, #4]
10001416:	79db      	ldrb	r3, [r3, #7]
10001418:	2b00      	cmp	r3, #0
1000141a:	d109      	bne.n	10001430 <XMC_SCU_CLOCK_Init+0xf8>
1000141c:	4b1d      	ldr	r3, [pc, #116]	; (10001494 <XMC_SCU_CLOCK_Init+0x15c>)
1000141e:	60fb      	str	r3, [r7, #12]
10001420:	e000      	b.n	10001424 <XMC_SCU_CLOCK_Init+0xec>
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while (--cycles > 0U)
  {
    __NOP();
10001422:	46c0      	nop			; (mov r8, r8)

#if UC_SERIES == XMC14
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while (--cycles > 0U)
10001424:	68fb      	ldr	r3, [r7, #12]
10001426:	3b01      	subs	r3, #1
10001428:	60fb      	str	r3, [r7, #12]
1000142a:	68fb      	ldr	r3, [r7, #12]
1000142c:	2b00      	cmp	r3, #0
1000142e:	d1f8      	bne.n	10001422 <XMC_SCU_CLOCK_Init+0xea>
    /* Wait oscillator startup time ~5s */
    delay(6500000);
  }
#endif

  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
10001430:	4b14      	ldr	r3, [pc, #80]	; (10001484 <XMC_SCU_CLOCK_Init+0x14c>)
10001432:	4a14      	ldr	r2, [pc, #80]	; (10001484 <XMC_SCU_CLOCK_Init+0x14c>)
10001434:	69d2      	ldr	r2, [r2, #28]
10001436:	4918      	ldr	r1, [pc, #96]	; (10001498 <XMC_SCU_CLOCK_Init+0x160>)
10001438:	400a      	ands	r2, r1
                    config->dclk_src;
1000143a:	6879      	ldr	r1, [r7, #4]
1000143c:	8889      	ldrh	r1, [r1, #4]
    /* Wait oscillator startup time ~5s */
    delay(6500000);
  }
#endif

  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
1000143e:	430a      	orrs	r2, r1
10001440:	61da      	str	r2, [r3, #28]
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
10001442:	4a10      	ldr	r2, [pc, #64]	; (10001484 <XMC_SCU_CLOCK_Init+0x14c>)
10001444:	4b0f      	ldr	r3, [pc, #60]	; (10001484 <XMC_SCU_CLOCK_Init+0x14c>)
10001446:	681b      	ldr	r3, [r3, #0]
10001448:	4914      	ldr	r1, [pc, #80]	; (1000149c <XMC_SCU_CLOCK_Init+0x164>)
1000144a:	4019      	ands	r1, r3
                   config->rtc_src |
1000144c:	687b      	ldr	r3, [r7, #4]
1000144e:	68db      	ldr	r3, [r3, #12]
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
10001450:	4319      	orrs	r1, r3
                   config->rtc_src |
                   config->pclk_src;
10001452:	687b      	ldr	r3, [r7, #4]
10001454:	689b      	ldr	r3, [r3, #8]
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
                   config->rtc_src |
10001456:	430b      	orrs	r3, r1
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
10001458:	6013      	str	r3, [r2, #0]
                   config->rtc_src |
                   config->pclk_src;

  /* Close the lock opened above. */
  XMC_SCU_LockProtectedBits();
1000145a:	f7ff ff53 	bl	10001304 <XMC_SCU_LockProtectedBits>

  /* Update the dividers now */
  XMC_SCU_CLOCK_ScaleMCLKFrequency(config->idiv, config->fdiv);
1000145e:	687b      	ldr	r3, [r7, #4]
10001460:	789b      	ldrb	r3, [r3, #2]
10001462:	1c1a      	adds	r2, r3, #0
10001464:	687b      	ldr	r3, [r7, #4]
10001466:	881b      	ldrh	r3, [r3, #0]
10001468:	1c10      	adds	r0, r2, #0
1000146a:	1c19      	adds	r1, r3, #0
1000146c:	f000 f832 	bl	100014d4 <XMC_SCU_CLOCK_ScaleMCLKFrequency>

}
10001470:	46bd      	mov	sp, r7
10001472:	b006      	add	sp, #24
10001474:	bd80      	pop	{r7, pc}
10001476:	46c0      	nop			; (mov r8, r8)
10001478:	01312d00 	.word	0x01312d00
1000147c:	40011000 	.word	0x40011000
10001480:	40010038 	.word	0x40010038
10001484:	40010300 	.word	0x40010300
10001488:	fdffffff 	.word	0xfdffffff
1000148c:	0000021a 	.word	0x0000021a
10001490:	00000a7d 	.word	0x00000a7d
10001494:	00632ea0 	.word	0x00632ea0
10001498:	fffffdff 	.word	0xfffffdff
1000149c:	fff0ffff 	.word	0xfff0ffff

100014a0 <XMC_SCU_CLOCK_UngatePeripheralClock>:
  XMC_SCU_LockProtectedBits();
}

/* API which ungates a clock note at its source */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
100014a0:	b580      	push	{r7, lr}
100014a2:	b082      	sub	sp, #8
100014a4:	af00      	add	r7, sp, #0
100014a6:	6078      	str	r0, [r7, #4]
  XMC_SCU_UnlockProtectedBits();
100014a8:	f7ff ff36 	bl	10001318 <XMC_SCU_UnlockProtectedBits>
  SCU_CLK->CGATCLR0 |= (uint32_t)peripheral;
100014ac:	4b08      	ldr	r3, [pc, #32]	; (100014d0 <XMC_SCU_CLOCK_UngatePeripheralClock+0x30>)
100014ae:	4a08      	ldr	r2, [pc, #32]	; (100014d0 <XMC_SCU_CLOCK_UngatePeripheralClock+0x30>)
100014b0:	6911      	ldr	r1, [r2, #16]
100014b2:	687a      	ldr	r2, [r7, #4]
100014b4:	430a      	orrs	r2, r1
100014b6:	611a      	str	r2, [r3, #16]
  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
100014b8:	46c0      	nop			; (mov r8, r8)
100014ba:	4b05      	ldr	r3, [pc, #20]	; (100014d0 <XMC_SCU_CLOCK_UngatePeripheralClock+0x30>)
100014bc:	681a      	ldr	r2, [r3, #0]
100014be:	2380      	movs	r3, #128	; 0x80
100014c0:	05db      	lsls	r3, r3, #23
100014c2:	4013      	ands	r3, r2
100014c4:	d1f9      	bne.n	100014ba <XMC_SCU_CLOCK_UngatePeripheralClock+0x1a>
  {
    /* Wait voltage suply stabilization */
  }
  XMC_SCU_LockProtectedBits();
100014c6:	f7ff ff1d 	bl	10001304 <XMC_SCU_LockProtectedBits>
}
100014ca:	46bd      	mov	sp, r7
100014cc:	b002      	add	sp, #8
100014ce:	bd80      	pop	{r7, pc}
100014d0:	40010300 	.word	0x40010300

100014d4 <XMC_SCU_CLOCK_ScaleMCLKFrequency>:
}


/* A utility routine which updates the fractional dividers in steps */
void XMC_SCU_CLOCK_ScaleMCLKFrequency(uint32_t idiv, uint32_t fdiv)
{
100014d4:	b580      	push	{r7, lr}
100014d6:	b084      	sub	sp, #16
100014d8:	af00      	add	r7, sp, #0
100014da:	6078      	str	r0, [r7, #4]
100014dc:	6039      	str	r1, [r7, #0]
  /* Find out current and target value of idiv */
  uint32_t curr_idiv;

  XMC_SCU_UnlockProtectedBits();
100014de:	f7ff ff1b 	bl	10001318 <XMC_SCU_UnlockProtectedBits>

  /* Take a snapshot of value already programmed into IDIV */
  curr_idiv = (SCU_CLK->CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
100014e2:	4b27      	ldr	r3, [pc, #156]	; (10001580 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
100014e4:	681a      	ldr	r2, [r3, #0]
100014e6:	23ff      	movs	r3, #255	; 0xff
100014e8:	021b      	lsls	r3, r3, #8
100014ea:	4013      	ands	r3, r2
100014ec:	0a1b      	lsrs	r3, r3, #8
100014ee:	60fb      	str	r3, [r7, #12]

#if (UC_SERIES == XMC14)
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
100014f0:	4b23      	ldr	r3, [pc, #140]	; (10001580 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
100014f2:	4a23      	ldr	r2, [pc, #140]	; (10001580 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
100014f4:	69d2      	ldr	r2, [r2, #28]
100014f6:	2103      	movs	r1, #3
100014f8:	438a      	bics	r2, r1
100014fa:	1c11      	adds	r1, r2, #0
                    (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);
100014fc:	683a      	ldr	r2, [r7, #0]
100014fe:	0a12      	lsrs	r2, r2, #8

  /* Take a snapshot of value already programmed into IDIV */
  curr_idiv = (SCU_CLK->CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;

#if (UC_SERIES == XMC14)
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
10001500:	430a      	orrs	r2, r1
10001502:	61da      	str	r2, [r3, #28]
                    (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001504:	4b1e      	ldr	r3, [pc, #120]	; (10001580 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
10001506:	4a1e      	ldr	r2, [pc, #120]	; (10001580 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
10001508:	6812      	ldr	r2, [r2, #0]
1000150a:	491e      	ldr	r1, [pc, #120]	; (10001584 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xb0>)
1000150c:	4011      	ands	r1, r2
                   (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
1000150e:	683a      	ldr	r2, [r7, #0]
10001510:	20ff      	movs	r0, #255	; 0xff
10001512:	4002      	ands	r2, r0

#if (UC_SERIES == XMC14)
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
                    (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001514:	430a      	orrs	r2, r1
                   (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
10001516:	491c      	ldr	r1, [pc, #112]	; (10001588 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xb4>)
10001518:	430a      	orrs	r2, r1

#if (UC_SERIES == XMC14)
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
                    (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
1000151a:	601a      	str	r2, [r3, #0]
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
                   (uint32_t)(fdiv << SCU_CLK_CLKCR_FDIV_Pos) |
                   (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
#endif

  while ((SCU_CLK->CLKCR)& SCU_CLK_CLKCR_VDDC2LOW_Msk)
1000151c:	46c0      	nop			; (mov r8, r8)
1000151e:	4b18      	ldr	r3, [pc, #96]	; (10001580 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
10001520:	681a      	ldr	r2, [r3, #0]
10001522:	2380      	movs	r3, #128	; 0x80
10001524:	05db      	lsls	r3, r3, #23
10001526:	4013      	ands	r3, r2
10001528:	d1f9      	bne.n	1000151e <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x4a>
  {
    /* Spin until the core supply stabilizes */
  }

  if (curr_idiv <= idiv)
1000152a:	68fa      	ldr	r2, [r7, #12]
1000152c:	687b      	ldr	r3, [r7, #4]
1000152e:	429a      	cmp	r2, r3
10001530:	d806      	bhi.n	10001540 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x6c>
  {
    /* Requested IDIV is greater than currently programmed IDIV. So downscale the frequency */
    XMC_SCU_CLOCK_lFrequencyDownScaling(curr_idiv, idiv);
10001532:	68fa      	ldr	r2, [r7, #12]
10001534:	687b      	ldr	r3, [r7, #4]
10001536:	1c10      	adds	r0, r2, #0
10001538:	1c19      	adds	r1, r3, #0
1000153a:	f000 f853 	bl	100015e4 <XMC_SCU_CLOCK_lFrequencyDownScaling>
1000153e:	e005      	b.n	1000154c <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x78>
  }
  else
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
10001540:	68fa      	ldr	r2, [r7, #12]
10001542:	687b      	ldr	r3, [r7, #4]
10001544:	1c10      	adds	r0, r2, #0
10001546:	1c19      	adds	r1, r3, #0
10001548:	f000 f822 	bl	10001590 <XMC_SCU_CLOCK_lFrequencyUpScaling>
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
1000154c:	4b0c      	ldr	r3, [pc, #48]	; (10001580 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
1000154e:	4a0c      	ldr	r2, [pc, #48]	; (10001580 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
10001550:	6812      	ldr	r2, [r2, #0]
10001552:	490e      	ldr	r1, [pc, #56]	; (1000158c <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xb8>)
10001554:	4011      	ands	r1, r2
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
10001556:	687a      	ldr	r2, [r7, #4]
10001558:	0212      	lsls	r2, r2, #8
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
1000155a:	430a      	orrs	r2, r1
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
1000155c:	490a      	ldr	r1, [pc, #40]	; (10001588 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xb4>)
1000155e:	430a      	orrs	r2, r1
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001560:	601a      	str	r2, [r3, #0]
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
10001562:	46c0      	nop			; (mov r8, r8)
10001564:	4b06      	ldr	r3, [pc, #24]	; (10001580 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
10001566:	681a      	ldr	r2, [r3, #0]
10001568:	2380      	movs	r3, #128	; 0x80
1000156a:	05db      	lsls	r3, r3, #23
1000156c:	4013      	ands	r3, r2
1000156e:	d1f9      	bne.n	10001564 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x90>
  {
    /* Wait voltage suply stabilization */
  }

  XMC_SCU_LockProtectedBits();
10001570:	f7ff fec8 	bl	10001304 <XMC_SCU_LockProtectedBits>

  SystemCoreClockUpdate();
10001574:	f7ff fd9c 	bl	100010b0 <SystemCoreClockUpdate>

}
10001578:	46bd      	mov	sp, r7
1000157a:	b004      	add	sp, #16
1000157c:	bd80      	pop	{r7, pc}
1000157e:	46c0      	nop			; (mov r8, r8)
10001580:	40010300 	.word	0x40010300
10001584:	c00fff00 	.word	0xc00fff00
10001588:	3ff00000 	.word	0x3ff00000
1000158c:	c00f00ff 	.word	0xc00f00ff

10001590 <XMC_SCU_CLOCK_lFrequencyUpScaling>:

/* Utility routine to perform frequency up scaling */
static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
10001590:	b580      	push	{r7, lr}
10001592:	b082      	sub	sp, #8
10001594:	af00      	add	r7, sp, #0
10001596:	6078      	str	r0, [r7, #4]
10001598:	6039      	str	r1, [r7, #0]
  while (curr_idiv > (target_idiv * 4UL))
1000159a:	e014      	b.n	100015c6 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x36>
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */
1000159c:	687b      	ldr	r3, [r7, #4]
1000159e:	089b      	lsrs	r3, r3, #2
100015a0:	607b      	str	r3, [r7, #4]

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100015a2:	4b0d      	ldr	r3, [pc, #52]	; (100015d8 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x48>)
100015a4:	4a0c      	ldr	r2, [pc, #48]	; (100015d8 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x48>)
100015a6:	6812      	ldr	r2, [r2, #0]
100015a8:	490c      	ldr	r1, [pc, #48]	; (100015dc <XMC_SCU_CLOCK_lFrequencyUpScaling+0x4c>)
100015aa:	4011      	ands	r1, r2
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
100015ac:	687a      	ldr	r2, [r7, #4]
100015ae:	0212      	lsls	r2, r2, #8
{
  while (curr_idiv > (target_idiv * 4UL))
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100015b0:	430a      	orrs	r2, r1
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
100015b2:	490b      	ldr	r1, [pc, #44]	; (100015e0 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x50>)
100015b4:	430a      	orrs	r2, r1
{
  while (curr_idiv > (target_idiv * 4UL))
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100015b6:	601a      	str	r2, [r3, #0]
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
                     (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
100015b8:	46c0      	nop			; (mov r8, r8)
100015ba:	4b07      	ldr	r3, [pc, #28]	; (100015d8 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x48>)
100015bc:	681a      	ldr	r2, [r3, #0]
100015be:	2380      	movs	r3, #128	; 0x80
100015c0:	05db      	lsls	r3, r3, #23
100015c2:	4013      	ands	r3, r2
100015c4:	d1f9      	bne.n	100015ba <XMC_SCU_CLOCK_lFrequencyUpScaling+0x2a>
}

/* Utility routine to perform frequency up scaling */
static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
  while (curr_idiv > (target_idiv * 4UL))
100015c6:	683b      	ldr	r3, [r7, #0]
100015c8:	009a      	lsls	r2, r3, #2
100015ca:	687b      	ldr	r3, [r7, #4]
100015cc:	429a      	cmp	r2, r3
100015ce:	d3e5      	bcc.n	1000159c <XMC_SCU_CLOCK_lFrequencyUpScaling+0xc>
    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
    {
      /* Wait voltage suply stabilization */
    }
  }
}
100015d0:	46bd      	mov	sp, r7
100015d2:	b002      	add	sp, #8
100015d4:	bd80      	pop	{r7, pc}
100015d6:	46c0      	nop			; (mov r8, r8)
100015d8:	40010300 	.word	0x40010300
100015dc:	c00f00ff 	.word	0xc00f00ff
100015e0:	3ff00000 	.word	0x3ff00000

100015e4 <XMC_SCU_CLOCK_lFrequencyDownScaling>:

/* Utility routine to perform frequency down scaling */
static void XMC_SCU_CLOCK_lFrequencyDownScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
100015e4:	b580      	push	{r7, lr}
100015e6:	b082      	sub	sp, #8
100015e8:	af00      	add	r7, sp, #0
100015ea:	6078      	str	r0, [r7, #4]
100015ec:	6039      	str	r1, [r7, #0]

  while ((curr_idiv * 4UL) < target_idiv)
100015ee:	e019      	b.n	10001624 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x40>
  {
    if (0U == curr_idiv)
100015f0:	687b      	ldr	r3, [r7, #4]
100015f2:	2b00      	cmp	r3, #0
100015f4:	d101      	bne.n	100015fa <XMC_SCU_CLOCK_lFrequencyDownScaling+0x16>
    {
      curr_idiv = 1U;
100015f6:	2301      	movs	r3, #1
100015f8:	607b      	str	r3, [r7, #4]
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
100015fa:	687b      	ldr	r3, [r7, #4]
100015fc:	009b      	lsls	r3, r3, #2
100015fe:	607b      	str	r3, [r7, #4]
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001600:	4b0c      	ldr	r3, [pc, #48]	; (10001634 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x50>)
10001602:	4a0c      	ldr	r2, [pc, #48]	; (10001634 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x50>)
10001604:	6812      	ldr	r2, [r2, #0]
10001606:	490c      	ldr	r1, [pc, #48]	; (10001638 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x54>)
10001608:	4011      	ands	r1, r2
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
1000160a:	687a      	ldr	r2, [r7, #4]
1000160c:	0212      	lsls	r2, r2, #8
    if (0U == curr_idiv)
    {
      curr_idiv = 1U;
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
1000160e:	430a      	orrs	r2, r1
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
10001610:	490a      	ldr	r1, [pc, #40]	; (1000163c <XMC_SCU_CLOCK_lFrequencyDownScaling+0x58>)
10001612:	430a      	orrs	r2, r1
    if (0U == curr_idiv)
    {
      curr_idiv = 1U;
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001614:	601a      	str	r2, [r3, #0]
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
                     (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
10001616:	46c0      	nop			; (mov r8, r8)
10001618:	4b06      	ldr	r3, [pc, #24]	; (10001634 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x50>)
1000161a:	681a      	ldr	r2, [r3, #0]
1000161c:	2380      	movs	r3, #128	; 0x80
1000161e:	05db      	lsls	r3, r3, #23
10001620:	4013      	ands	r3, r2
10001622:	d1f9      	bne.n	10001618 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x34>

/* Utility routine to perform frequency down scaling */
static void XMC_SCU_CLOCK_lFrequencyDownScaling(uint32_t curr_idiv, uint32_t target_idiv)
{

  while ((curr_idiv * 4UL) < target_idiv)
10001624:	687b      	ldr	r3, [r7, #4]
10001626:	009a      	lsls	r2, r3, #2
10001628:	683b      	ldr	r3, [r7, #0]
1000162a:	429a      	cmp	r2, r3
1000162c:	d3e0      	bcc.n	100015f0 <XMC_SCU_CLOCK_lFrequencyDownScaling+0xc>
    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
    {
      /* Wait voltage suply stabilization */
    }
  }
}
1000162e:	46bd      	mov	sp, r7
10001630:	b002      	add	sp, #8
10001632:	bd80      	pop	{r7, pc}
10001634:	40010300 	.word	0x40010300
10001638:	c00f00ff 	.word	0xc00f00ff
1000163c:	3ff00000 	.word	0x3ff00000

10001640 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
10001640:	b580      	push	{r7, lr}
10001642:	af00      	add	r7, sp, #0
  return (SystemCoreClock);
10001644:	4b02      	ldr	r3, [pc, #8]	; (10001650 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x10>)
10001646:	681b      	ldr	r3, [r3, #0]
}
10001648:	1c18      	adds	r0, r3, #0
1000164a:	46bd      	mov	sp, r7
1000164c:	bd80      	pop	{r7, pc}
1000164e:	46c0      	nop			; (mov r8, r8)
10001650:	20003ffc 	.word	0x20003ffc

10001654 <XMC_SCU_SetInterruptControl>:
  return (bool)((SCU_ANALOG->ANASYNC2 & SCU_ANALOG_ANASYNC2_SYNC_READY_Msk) != 0U);
}

/* This function selects service request source for a NVIC interrupt node */
void XMC_SCU_SetInterruptControl(uint8_t irq_number, XMC_SCU_IRQCTRL_t source)
{
10001654:	b580      	push	{r7, lr}
10001656:	b082      	sub	sp, #8
10001658:	af00      	add	r7, sp, #0
1000165a:	1c02      	adds	r2, r0, #0
1000165c:	1dfb      	adds	r3, r7, #7
1000165e:	701a      	strb	r2, [r3, #0]
10001660:	1d3b      	adds	r3, r7, #4
10001662:	1c0a      	adds	r2, r1, #0
10001664:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_SCU_SetInterruptControl: Invalid irq_number", irq_number < 32);
  XMC_ASSERT("XMC_SCU_SetInterruptControl: Invalid source", (source >> 8) == irq_number);

  source &= 0x3U;
10001666:	1d3b      	adds	r3, r7, #4
10001668:	1d3a      	adds	r2, r7, #4
1000166a:	8812      	ldrh	r2, [r2, #0]
1000166c:	2103      	movs	r1, #3
1000166e:	400a      	ands	r2, r1
10001670:	801a      	strh	r2, [r3, #0]
  if (irq_number < 16U)
10001672:	1dfb      	adds	r3, r7, #7
10001674:	781b      	ldrb	r3, [r3, #0]
10001676:	2b0f      	cmp	r3, #15
10001678:	d813      	bhi.n	100016a2 <XMC_SCU_SetInterruptControl+0x4e>
  {
    SCU_GENERAL->INTCR0 = (SCU_GENERAL->INTCR0 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size))) |
1000167a:	4b18      	ldr	r3, [pc, #96]	; (100016dc <XMC_SCU_SetInterruptControl+0x88>)
1000167c:	4a17      	ldr	r2, [pc, #92]	; (100016dc <XMC_SCU_SetInterruptControl+0x88>)
1000167e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
10001680:	1df9      	adds	r1, r7, #7
10001682:	7809      	ldrb	r1, [r1, #0]
10001684:	0049      	lsls	r1, r1, #1
10001686:	1c08      	adds	r0, r1, #0
10001688:	2103      	movs	r1, #3
1000168a:	4081      	lsls	r1, r0
1000168c:	43c9      	mvns	r1, r1
1000168e:	400a      	ands	r2, r1
                          (source << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size));
10001690:	1d39      	adds	r1, r7, #4
10001692:	8809      	ldrh	r1, [r1, #0]
10001694:	1df8      	adds	r0, r7, #7
10001696:	7800      	ldrb	r0, [r0, #0]
10001698:	0040      	lsls	r0, r0, #1
1000169a:	4081      	lsls	r1, r0
  XMC_ASSERT("XMC_SCU_SetInterruptControl: Invalid source", (source >> 8) == irq_number);

  source &= 0x3U;
  if (irq_number < 16U)
  {
    SCU_GENERAL->INTCR0 = (SCU_GENERAL->INTCR0 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size))) |
1000169c:	430a      	orrs	r2, r1
1000169e:	66da      	str	r2, [r3, #108]	; 0x6c
100016a0:	e018      	b.n	100016d4 <XMC_SCU_SetInterruptControl+0x80>
                          (source << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size));
  }
  else
  {
    irq_number &= 0x0fU;
100016a2:	1dfb      	adds	r3, r7, #7
100016a4:	1dfa      	adds	r2, r7, #7
100016a6:	7812      	ldrb	r2, [r2, #0]
100016a8:	210f      	movs	r1, #15
100016aa:	400a      	ands	r2, r1
100016ac:	701a      	strb	r2, [r3, #0]
    SCU_GENERAL->INTCR1 = (SCU_GENERAL->INTCR1 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size))) |
100016ae:	4b0b      	ldr	r3, [pc, #44]	; (100016dc <XMC_SCU_SetInterruptControl+0x88>)
100016b0:	4a0a      	ldr	r2, [pc, #40]	; (100016dc <XMC_SCU_SetInterruptControl+0x88>)
100016b2:	6f12      	ldr	r2, [r2, #112]	; 0x70
100016b4:	1df9      	adds	r1, r7, #7
100016b6:	7809      	ldrb	r1, [r1, #0]
100016b8:	0049      	lsls	r1, r1, #1
100016ba:	1c08      	adds	r0, r1, #0
100016bc:	2103      	movs	r1, #3
100016be:	4081      	lsls	r1, r0
100016c0:	43c9      	mvns	r1, r1
100016c2:	400a      	ands	r2, r1
                          (source << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size));
100016c4:	1d39      	adds	r1, r7, #4
100016c6:	8809      	ldrh	r1, [r1, #0]
100016c8:	1df8      	adds	r0, r7, #7
100016ca:	7800      	ldrb	r0, [r0, #0]
100016cc:	0040      	lsls	r0, r0, #1
100016ce:	4081      	lsls	r1, r0
                          (source << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size));
  }
  else
  {
    irq_number &= 0x0fU;
    SCU_GENERAL->INTCR1 = (SCU_GENERAL->INTCR1 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size))) |
100016d0:	430a      	orrs	r2, r1
100016d2:	671a      	str	r2, [r3, #112]	; 0x70
                          (source << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size));
  }
}
100016d4:	46bd      	mov	sp, r7
100016d6:	b002      	add	sp, #8
100016d8:	bd80      	pop	{r7, pc}
100016da:	46c0      	nop			; (mov r8, r8)
100016dc:	40010000 	.word	0x40010000

100016e0 <XMC_CAN_IsPanelControlReady>:
 * \par<b>Related APIs:</b><BR>
 *  XMC_CAN_PanelControl()
 *
 */
__STATIC_INLINE bool XMC_CAN_IsPanelControlReady(XMC_CAN_t *const obj)
{
100016e0:	b580      	push	{r7, lr}
100016e2:	b082      	sub	sp, #8
100016e4:	af00      	add	r7, sp, #0
100016e6:	6078      	str	r0, [r7, #4]
  return (bool)((obj->PANCTR & (CAN_PANCTR_BUSY_Msk | CAN_PANCTR_RBUSY_Msk)) == 0);
100016e8:	687a      	ldr	r2, [r7, #4]
100016ea:	23e2      	movs	r3, #226	; 0xe2
100016ec:	005b      	lsls	r3, r3, #1
100016ee:	58d2      	ldr	r2, [r2, r3]
100016f0:	23c0      	movs	r3, #192	; 0xc0
100016f2:	009b      	lsls	r3, r3, #2
100016f4:	4013      	ands	r3, r2
100016f6:	425a      	negs	r2, r3
100016f8:	4153      	adcs	r3, r2
100016fa:	b2db      	uxtb	r3, r3
}
100016fc:	1c18      	adds	r0, r3, #0
100016fe:	46bd      	mov	sp, r7
10001700:	b002      	add	sp, #8
10001702:	bd80      	pop	{r7, pc}

10001704 <XMC_CAN_PanelControl>:

__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
    const XMC_CAN_PANCMD_t pancmd,
    const uint8_t arg1,
    const uint8_t arg2)
{
10001704:	b590      	push	{r4, r7, lr}
10001706:	b083      	sub	sp, #12
10001708:	af00      	add	r7, sp, #0
1000170a:	6078      	str	r0, [r7, #4]
1000170c:	1c0c      	adds	r4, r1, #0
1000170e:	1c10      	adds	r0, r2, #0
10001710:	1c19      	adds	r1, r3, #0
10001712:	1cfb      	adds	r3, r7, #3
10001714:	1c22      	adds	r2, r4, #0
10001716:	701a      	strb	r2, [r3, #0]
10001718:	1cbb      	adds	r3, r7, #2
1000171a:	1c02      	adds	r2, r0, #0
1000171c:	701a      	strb	r2, [r3, #0]
1000171e:	1c7b      	adds	r3, r7, #1
10001720:	1c0a      	adds	r2, r1, #0
10001722:	701a      	strb	r2, [r3, #0]
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
10001724:	1cfb      	adds	r3, r7, #3
10001726:	781a      	ldrb	r2, [r3, #0]
                (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
10001728:	1cbb      	adds	r3, r7, #2
1000172a:	781b      	ldrb	r3, [r3, #0]
1000172c:	0419      	lsls	r1, r3, #16
1000172e:	23ff      	movs	r3, #255	; 0xff
10001730:	041b      	lsls	r3, r3, #16
10001732:	400b      	ands	r3, r1
__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
    const XMC_CAN_PANCMD_t pancmd,
    const uint8_t arg1,
    const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
10001734:	431a      	orrs	r2, r3
                (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
                (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
10001736:	1c7b      	adds	r3, r7, #1
10001738:	781b      	ldrb	r3, [r3, #0]
1000173a:	061b      	lsls	r3, r3, #24
    const XMC_CAN_PANCMD_t pancmd,
    const uint8_t arg1,
    const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
                (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
1000173c:	431a      	orrs	r2, r3
1000173e:	1c11      	adds	r1, r2, #0
__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
    const XMC_CAN_PANCMD_t pancmd,
    const uint8_t arg1,
    const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
10001740:	687a      	ldr	r2, [r7, #4]
10001742:	23e2      	movs	r3, #226	; 0xe2
10001744:	005b      	lsls	r3, r3, #1
10001746:	50d1      	str	r1, [r2, r3]
                (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
                (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
}
10001748:	46bd      	mov	sp, r7
1000174a:	b003      	add	sp, #12
1000174c:	bd90      	pop	{r4, r7, pc}
1000174e:	46c0      	nop			; (mov r8, r8)

10001750 <XMC_CAN_NODE_EnableConfigurationChange>:
 * XMC_CAN_NODE_DisableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
10001750:	b580      	push	{r7, lr}
10001752:	b082      	sub	sp, #8
10001754:	af00      	add	r7, sp, #0
10001756:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
10001758:	687b      	ldr	r3, [r7, #4]
1000175a:	681b      	ldr	r3, [r3, #0]
1000175c:	2240      	movs	r2, #64	; 0x40
1000175e:	431a      	orrs	r2, r3
10001760:	687b      	ldr	r3, [r7, #4]
10001762:	601a      	str	r2, [r3, #0]
}
10001764:	46bd      	mov	sp, r7
10001766:	b002      	add	sp, #8
10001768:	bd80      	pop	{r7, pc}
1000176a:	46c0      	nop			; (mov r8, r8)

1000176c <XMC_CAN_NODE_DisableConfigurationChange>:
 * XMC_CAN_NODE_EnableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
1000176c:	b580      	push	{r7, lr}
1000176e:	b082      	sub	sp, #8
10001770:	af00      	add	r7, sp, #0
10001772:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
10001774:	687b      	ldr	r3, [r7, #4]
10001776:	681b      	ldr	r3, [r3, #0]
10001778:	2240      	movs	r2, #64	; 0x40
1000177a:	4393      	bics	r3, r2
1000177c:	1c1a      	adds	r2, r3, #0
1000177e:	687b      	ldr	r3, [r7, #4]
10001780:	601a      	str	r2, [r3, #0]
}
10001782:	46bd      	mov	sp, r7
10001784:	b002      	add	sp, #8
10001786:	bd80      	pop	{r7, pc}

10001788 <max>:

#if defined(CAN)
#include "xmc_scu.h"

__STATIC_INLINE uint32_t max(uint32_t a, uint32_t b)
{
10001788:	b580      	push	{r7, lr}
1000178a:	b082      	sub	sp, #8
1000178c:	af00      	add	r7, sp, #0
1000178e:	6078      	str	r0, [r7, #4]
10001790:	6039      	str	r1, [r7, #0]
  return (a > b) ? a : b;
10001792:	687a      	ldr	r2, [r7, #4]
10001794:	683b      	ldr	r3, [r7, #0]
10001796:	4293      	cmp	r3, r2
10001798:	d200      	bcs.n	1000179c <max+0x14>
1000179a:	1c13      	adds	r3, r2, #0
}
1000179c:	1c18      	adds	r0, r3, #0
1000179e:	46bd      	mov	sp, r7
100017a0:	b002      	add	sp, #8
100017a2:	bd80      	pop	{r7, pc}

100017a4 <min>:

__STATIC_INLINE uint32_t min(uint32_t a, uint32_t b)
{
100017a4:	b580      	push	{r7, lr}
100017a6:	b082      	sub	sp, #8
100017a8:	af00      	add	r7, sp, #0
100017aa:	6078      	str	r0, [r7, #4]
100017ac:	6039      	str	r1, [r7, #0]
  return (a < b) ? a : b;
100017ae:	687a      	ldr	r2, [r7, #4]
100017b0:	683b      	ldr	r3, [r7, #0]
100017b2:	4293      	cmp	r3, r2
100017b4:	d900      	bls.n	100017b8 <min+0x14>
100017b6:	1c13      	adds	r3, r2, #0
}
100017b8:	1c18      	adds	r0, r3, #0
100017ba:	46bd      	mov	sp, r7
100017bc:	b002      	add	sp, #8
100017be:	bd80      	pop	{r7, pc}

100017c0 <XMC_CAN_NODE_NominalBitTimeConfigureEx>:
#define XMC_CAN_NODE_MAX_TSEG2 7


int32_t XMC_CAN_NODE_NominalBitTimeConfigureEx(XMC_CAN_NODE_t *const can_node,
    const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const bit_time_config)
{
100017c0:	b580      	push	{r7, lr}
100017c2:	b088      	sub	sp, #32
100017c4:	af00      	add	r7, sp, #0
100017c6:	6078      	str	r0, [r7, #4]
100017c8:	6039      	str	r1, [r7, #0]
  /* Check that the CAN frequency is a multiple of the required baudrate */
  if ((bit_time_config->can_frequency % bit_time_config->baudrate) == 0)
100017ca:	683b      	ldr	r3, [r7, #0]
100017cc:	681a      	ldr	r2, [r3, #0]
100017ce:	683b      	ldr	r3, [r7, #0]
100017d0:	685b      	ldr	r3, [r3, #4]
100017d2:	1c10      	adds	r0, r2, #0
100017d4:	1c19      	adds	r1, r3, #0
100017d6:	f000 fbe1 	bl	10001f9c <__aeabi_uidivmod>
100017da:	1e0b      	subs	r3, r1, #0
100017dc:	d000      	beq.n	100017e0 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x20>
100017de:	e096      	b.n	1000190e <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x14e>
  {
    uint32_t prescaler = 0;
100017e0:	2300      	movs	r3, #0
100017e2:	61fb      	str	r3, [r7, #28]
    uint32_t div8 = 0;
100017e4:	2300      	movs	r3, #0
100017e6:	61bb      	str	r3, [r7, #24]

    /* Calculate the factor between can frequency and required baudrate, this is equal to (prescaler x ntq) */
    uint32_t fcan_div = bit_time_config->can_frequency / bit_time_config->baudrate;
100017e8:	683b      	ldr	r3, [r7, #0]
100017ea:	681a      	ldr	r2, [r3, #0]
100017ec:	683b      	ldr	r3, [r7, #0]
100017ee:	685b      	ldr	r3, [r3, #4]
100017f0:	1c10      	adds	r0, r2, #0
100017f2:	1c19      	adds	r1, r3, #0
100017f4:	f000 fbaa 	bl	10001f4c <__aeabi_uidiv>
100017f8:	1c03      	adds	r3, r0, #0
100017fa:	60bb      	str	r3, [r7, #8]

    /* start with highest ntq, i.e as much as possible time quanta should be used to construct a bit time */
    uint32_t ntq = XMC_CAN_NODE_MAX_NTQ;
100017fc:	2319      	movs	r3, #25
100017fe:	617b      	str	r3, [r7, #20]
    uint32_t tseg1 = 0;
10001800:	2300      	movs	r3, #0
10001802:	613b      	str	r3, [r7, #16]
    uint32_t tseg2 = 0;
10001804:	2300      	movs	r3, #0
10001806:	60fb      	str	r3, [r7, #12]
    while (ntq >= XMC_CAN_NODE_MIN_NTQ)
10001808:	e049      	b.n	1000189e <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xde>
    {
      /* consider this ntq, only if fcan_div is multiple of ntq */
      if ((fcan_div % ntq) == 0)
1000180a:	68bb      	ldr	r3, [r7, #8]
1000180c:	1c18      	adds	r0, r3, #0
1000180e:	6979      	ldr	r1, [r7, #20]
10001810:	f000 fbc4 	bl	10001f9c <__aeabi_uidivmod>
10001814:	1e0b      	subs	r3, r1, #0
10001816:	d13f      	bne.n	10001898 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
      {
        div8 = 0;
10001818:	2300      	movs	r3, #0
1000181a:	61bb      	str	r3, [r7, #24]
        prescaler = fcan_div / ntq;
1000181c:	68b8      	ldr	r0, [r7, #8]
1000181e:	6979      	ldr	r1, [r7, #20]
10001820:	f000 fb94 	bl	10001f4c <__aeabi_uidiv>
10001824:	1c03      	adds	r3, r0, #0
10001826:	61fb      	str	r3, [r7, #28]
        if ((prescaler > 0) && (prescaler <= XMC_CAN_NODE_MAX_PRESCALER))
10001828:	69fb      	ldr	r3, [r7, #28]
1000182a:	2b00      	cmp	r3, #0
1000182c:	d034      	beq.n	10001898 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
1000182e:	69fa      	ldr	r2, [r7, #28]
10001830:	2380      	movs	r3, #128	; 0x80
10001832:	009b      	lsls	r3, r3, #2
10001834:	429a      	cmp	r2, r3
10001836:	d82f      	bhi.n	10001898 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
        {
          if (prescaler >= 64)
10001838:	69fb      	ldr	r3, [r7, #28]
1000183a:	2b3f      	cmp	r3, #63	; 0x3f
1000183c:	d909      	bls.n	10001852 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x92>
          {
            /* consider prescaler >=64, if it is integer divisible by 8*/
            if ((prescaler & 0x7U) != 0)
1000183e:	69fb      	ldr	r3, [r7, #28]
10001840:	2207      	movs	r2, #7
10001842:	4013      	ands	r3, r2
10001844:	d003      	beq.n	1000184e <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x8e>
            {
              --ntq;
10001846:	697b      	ldr	r3, [r7, #20]
10001848:	3b01      	subs	r3, #1
1000184a:	617b      	str	r3, [r7, #20]
              continue;
1000184c:	e027      	b.n	1000189e <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xde>
            }
            else
            {
              div8 = 1;
1000184e:	2301      	movs	r3, #1
10001850:	61bb      	str	r3, [r7, #24]
            }
          }

          tseg1 = ((ntq - 1) * bit_time_config->sample_point) / 10000;
10001852:	697b      	ldr	r3, [r7, #20]
10001854:	3b01      	subs	r3, #1
10001856:	683a      	ldr	r2, [r7, #0]
10001858:	8912      	ldrh	r2, [r2, #8]
1000185a:	4353      	muls	r3, r2
1000185c:	1c18      	adds	r0, r3, #0
1000185e:	492e      	ldr	r1, [pc, #184]	; (10001918 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x158>)
10001860:	f000 fb74 	bl	10001f4c <__aeabi_uidiv>
10001864:	1c03      	adds	r3, r0, #0
10001866:	613b      	str	r3, [r7, #16]
          tseg2 = ntq - tseg1 - 1;
10001868:	697a      	ldr	r2, [r7, #20]
1000186a:	693b      	ldr	r3, [r7, #16]
1000186c:	1ad3      	subs	r3, r2, r3
1000186e:	3b01      	subs	r3, #1
10001870:	60fb      	str	r3, [r7, #12]

          if ((XMC_CAN_NODE_MIN_TSEG1 <= tseg1) && (tseg1 <= XMC_CAN_NODE_MAX_TSEG1) &&
10001872:	693b      	ldr	r3, [r7, #16]
10001874:	2b02      	cmp	r3, #2
10001876:	d90f      	bls.n	10001898 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
10001878:	693b      	ldr	r3, [r7, #16]
1000187a:	2b0f      	cmp	r3, #15
1000187c:	d80c      	bhi.n	10001898 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
1000187e:	68fb      	ldr	r3, [r7, #12]
10001880:	2b01      	cmp	r3, #1
10001882:	d909      	bls.n	10001898 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
              (XMC_CAN_NODE_MIN_TSEG2 <= tseg2) && (tseg2 < XMC_CAN_NODE_MAX_TSEG2) && (tseg2 >= bit_time_config->sjw))
10001884:	68fb      	ldr	r3, [r7, #12]
10001886:	2b06      	cmp	r3, #6
10001888:	d806      	bhi.n	10001898 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
1000188a:	683b      	ldr	r3, [r7, #0]
1000188c:	895b      	ldrh	r3, [r3, #10]
1000188e:	1e1a      	subs	r2, r3, #0
10001890:	68fb      	ldr	r3, [r7, #12]
10001892:	429a      	cmp	r2, r3
10001894:	d800      	bhi.n	10001898 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
          {
            break;
10001896:	e005      	b.n	100018a4 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xe4>
          }


        }
      }
      --ntq;
10001898:	697b      	ldr	r3, [r7, #20]
1000189a:	3b01      	subs	r3, #1
1000189c:	617b      	str	r3, [r7, #20]

    /* start with highest ntq, i.e as much as possible time quanta should be used to construct a bit time */
    uint32_t ntq = XMC_CAN_NODE_MAX_NTQ;
    uint32_t tseg1 = 0;
    uint32_t tseg2 = 0;
    while (ntq >= XMC_CAN_NODE_MIN_NTQ)
1000189e:	697b      	ldr	r3, [r7, #20]
100018a0:	2b07      	cmp	r3, #7
100018a2:	d8b2      	bhi.n	1000180a <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x4a>
        }
      }
      --ntq;
    }

    if (ntq >= XMC_CAN_NODE_MIN_NTQ)
100018a4:	697b      	ldr	r3, [r7, #20]
100018a6:	2b07      	cmp	r3, #7
100018a8:	d931      	bls.n	1000190e <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x14e>

      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: prescaler", (prescaler != 0));
      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: tseg1", (tseg1 != 0));
      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: tseg2", (tseg2 != 0));

      XMC_CAN_NODE_EnableConfigurationChange(can_node);
100018aa:	687b      	ldr	r3, [r7, #4]
100018ac:	1c18      	adds	r0, r3, #0
100018ae:	f7ff ff4f 	bl	10001750 <XMC_CAN_NODE_EnableConfigurationChange>

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
100018b2:	68fb      	ldr	r3, [r7, #12]
100018b4:	3b01      	subs	r3, #1
100018b6:	031a      	lsls	r2, r3, #12
100018b8:	23e0      	movs	r3, #224	; 0xe0
100018ba:	01db      	lsls	r3, r3, #7
100018bc:	401a      	ands	r2, r3
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
100018be:	683b      	ldr	r3, [r7, #0]
100018c0:	895b      	ldrh	r3, [r3, #10]
100018c2:	3b01      	subs	r3, #1
100018c4:	019b      	lsls	r3, r3, #6
100018c6:	21ff      	movs	r1, #255	; 0xff
100018c8:	400b      	ands	r3, r1
      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: tseg2", (tseg2 != 0));

      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
100018ca:	431a      	orrs	r2, r3
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
100018cc:	693b      	ldr	r3, [r7, #16]
100018ce:	3b01      	subs	r3, #1
100018d0:	0219      	lsls	r1, r3, #8
100018d2:	23f0      	movs	r3, #240	; 0xf0
100018d4:	011b      	lsls	r3, r3, #4
100018d6:	400b      	ands	r3, r1

      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
100018d8:	431a      	orrs	r2, r3
100018da:	1c11      	adds	r1, r2, #0
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                       ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
100018dc:	69ba      	ldr	r2, [r7, #24]
100018de:	1c13      	adds	r3, r2, #0
100018e0:	005b      	lsls	r3, r3, #1
100018e2:	189b      	adds	r3, r3, r2
100018e4:	1c1a      	adds	r2, r3, #0
100018e6:	69fb      	ldr	r3, [r7, #28]
100018e8:	40d3      	lsrs	r3, r2
100018ea:	3b01      	subs	r3, #1
100018ec:	223f      	movs	r2, #63	; 0x3f
100018ee:	4013      	ands	r3, r2
      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
100018f0:	1c0a      	adds	r2, r1, #0
100018f2:	431a      	orrs	r2, r3
                       ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
                       ((div8 << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
100018f4:	69bb      	ldr	r3, [r7, #24]
100018f6:	03db      	lsls	r3, r3, #15
100018f8:	041b      	lsls	r3, r3, #16
100018fa:	0c1b      	lsrs	r3, r3, #16

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                       ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
100018fc:	431a      	orrs	r2, r3
      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: tseg2", (tseg2 != 0));

      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
100018fe:	687b      	ldr	r3, [r7, #4]
10001900:	611a      	str	r2, [r3, #16]
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                       ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
                       ((div8 << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);

      XMC_CAN_NODE_DisableConfigurationChange(can_node);
10001902:	687b      	ldr	r3, [r7, #4]
10001904:	1c18      	adds	r0, r3, #0
10001906:	f7ff ff31 	bl	1000176c <XMC_CAN_NODE_DisableConfigurationChange>

      return XMC_CAN_STATUS_SUCCESS;
1000190a:	2300      	movs	r3, #0
1000190c:	e000      	b.n	10001910 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x150>
    }
  }

  return XMC_CAN_STATUS_ERROR;
1000190e:	2301      	movs	r3, #1
}
10001910:	1c18      	adds	r0, r3, #0
10001912:	46bd      	mov	sp, r7
10001914:	b008      	add	sp, #32
10001916:	bd80      	pop	{r7, pc}
10001918:	00002710 	.word	0x00002710

1000191c <XMC_CAN_AllocateMOtoNodeList>:
                   (((uint32_t)0U << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
  XMC_CAN_NODE_DisableConfigurationChange(can_node);
}
/* Function to allocate message object from free list to node list */
void XMC_CAN_AllocateMOtoNodeList(XMC_CAN_t *const obj, const uint8_t node_num, const uint8_t mo_num)
{
1000191c:	b590      	push	{r4, r7, lr}
1000191e:	b083      	sub	sp, #12
10001920:	af00      	add	r7, sp, #0
10001922:	6078      	str	r0, [r7, #4]
10001924:	1c08      	adds	r0, r1, #0
10001926:	1c11      	adds	r1, r2, #0
10001928:	1cfb      	adds	r3, r7, #3
1000192a:	1c02      	adds	r2, r0, #0
1000192c:	701a      	strb	r2, [r3, #0]
1000192e:	1cbb      	adds	r3, r7, #2
10001930:	1c0a      	adds	r2, r1, #0
10001932:	701a      	strb	r2, [r3, #0]
  /* wait while panel operation is in progress. */
  while (XMC_CAN_IsPanelControlReady(obj) == false)
10001934:	46c0      	nop			; (mov r8, r8)
10001936:	687b      	ldr	r3, [r7, #4]
10001938:	1c18      	adds	r0, r3, #0
1000193a:	f7ff fed1 	bl	100016e0 <XMC_CAN_IsPanelControlReady>
1000193e:	1c03      	adds	r3, r0, #0
10001940:	1c1a      	adds	r2, r3, #0
10001942:	2301      	movs	r3, #1
10001944:	4053      	eors	r3, r2
10001946:	b2db      	uxtb	r3, r3
10001948:	2b00      	cmp	r3, #0
1000194a:	d1f4      	bne.n	10001936 <XMC_CAN_AllocateMOtoNodeList+0x1a>
  {
    /*Do nothing*/
  };

  /* Panel Command for  allocation of MO to node list */
  XMC_CAN_PanelControl(obj, XMC_CAN_PANCMD_STATIC_ALLOCATE, mo_num, (node_num + 1U));
1000194c:	1cfb      	adds	r3, r7, #3
1000194e:	781b      	ldrb	r3, [r3, #0]
10001950:	3301      	adds	r3, #1
10001952:	b2dc      	uxtb	r4, r3
10001954:	687a      	ldr	r2, [r7, #4]
10001956:	1cbb      	adds	r3, r7, #2
10001958:	781b      	ldrb	r3, [r3, #0]
1000195a:	1c10      	adds	r0, r2, #0
1000195c:	2102      	movs	r1, #2
1000195e:	1c1a      	adds	r2, r3, #0
10001960:	1c23      	adds	r3, r4, #0
10001962:	f7ff fecf 	bl	10001704 <XMC_CAN_PanelControl>
}
10001966:	46bd      	mov	sp, r7
10001968:	b003      	add	sp, #12
1000196a:	bd90      	pop	{r4, r7, pc}

1000196c <XMC_CAN_Enable>:
#endif
}

/* Enable XMC_CAN Peripheral */
void XMC_CAN_Enable(XMC_CAN_t *const obj)
{
1000196c:	b580      	push	{r7, lr}
1000196e:	b082      	sub	sp, #8
10001970:	af00      	add	r7, sp, #0
10001972:	6078      	str	r0, [r7, #4]
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MCAN);
10001974:	2380      	movs	r3, #128	; 0x80
10001976:	039b      	lsls	r3, r3, #14
10001978:	1c18      	adds	r0, r3, #0
1000197a:	f7ff fd91 	bl	100014a0 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_MCAN);
#endif
  /* Enable CAN Module */
  obj->CLC &= ~(uint32_t)CAN_CLC_DISR_Msk;
1000197e:	687b      	ldr	r3, [r7, #4]
10001980:	681b      	ldr	r3, [r3, #0]
10001982:	2201      	movs	r2, #1
10001984:	4393      	bics	r3, r2
10001986:	1c1a      	adds	r2, r3, #0
10001988:	687b      	ldr	r3, [r7, #4]
1000198a:	601a      	str	r2, [r3, #0]
  while (obj->CLC & CAN_CLC_DISS_Msk)
1000198c:	46c0      	nop			; (mov r8, r8)
1000198e:	687b      	ldr	r3, [r7, #4]
10001990:	681b      	ldr	r3, [r3, #0]
10001992:	2202      	movs	r2, #2
10001994:	4013      	ands	r3, r2
10001996:	d1fa      	bne.n	1000198e <XMC_CAN_Enable+0x22>
  {
    /*Do nothing*/
  };
}
10001998:	46bd      	mov	sp, r7
1000199a:	b002      	add	sp, #8
1000199c:	bd80      	pop	{r7, pc}
1000199e:	46c0      	nop			; (mov r8, r8)

100019a0 <XMC_CAN_SetBaudrateClockSource>:
  obj->FDR |= ((uint32_t)can_divider_mode << CAN_FDR_DM_Pos) | ((uint32_t)step << CAN_FDR_STEP_Pos);
}
#endif

void XMC_CAN_SetBaudrateClockSource(XMC_CAN_t *const obj, const XMC_CAN_CANCLKSRC_t source)
{
100019a0:	b580      	push	{r7, lr}
100019a2:	b082      	sub	sp, #8
100019a4:	af00      	add	r7, sp, #0
100019a6:	6078      	str	r0, [r7, #4]
100019a8:	1c0a      	adds	r2, r1, #0
100019aa:	1cfb      	adds	r3, r7, #3
100019ac:	701a      	strb	r2, [r3, #0]
#if defined(MULTICAN_PLUS)
  obj->MCR = (obj->MCR & ~CAN_MCR_CLKSEL_Msk) | source ;
100019ae:	687a      	ldr	r2, [r7, #4]
100019b0:	23e4      	movs	r3, #228	; 0xe4
100019b2:	005b      	lsls	r3, r3, #1
100019b4:	58d3      	ldr	r3, [r2, r3]
100019b6:	220f      	movs	r2, #15
100019b8:	4393      	bics	r3, r2
100019ba:	1c1a      	adds	r2, r3, #0
100019bc:	1cfb      	adds	r3, r7, #3
100019be:	781b      	ldrb	r3, [r3, #0]
100019c0:	431a      	orrs	r2, r3
100019c2:	1c11      	adds	r1, r2, #0
100019c4:	687a      	ldr	r2, [r7, #4]
100019c6:	23e4      	movs	r3, #228	; 0xe4
100019c8:	005b      	lsls	r3, r3, #1
100019ca:	50d1      	str	r1, [r2, r3]
#else
  XMC_UNUSED_ARG(obj);
  XMC_UNUSED_ARG(source);
#endif
}
100019cc:	46bd      	mov	sp, r7
100019ce:	b002      	add	sp, #8
100019d0:	bd80      	pop	{r7, pc}
100019d2:	46c0      	nop			; (mov r8, r8)

100019d4 <XMC_CAN_GetBaudrateClockSource>:

XMC_CAN_CANCLKSRC_t XMC_CAN_GetBaudrateClockSource(XMC_CAN_t *const obj)
{
100019d4:	b580      	push	{r7, lr}
100019d6:	b082      	sub	sp, #8
100019d8:	af00      	add	r7, sp, #0
100019da:	6078      	str	r0, [r7, #4]
#if defined(MULTICAN_PLUS)
  return ((XMC_CAN_CANCLKSRC_t)((obj->MCR & CAN_MCR_CLKSEL_Msk) >> CAN_MCR_CLKSEL_Pos));
100019dc:	687a      	ldr	r2, [r7, #4]
100019de:	23e4      	movs	r3, #228	; 0xe4
100019e0:	005b      	lsls	r3, r3, #1
100019e2:	58d3      	ldr	r3, [r2, r3]
100019e4:	b2db      	uxtb	r3, r3
100019e6:	220f      	movs	r2, #15
100019e8:	4013      	ands	r3, r2
100019ea:	b2db      	uxtb	r3, r3
#elif (UC_FAMILY == XMC4)
  XMC_UNUSED_ARG(obj);
  return XMC_CAN_CANCLKSRC_FPERI;
#endif
}
100019ec:	1c18      	adds	r0, r3, #0
100019ee:	46bd      	mov	sp, r7
100019f0:	b002      	add	sp, #8
100019f2:	bd80      	pop	{r7, pc}

100019f4 <XMC_CAN_GetBaudrateClockFrequency>:

uint32_t XMC_CAN_GetBaudrateClockFrequency(XMC_CAN_t *const obj)
{
100019f4:	b580      	push	{r7, lr}
100019f6:	b084      	sub	sp, #16
100019f8:	af00      	add	r7, sp, #0
100019fa:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0;
100019fc:	2300      	movs	r3, #0
100019fe:	60fb      	str	r3, [r7, #12]

#if defined(MULTICAN_PLUS)
  switch (XMC_CAN_GetBaudrateClockSource(obj))
10001a00:	687b      	ldr	r3, [r7, #4]
10001a02:	1c18      	adds	r0, r3, #0
10001a04:	f7ff ffe6 	bl	100019d4 <XMC_CAN_GetBaudrateClockSource>
10001a08:	1e03      	subs	r3, r0, #0
10001a0a:	2b01      	cmp	r3, #1
10001a0c:	d002      	beq.n	10001a14 <XMC_CAN_GetBaudrateClockFrequency+0x20>
10001a0e:	2b02      	cmp	r3, #2
10001a10:	d005      	beq.n	10001a1e <XMC_CAN_GetBaudrateClockFrequency+0x2a>
10001a12:	e009      	b.n	10001a28 <XMC_CAN_GetBaudrateClockFrequency+0x34>
    case XMC_CAN_CANCLKSRC_FPERI:
      frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
      break;
#else
    case XMC_CAN_CANCLKSRC_MCLK:
      frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
10001a14:	f7ff fe14 	bl	10001640 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
10001a18:	1c03      	adds	r3, r0, #0
10001a1a:	60fb      	str	r3, [r7, #12]
      break;
10001a1c:	e004      	b.n	10001a28 <XMC_CAN_GetBaudrateClockFrequency+0x34>
#endif
    case XMC_CAN_CANCLKSRC_FOHP:
      frequency = OSCHP_GetFrequency();
10001a1e:	f7ff fbab 	bl	10001178 <OSCHP_GetFrequency>
10001a22:	1c03      	adds	r3, r0, #0
10001a24:	60fb      	str	r3, [r7, #12]
      break;
10001a26:	46c0      	nop			; (mov r8, r8)
#else
  XMC_UNUSED_ARG(obj);
  frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
#endif

  return frequency;
10001a28:	68fb      	ldr	r3, [r7, #12]
}
10001a2a:	1c18      	adds	r0, r3, #0
10001a2c:	46bd      	mov	sp, r7
10001a2e:	b004      	add	sp, #16
10001a30:	bd80      	pop	{r7, pc}
10001a32:	46c0      	nop			; (mov r8, r8)

10001a34 <XMC_CAN_InitEx>:

uint32_t XMC_CAN_InitEx(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency)
{
10001a34:	b580      	push	{r7, lr}
10001a36:	b088      	sub	sp, #32
10001a38:	af00      	add	r7, sp, #0
10001a3a:	60f8      	str	r0, [r7, #12]
10001a3c:	607a      	str	r2, [r7, #4]
10001a3e:	230b      	movs	r3, #11
10001a40:	18fb      	adds	r3, r7, r3
10001a42:	1c0a      	adds	r2, r1, #0
10001a44:	701a      	strb	r2, [r3, #0]
  uint32_t step_n;
  uint32_t freq_n;
  uint32_t peripheral_frequency;

  /*Enabling the module*/
  XMC_CAN_Enable(obj);
10001a46:	68fb      	ldr	r3, [r7, #12]
10001a48:	1c18      	adds	r0, r3, #0
10001a4a:	f7ff ff8f 	bl	1000196c <XMC_CAN_Enable>

  XMC_CAN_SetBaudrateClockSource(obj, clksrc);
10001a4e:	68fa      	ldr	r2, [r7, #12]
10001a50:	230b      	movs	r3, #11
10001a52:	18fb      	adds	r3, r7, r3
10001a54:	781b      	ldrb	r3, [r3, #0]
10001a56:	1c10      	adds	r0, r2, #0
10001a58:	1c19      	adds	r1, r3, #0
10001a5a:	f7ff ffa1 	bl	100019a0 <XMC_CAN_SetBaudrateClockSource>
  peripheral_frequency = XMC_CAN_GetBaudrateClockFrequency(obj);
10001a5e:	68fb      	ldr	r3, [r7, #12]
10001a60:	1c18      	adds	r0, r3, #0
10001a62:	f7ff ffc7 	bl	100019f4 <XMC_CAN_GetBaudrateClockFrequency>
10001a66:	1c03      	adds	r3, r0, #0
10001a68:	61fb      	str	r3, [r7, #28]
  XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);

  /* Normal divider mode */
  step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
10001a6a:	69f8      	ldr	r0, [r7, #28]
10001a6c:	6879      	ldr	r1, [r7, #4]
10001a6e:	f000 fa6d 	bl	10001f4c <__aeabi_uidiv>
10001a72:	1c03      	adds	r3, r0, #0
10001a74:	1c1a      	adds	r2, r3, #0
10001a76:	2380      	movs	r3, #128	; 0x80
10001a78:	00db      	lsls	r3, r3, #3
10001a7a:	1a9b      	subs	r3, r3, r2
10001a7c:	2000      	movs	r0, #0
10001a7e:	1c19      	adds	r1, r3, #0
10001a80:	f7ff fe82 	bl	10001788 <max>
10001a84:	1c02      	adds	r2, r0, #0
10001a86:	4b12      	ldr	r3, [pc, #72]	; (10001ad0 <XMC_CAN_InitEx+0x9c>)
10001a88:	1c10      	adds	r0, r2, #0
10001a8a:	1c19      	adds	r1, r3, #0
10001a8c:	f7ff fe8a 	bl	100017a4 <min>
10001a90:	1c03      	adds	r3, r0, #0
10001a92:	61bb      	str	r3, [r7, #24]
  freq_n = (uint32_t)(peripheral_frequency / (1024U - step_n));
10001a94:	69bb      	ldr	r3, [r7, #24]
10001a96:	2280      	movs	r2, #128	; 0x80
10001a98:	00d2      	lsls	r2, r2, #3
10001a9a:	1ad3      	subs	r3, r2, r3
10001a9c:	69f8      	ldr	r0, [r7, #28]
10001a9e:	1c19      	adds	r1, r3, #0
10001aa0:	f000 fa54 	bl	10001f4c <__aeabi_uidiv>
10001aa4:	1c03      	adds	r3, r0, #0
10001aa6:	617b      	str	r3, [r7, #20]

  obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
10001aa8:	68fb      	ldr	r3, [r7, #12]
10001aaa:	68db      	ldr	r3, [r3, #12]
10001aac:	4a09      	ldr	r2, [pc, #36]	; (10001ad4 <XMC_CAN_InitEx+0xa0>)
10001aae:	401a      	ands	r2, r3
10001ab0:	68fb      	ldr	r3, [r7, #12]
10001ab2:	60da      	str	r2, [r3, #12]
  obj->FDR |= ((uint32_t)XMC_CAN_DM_NORMAL << CAN_FDR_DM_Pos) | ((uint32_t)step_n << CAN_FDR_STEP_Pos);
10001ab4:	68fb      	ldr	r3, [r7, #12]
10001ab6:	68da      	ldr	r2, [r3, #12]
10001ab8:	69bb      	ldr	r3, [r7, #24]
10001aba:	4313      	orrs	r3, r2
10001abc:	2280      	movs	r2, #128	; 0x80
10001abe:	01d2      	lsls	r2, r2, #7
10001ac0:	431a      	orrs	r2, r3
10001ac2:	68fb      	ldr	r3, [r7, #12]
10001ac4:	60da      	str	r2, [r3, #12]

  return freq_n;
10001ac6:	697b      	ldr	r3, [r7, #20]
}
10001ac8:	1c18      	adds	r0, r3, #0
10001aca:	46bd      	mov	sp, r7
10001acc:	b008      	add	sp, #32
10001ace:	bd80      	pop	{r7, pc}
10001ad0:	000003ff 	.word	0x000003ff
10001ad4:	ffff3c00 	.word	0xffff3c00

10001ad8 <XMC_CAN_MO_Config>:
  can_mo->can_id_mask = can_id_mask;
}

/* Initialization of XMC_CAN MO Object */
void XMC_CAN_MO_Config(const XMC_CAN_MO_t *const can_mo)
{
10001ad8:	b580      	push	{r7, lr}
10001ada:	b086      	sub	sp, #24
10001adc:	af00      	add	r7, sp, #0
10001ade:	6078      	str	r0, [r7, #4]
  uint32_t reg;

  /* Configure MPN */
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U) / 0x0020U;
10001ae0:	687b      	ldr	r3, [r7, #4]
10001ae2:	681b      	ldr	r3, [r3, #0]
10001ae4:	4a48      	ldr	r2, [pc, #288]	; (10001c08 <XMC_CAN_MO_Config+0x130>)
10001ae6:	4694      	mov	ip, r2
10001ae8:	4463      	add	r3, ip
10001aea:	095b      	lsrs	r3, r3, #5
10001aec:	617b      	str	r3, [r7, #20]
  uint32_t set = (((uint32_t)(num / 32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num % 32) << CAN_MO_MOIPR_MPN_Pos));
10001aee:	697b      	ldr	r3, [r7, #20]
10001af0:	095b      	lsrs	r3, r3, #5
10001af2:	035a      	lsls	r2, r3, #13
10001af4:	697b      	ldr	r3, [r7, #20]
10001af6:	211f      	movs	r1, #31
10001af8:	400b      	ands	r3, r1
10001afa:	021b      	lsls	r3, r3, #8
10001afc:	4313      	orrs	r3, r2
10001afe:	613b      	str	r3, [r7, #16]
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
10001b00:	687b      	ldr	r3, [r7, #4]
10001b02:	681b      	ldr	r3, [r3, #0]
10001b04:	687a      	ldr	r2, [r7, #4]
10001b06:	6812      	ldr	r2, [r2, #0]
10001b08:	6892      	ldr	r2, [r2, #8]
10001b0a:	4940      	ldr	r1, [pc, #256]	; (10001c0c <XMC_CAN_MO_Config+0x134>)
10001b0c:	400a      	ands	r2, r1
10001b0e:	609a      	str	r2, [r3, #8]
  can_mo->can_mo_ptr->MOIPR |= set;
10001b10:	687b      	ldr	r3, [r7, #4]
10001b12:	681b      	ldr	r3, [r3, #0]
10001b14:	687a      	ldr	r2, [r7, #4]
10001b16:	6812      	ldr	r2, [r2, #0]
10001b18:	6891      	ldr	r1, [r2, #8]
10001b1a:	693a      	ldr	r2, [r7, #16]
10001b1c:	430a      	orrs	r2, r1
10001b1e:	609a      	str	r2, [r3, #8]

  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
10001b20:	687b      	ldr	r3, [r7, #4]
10001b22:	79db      	ldrb	r3, [r3, #7]
10001b24:	2220      	movs	r2, #32
10001b26:	4013      	ands	r3, r2
10001b28:	b2db      	uxtb	r3, r3
10001b2a:	2b00      	cmp	r3, #0
10001b2c:	d007      	beq.n	10001b3e <XMC_CAN_MO_Config+0x66>
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
10001b2e:	687b      	ldr	r3, [r7, #4]
10001b30:	79db      	ldrb	r3, [r3, #7]
10001b32:	2220      	movs	r2, #32
10001b34:	4013      	ands	r3, r2
10001b36:	b2db      	uxtb	r3, r3
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U) / 0x0020U;
  uint32_t set = (((uint32_t)(num / 32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num % 32) << CAN_MO_MOIPR_MPN_Pos));
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;

  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
10001b38:	2b00      	cmp	r3, #0
10001b3a:	d100      	bne.n	10001b3e <XMC_CAN_MO_Config+0x66>
10001b3c:	e061      	b.n	10001c02 <XMC_CAN_MO_Config+0x12a>
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
10001b3e:	687b      	ldr	r3, [r7, #4]
10001b40:	7e1b      	ldrb	r3, [r3, #24]
  uint32_t set = (((uint32_t)(num / 32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num % 32) << CAN_MO_MOIPR_MPN_Pos));
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;

  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
10001b42:	2b00      	cmp	r3, #0
10001b44:	d004      	beq.n	10001b50 <XMC_CAN_MO_Config+0x78>
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
       (can_mo->can_mo_type != XMC_CAN_MO_TYPE_TRANSMSGOBJ)))
10001b46:	687b      	ldr	r3, [r7, #4]
10001b48:	7e1b      	ldrb	r3, [r3, #24]
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;

  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
10001b4a:	2b01      	cmp	r3, #1
10001b4c:	d000      	beq.n	10001b50 <XMC_CAN_MO_Config+0x78>
10001b4e:	e058      	b.n	10001c02 <XMC_CAN_MO_Config+0x12a>
  }
  else
  {

    /* Disable Message object */
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
10001b50:	687b      	ldr	r3, [r7, #4]
10001b52:	681b      	ldr	r3, [r3, #0]
10001b54:	2220      	movs	r2, #32
10001b56:	61da      	str	r2, [r3, #28]
    if (can_mo->can_id_mode == (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS)
10001b58:	687b      	ldr	r3, [r7, #4]
10001b5a:	79db      	ldrb	r3, [r3, #7]
10001b5c:	2220      	movs	r2, #32
10001b5e:	4013      	ands	r3, r2
10001b60:	b2db      	uxtb	r3, r3
10001b62:	2b00      	cmp	r3, #0
10001b64:	d128      	bne.n	10001bb8 <XMC_CAN_MO_Config+0xe0>
    {
      reg = can_mo->mo_ar;
10001b66:	687b      	ldr	r3, [r7, #4]
10001b68:	685b      	ldr	r3, [r3, #4]
10001b6a:	60fb      	str	r3, [r7, #12]
      reg &= (uint32_t) ~(CAN_MO_MOAR_ID_Msk);
10001b6c:	68fb      	ldr	r3, [r7, #12]
10001b6e:	0f5b      	lsrs	r3, r3, #29
10001b70:	075b      	lsls	r3, r3, #29
10001b72:	60fb      	str	r3, [r7, #12]
      reg |= (can_mo->can_identifier << XMC_CAN_MO_MOAR_STDID_Pos);
10001b74:	687b      	ldr	r3, [r7, #4]
10001b76:	685b      	ldr	r3, [r3, #4]
10001b78:	00db      	lsls	r3, r3, #3
10001b7a:	08db      	lsrs	r3, r3, #3
10001b7c:	049b      	lsls	r3, r3, #18
10001b7e:	1c1a      	adds	r2, r3, #0
10001b80:	68fb      	ldr	r3, [r7, #12]
10001b82:	4313      	orrs	r3, r2
10001b84:	60fb      	str	r3, [r7, #12]
      can_mo->can_mo_ptr->MOAR = reg;
10001b86:	687b      	ldr	r3, [r7, #4]
10001b88:	681b      	ldr	r3, [r3, #0]
10001b8a:	68fa      	ldr	r2, [r7, #12]
10001b8c:	619a      	str	r2, [r3, #24]

      reg = can_mo->mo_amr;
10001b8e:	687b      	ldr	r3, [r7, #4]
10001b90:	689b      	ldr	r3, [r3, #8]
10001b92:	60fb      	str	r3, [r7, #12]
      reg &= (uint32_t) ~(CAN_MO_MOAMR_AM_Msk);
10001b94:	68fb      	ldr	r3, [r7, #12]
10001b96:	0f5b      	lsrs	r3, r3, #29
10001b98:	075b      	lsls	r3, r3, #29
10001b9a:	60fb      	str	r3, [r7, #12]
      reg |= (can_mo->can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
10001b9c:	687b      	ldr	r3, [r7, #4]
10001b9e:	689b      	ldr	r3, [r3, #8]
10001ba0:	00db      	lsls	r3, r3, #3
10001ba2:	08db      	lsrs	r3, r3, #3
10001ba4:	049b      	lsls	r3, r3, #18
10001ba6:	1c1a      	adds	r2, r3, #0
10001ba8:	68fb      	ldr	r3, [r7, #12]
10001baa:	4313      	orrs	r3, r2
10001bac:	60fb      	str	r3, [r7, #12]
      can_mo->can_mo_ptr->MOAMR = reg;
10001bae:	687b      	ldr	r3, [r7, #4]
10001bb0:	681b      	ldr	r3, [r3, #0]
10001bb2:	68fa      	ldr	r2, [r7, #12]
10001bb4:	60da      	str	r2, [r3, #12]
10001bb6:	e009      	b.n	10001bcc <XMC_CAN_MO_Config+0xf4>
    }
    else
    {
      can_mo->can_mo_ptr->MOAR = can_mo->mo_ar;
10001bb8:	687b      	ldr	r3, [r7, #4]
10001bba:	681b      	ldr	r3, [r3, #0]
10001bbc:	687a      	ldr	r2, [r7, #4]
10001bbe:	6852      	ldr	r2, [r2, #4]
10001bc0:	619a      	str	r2, [r3, #24]
      can_mo->can_mo_ptr->MOAMR = can_mo->mo_amr;
10001bc2:	687b      	ldr	r3, [r7, #4]
10001bc4:	681b      	ldr	r3, [r3, #0]
10001bc6:	687a      	ldr	r2, [r7, #4]
10001bc8:	6892      	ldr	r2, [r2, #8]
10001bca:	60da      	str	r2, [r3, #12]
    }
    /* Check whether message object is transmit message object */
    if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
10001bcc:	687b      	ldr	r3, [r7, #4]
10001bce:	7e1b      	ldrb	r3, [r3, #24]
10001bd0:	2b01      	cmp	r3, #1
10001bd2:	d10d      	bne.n	10001bf0 <XMC_CAN_MO_Config+0x118>
    {
      /* Set MO as Transmit message object  */
      XMC_CAN_MO_UpdateData(can_mo);
10001bd4:	687b      	ldr	r3, [r7, #4]
10001bd6:	1c18      	adds	r0, r3, #0
10001bd8:	f000 f81e 	bl	10001c18 <XMC_CAN_MO_UpdateData>
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_SETDIR_Msk;
10001bdc:	687b      	ldr	r3, [r7, #4]
10001bde:	681b      	ldr	r3, [r3, #0]
10001be0:	2280      	movs	r2, #128	; 0x80
10001be2:	0512      	lsls	r2, r2, #20
10001be4:	61da      	str	r2, [r3, #28]

      /* Reset RTSEL and Set MSGVAL, TXEN0 and TXEN1 bits */
      can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk |
10001be6:	687b      	ldr	r3, [r7, #4]
10001be8:	681b      	ldr	r3, [r3, #0]
10001bea:	4a09      	ldr	r2, [pc, #36]	; (10001c10 <XMC_CAN_MO_Config+0x138>)
10001bec:	61da      	str	r2, [r3, #28]
10001bee:	e008      	b.n	10001c02 <XMC_CAN_MO_Config+0x12a>
                                   CAN_MO_MOCTR_RESRXEN_Msk  | CAN_MO_MOCTR_RESRTSEL_Msk);
    }
    else
    {
      /* Set MO as Receive message object and set RXEN bit */
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESDIR_Msk;
10001bf0:	687b      	ldr	r3, [r7, #4]
10001bf2:	681b      	ldr	r3, [r3, #0]
10001bf4:	2280      	movs	r2, #128	; 0x80
10001bf6:	0112      	lsls	r2, r2, #4
10001bf8:	61da      	str	r2, [r3, #28]

      /* Reset RTSEL, TXEN1 and TXEN2 and Set MSGVAL and RXEN bits */
      can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_RESTXEN0_Msk | CAN_MO_MOCTR_RESTXEN1_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk |
10001bfa:	687b      	ldr	r3, [r7, #4]
10001bfc:	681b      	ldr	r3, [r3, #0]
10001bfe:	4a05      	ldr	r2, [pc, #20]	; (10001c14 <XMC_CAN_MO_Config+0x13c>)
10001c00:	61da      	str	r2, [r3, #28]
                                   CAN_MO_MOCTR_SETRXEN_Msk | CAN_MO_MOCTR_RESRTSEL_Msk);
    }

  }
}
10001c02:	46bd      	mov	sp, r7
10001c04:	b006      	add	sp, #24
10001c06:	bd80      	pop	{r7, pc}
10001c08:	affbf000 	.word	0xaffbf000
10001c0c:	ffff00ff 	.word	0xffff00ff
10001c10:	062000c0 	.word	0x062000c0
10001c14:	00a00640 	.word	0x00a00640

10001c18 <XMC_CAN_MO_UpdateData>:

/* Update of XMC_CAN Object */
XMC_CAN_STATUS_t XMC_CAN_MO_UpdateData(const XMC_CAN_MO_t *const can_mo)
{
10001c18:	b580      	push	{r7, lr}
10001c1a:	b084      	sub	sp, #16
10001c1c:	af00      	add	r7, sp, #0
10001c1e:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
10001c20:	230f      	movs	r3, #15
10001c22:	18fb      	adds	r3, r7, r3
10001c24:	2203      	movs	r2, #3
10001c26:	701a      	strb	r2, [r3, #0]
  /* Check whether message object is transmit message object */
  if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
10001c28:	687b      	ldr	r3, [r7, #4]
10001c2a:	7e1b      	ldrb	r3, [r3, #24]
10001c2c:	2b01      	cmp	r3, #1
10001c2e:	d125      	bne.n	10001c7c <XMC_CAN_MO_UpdateData+0x64>
  {
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
10001c30:	687b      	ldr	r3, [r7, #4]
10001c32:	681b      	ldr	r3, [r3, #0]
10001c34:	2220      	movs	r2, #32
10001c36:	61da      	str	r2, [r3, #28]
    /* Configure data length */
    can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
10001c38:	687b      	ldr	r3, [r7, #4]
10001c3a:	681b      	ldr	r3, [r3, #0]
10001c3c:	687a      	ldr	r2, [r7, #4]
10001c3e:	6812      	ldr	r2, [r2, #0]
10001c40:	6812      	ldr	r2, [r2, #0]
10001c42:	4914      	ldr	r1, [pc, #80]	; (10001c94 <XMC_CAN_MO_UpdateData+0x7c>)
10001c44:	4011      	ands	r1, r2
                                (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (uint32_t)CAN_MO_MOFCR_DLC_Msk);
10001c46:	687a      	ldr	r2, [r7, #4]
10001c48:	7b12      	ldrb	r2, [r2, #12]
10001c4a:	0610      	lsls	r0, r2, #24
10001c4c:	22f0      	movs	r2, #240	; 0xf0
10001c4e:	0512      	lsls	r2, r2, #20
10001c50:	4002      	ands	r2, r0
  /* Check whether message object is transmit message object */
  if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
  {
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
    /* Configure data length */
    can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
10001c52:	430a      	orrs	r2, r1
10001c54:	601a      	str	r2, [r3, #0]
                                (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (uint32_t)CAN_MO_MOFCR_DLC_Msk);
    /* Configure Data registers*/
    can_mo->can_mo_ptr->MODATAL = can_mo->can_data[0];
10001c56:	687b      	ldr	r3, [r7, #4]
10001c58:	681b      	ldr	r3, [r3, #0]
10001c5a:	687a      	ldr	r2, [r7, #4]
10001c5c:	6912      	ldr	r2, [r2, #16]
10001c5e:	611a      	str	r2, [r3, #16]
    can_mo->can_mo_ptr->MODATAH = can_mo->can_data[1];
10001c60:	687b      	ldr	r3, [r7, #4]
10001c62:	681b      	ldr	r3, [r3, #0]
10001c64:	687a      	ldr	r2, [r7, #4]
10001c66:	6952      	ldr	r2, [r2, #20]
10001c68:	615a      	str	r2, [r3, #20]
    /* Reset RTSEL and Set MSGVAL ,TXEN0 and TXEN1 bits */
    can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETNEWDAT_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk | CAN_MO_MOCTR_RESRTSEL_Msk);
10001c6a:	687b      	ldr	r3, [r7, #4]
10001c6c:	681b      	ldr	r3, [r3, #0]
10001c6e:	4a0a      	ldr	r2, [pc, #40]	; (10001c98 <XMC_CAN_MO_UpdateData+0x80>)
10001c70:	61da      	str	r2, [r3, #28]
    error = XMC_CAN_STATUS_SUCCESS;
10001c72:	230f      	movs	r3, #15
10001c74:	18fb      	adds	r3, r7, r3
10001c76:	2200      	movs	r2, #0
10001c78:	701a      	strb	r2, [r3, #0]
10001c7a:	e003      	b.n	10001c84 <XMC_CAN_MO_UpdateData+0x6c>
  }
  else
  {
    error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
10001c7c:	230f      	movs	r3, #15
10001c7e:	18fb      	adds	r3, r7, r3
10001c80:	2203      	movs	r2, #3
10001c82:	701a      	strb	r2, [r3, #0]
  }
  return error;
10001c84:	230f      	movs	r3, #15
10001c86:	18fb      	adds	r3, r7, r3
10001c88:	781b      	ldrb	r3, [r3, #0]
}
10001c8a:	1c18      	adds	r0, r3, #0
10001c8c:	46bd      	mov	sp, r7
10001c8e:	b004      	add	sp, #16
10001c90:	bd80      	pop	{r7, pc}
10001c92:	46c0      	nop			; (mov r8, r8)
10001c94:	f0ffffff 	.word	0xf0ffffff
10001c98:	00280040 	.word	0x00280040

10001c9c <XMC_CAN_MO_Transmit>:

/* This function is will put a transmit request to transmit message object */
XMC_CAN_STATUS_t XMC_CAN_MO_Transmit(const XMC_CAN_MO_t *const can_mo)
{
10001c9c:	b580      	push	{r7, lr}
10001c9e:	b086      	sub	sp, #24
10001ca0:	af00      	add	r7, sp, #0
10001ca2:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
10001ca4:	2317      	movs	r3, #23
10001ca6:	18fb      	adds	r3, r7, r3
10001ca8:	2201      	movs	r2, #1
10001caa:	701a      	strb	r2, [r3, #0]
  uint32_t mo_type = (uint32_t)(((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_MSGVAL_Msk) >> CAN_MO_MOSTAT_MSGVAL_Pos);
10001cac:	687b      	ldr	r3, [r7, #4]
10001cae:	681b      	ldr	r3, [r3, #0]
10001cb0:	69db      	ldr	r3, [r3, #28]
10001cb2:	2220      	movs	r2, #32
10001cb4:	4013      	ands	r3, r2
10001cb6:	095b      	lsrs	r3, r3, #5
10001cb8:	613b      	str	r3, [r7, #16]
  uint32_t mo_transmission_ongoing = (uint32_t) ((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_TXRQ_Msk) >> CAN_MO_MOSTAT_TXRQ_Pos;
10001cba:	687b      	ldr	r3, [r7, #4]
10001cbc:	681b      	ldr	r3, [r3, #0]
10001cbe:	69da      	ldr	r2, [r3, #28]
10001cc0:	2380      	movs	r3, #128	; 0x80
10001cc2:	005b      	lsls	r3, r3, #1
10001cc4:	4013      	ands	r3, r2
10001cc6:	0a1b      	lsrs	r3, r3, #8
10001cc8:	60fb      	str	r3, [r7, #12]
  /* check if message is disabled */
  if (mo_type == 0U)
10001cca:	693b      	ldr	r3, [r7, #16]
10001ccc:	2b00      	cmp	r3, #0
10001cce:	d104      	bne.n	10001cda <XMC_CAN_MO_Transmit+0x3e>
  {
    error = XMC_CAN_STATUS_MO_DISABLED;
10001cd0:	2317      	movs	r3, #23
10001cd2:	18fb      	adds	r3, r7, r3
10001cd4:	2204      	movs	r2, #4
10001cd6:	701a      	strb	r2, [r3, #0]
10001cd8:	e010      	b.n	10001cfc <XMC_CAN_MO_Transmit+0x60>
  }
  /* check if transmission is ongoing on message object */
  else if (mo_transmission_ongoing == 1U)
10001cda:	68fb      	ldr	r3, [r7, #12]
10001cdc:	2b01      	cmp	r3, #1
10001cde:	d104      	bne.n	10001cea <XMC_CAN_MO_Transmit+0x4e>
  {
    error = XMC_CAN_STATUS_BUSY;
10001ce0:	2317      	movs	r3, #23
10001ce2:	18fb      	adds	r3, r7, r3
10001ce4:	2202      	movs	r2, #2
10001ce6:	701a      	strb	r2, [r3, #0]
10001ce8:	e008      	b.n	10001cfc <XMC_CAN_MO_Transmit+0x60>
  }
  else
  {
    /* set TXRQ bit */
    can_mo->can_mo_ptr-> MOCTR = CAN_MO_MOCTR_SETTXRQ_Msk | CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk;
10001cea:	687b      	ldr	r3, [r7, #4]
10001cec:	681b      	ldr	r3, [r3, #0]
10001cee:	22e0      	movs	r2, #224	; 0xe0
10001cf0:	04d2      	lsls	r2, r2, #19
10001cf2:	61da      	str	r2, [r3, #28]
    error = XMC_CAN_STATUS_SUCCESS;
10001cf4:	2317      	movs	r3, #23
10001cf6:	18fb      	adds	r3, r7, r3
10001cf8:	2200      	movs	r2, #0
10001cfa:	701a      	strb	r2, [r3, #0]
  }
  return error;
10001cfc:	2317      	movs	r3, #23
10001cfe:	18fb      	adds	r3, r7, r3
10001d00:	781b      	ldrb	r3, [r3, #0]
}
10001d02:	1c18      	adds	r0, r3, #0
10001d04:	46bd      	mov	sp, r7
10001d06:	b006      	add	sp, #24
10001d08:	bd80      	pop	{r7, pc}
10001d0a:	46c0      	nop			; (mov r8, r8)

10001d0c <XMC_CAN_NODE_EnableEvent>:
  return error;
}

/* Function to enable node event */
void XMC_CAN_NODE_EnableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event)
{
10001d0c:	b580      	push	{r7, lr}
10001d0e:	b082      	sub	sp, #8
10001d10:	af00      	add	r7, sp, #0
10001d12:	6078      	str	r0, [r7, #4]
10001d14:	6039      	str	r1, [r7, #0]
  if (event != XMC_CAN_NODE_EVENT_CFCIE)
10001d16:	683a      	ldr	r2, [r7, #0]
10001d18:	2380      	movs	r3, #128	; 0x80
10001d1a:	03db      	lsls	r3, r3, #15
10001d1c:	429a      	cmp	r2, r3
10001d1e:	d006      	beq.n	10001d2e <XMC_CAN_NODE_EnableEvent+0x22>
  {
    can_node->NCR |= (uint32_t)event;
10001d20:	687b      	ldr	r3, [r7, #4]
10001d22:	681a      	ldr	r2, [r3, #0]
10001d24:	683b      	ldr	r3, [r7, #0]
10001d26:	431a      	orrs	r2, r3
10001d28:	687b      	ldr	r3, [r7, #4]
10001d2a:	601a      	str	r2, [r3, #0]
10001d2c:	e005      	b.n	10001d3a <XMC_CAN_NODE_EnableEvent+0x2e>
  }
  else
  {
    can_node->NFCR |= (uint32_t)event;
10001d2e:	687b      	ldr	r3, [r7, #4]
10001d30:	699a      	ldr	r2, [r3, #24]
10001d32:	683b      	ldr	r3, [r7, #0]
10001d34:	431a      	orrs	r2, r3
10001d36:	687b      	ldr	r3, [r7, #4]
10001d38:	619a      	str	r2, [r3, #24]
  }
}
10001d3a:	46bd      	mov	sp, r7
10001d3c:	b002      	add	sp, #8
10001d3e:	bd80      	pop	{r7, pc}

10001d40 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
10001d40:	b580      	push	{r7, lr}
10001d42:	b082      	sub	sp, #8
10001d44:	af00      	add	r7, sp, #0
10001d46:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
10001d48:	687b      	ldr	r3, [r7, #4]
10001d4a:	2280      	movs	r2, #128	; 0x80
10001d4c:	0052      	lsls	r2, r2, #1
10001d4e:	60da      	str	r2, [r3, #12]
}
10001d50:	46bd      	mov	sp, r7
10001d52:	b002      	add	sp, #8
10001d54:	bd80      	pop	{r7, pc}
10001d56:	46c0      	nop			; (mov r8, r8)

10001d58 <XMC_CCU4_lUngateClock>:
    XMC_ASSERT("XMC_CCU4_lGateClock:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
10001d58:	b580      	push	{r7, lr}
10001d5a:	b082      	sub	sp, #8
10001d5c:	af00      	add	r7, sp, #0
10001d5e:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
10001d60:	687b      	ldr	r3, [r7, #4]
10001d62:	4a09      	ldr	r2, [pc, #36]	; (10001d88 <XMC_CCU4_lUngateClock+0x30>)
10001d64:	4293      	cmp	r3, r2
10001d66:	d103      	bne.n	10001d70 <XMC_CCU4_lUngateClock+0x18>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
10001d68:	2004      	movs	r0, #4
10001d6a:	f7ff fb99 	bl	100014a0 <XMC_SCU_CLOCK_UngatePeripheralClock>
10001d6e:	e008      	b.n	10001d82 <XMC_CCU4_lUngateClock+0x2a>
  }
#if defined(CCU41)
  else if (module == CCU41)
10001d70:	687b      	ldr	r3, [r7, #4]
10001d72:	4a06      	ldr	r2, [pc, #24]	; (10001d8c <XMC_CCU4_lUngateClock+0x34>)
10001d74:	4293      	cmp	r3, r2
10001d76:	d104      	bne.n	10001d82 <XMC_CCU4_lUngateClock+0x2a>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
10001d78:	2380      	movs	r3, #128	; 0x80
10001d7a:	029b      	lsls	r3, r3, #10
10001d7c:	1c18      	adds	r0, r3, #0
10001d7e:	f7ff fb8f 	bl	100014a0 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
  }
}
10001d82:	46bd      	mov	sp, r7
10001d84:	b002      	add	sp, #8
10001d86:	bd80      	pop	{r7, pc}
10001d88:	48040000 	.word	0x48040000
10001d8c:	48044000 	.word	0x48044000

10001d90 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
10001d90:	b580      	push	{r7, lr}
10001d92:	b082      	sub	sp, #8
10001d94:	af00      	add	r7, sp, #0
10001d96:	6078      	str	r0, [r7, #4]
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
#endif

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
10001d98:	687b      	ldr	r3, [r7, #4]
10001d9a:	1c18      	adds	r0, r3, #0
10001d9c:	f7ff ffdc 	bl	10001d58 <XMC_CCU4_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
#endif
}
10001da0:	46bd      	mov	sp, r7
10001da2:	b002      	add	sp, #8
10001da4:	bd80      	pop	{r7, pc}
10001da6:	46c0      	nop			; (mov r8, r8)

10001da8 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
10001da8:	b580      	push	{r7, lr}
10001daa:	b084      	sub	sp, #16
10001dac:	af00      	add	r7, sp, #0
10001dae:	6078      	str	r0, [r7, #4]
10001db0:	1c0a      	adds	r2, r1, #0
10001db2:	1cfb      	adds	r3, r7, #3
10001db4:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
10001db6:	687b      	ldr	r3, [r7, #4]
10001db8:	1c18      	adds	r0, r3, #0
10001dba:	f7ff ffe9 	bl	10001d90 <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
10001dbe:	687b      	ldr	r3, [r7, #4]
10001dc0:	1c18      	adds	r0, r3, #0
10001dc2:	f7ff ffbd 	bl	10001d40 <XMC_CCU4_StartPrescaler>

  gctrl = module->GCTRL;
10001dc6:	687b      	ldr	r3, [r7, #4]
10001dc8:	681b      	ldr	r3, [r3, #0]
10001dca:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
10001dcc:	68fb      	ldr	r3, [r7, #12]
10001dce:	4a07      	ldr	r2, [pc, #28]	; (10001dec <XMC_CCU4_Init+0x44>)
10001dd0:	4013      	ands	r3, r2
10001dd2:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
10001dd4:	1cfb      	adds	r3, r7, #3
10001dd6:	781b      	ldrb	r3, [r3, #0]
10001dd8:	039b      	lsls	r3, r3, #14
10001dda:	68fa      	ldr	r2, [r7, #12]
10001ddc:	4313      	orrs	r3, r2
10001dde:	60fb      	str	r3, [r7, #12]

  module->GCTRL = gctrl;
10001de0:	687b      	ldr	r3, [r7, #4]
10001de2:	68fa      	ldr	r2, [r7, #12]
10001de4:	601a      	str	r2, [r3, #0]
}
10001de6:	46bd      	mov	sp, r7
10001de8:	b004      	add	sp, #16
10001dea:	bd80      	pop	{r7, pc}
10001dec:	ffff3fff 	.word	0xffff3fff

10001df0 <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
10001df0:	b580      	push	{r7, lr}
10001df2:	b082      	sub	sp, #8
10001df4:	af00      	add	r7, sp, #0
10001df6:	6078      	str	r0, [r7, #4]
10001df8:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
10001dfa:	683b      	ldr	r3, [r7, #0]
10001dfc:	681a      	ldr	r2, [r3, #0]
10001dfe:	687b      	ldr	r3, [r7, #4]
10001e00:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
10001e02:	683b      	ldr	r3, [r7, #0]
10001e04:	795b      	ldrb	r3, [r3, #5]
10001e06:	069b      	lsls	r3, r3, #26
10001e08:	0fdb      	lsrs	r3, r3, #31
10001e0a:	b2db      	uxtb	r3, r3
10001e0c:	051a      	lsls	r2, r3, #20
10001e0e:	687b      	ldr	r3, [r7, #4]
10001e10:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
10001e12:	683b      	ldr	r3, [r7, #0]
10001e14:	791b      	ldrb	r3, [r3, #4]
10001e16:	071b      	lsls	r3, r3, #28
10001e18:	0f1b      	lsrs	r3, r3, #28
10001e1a:	b2db      	uxtb	r3, r3
10001e1c:	1c1a      	adds	r2, r3, #0
10001e1e:	687b      	ldr	r3, [r7, #4]
10001e20:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
10001e22:	683b      	ldr	r3, [r7, #0]
10001e24:	795b      	ldrb	r3, [r3, #5]
10001e26:	071b      	lsls	r3, r3, #28
10001e28:	0f1b      	lsrs	r3, r3, #28
10001e2a:	b2db      	uxtb	r3, r3
10001e2c:	1c1a      	adds	r2, r3, #0
10001e2e:	687b      	ldr	r3, [r7, #4]
10001e30:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
10001e32:	683b      	ldr	r3, [r7, #0]
10001e34:	795b      	ldrb	r3, [r3, #5]
10001e36:	06db      	lsls	r3, r3, #27
10001e38:	0fdb      	lsrs	r3, r3, #31
10001e3a:	b2db      	uxtb	r3, r3
10001e3c:	1c1a      	adds	r2, r3, #0
10001e3e:	687b      	ldr	r3, [r7, #4]
10001e40:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
10001e42:	683b      	ldr	r3, [r7, #0]
10001e44:	791b      	ldrb	r3, [r3, #4]
10001e46:	061b      	lsls	r3, r3, #24
10001e48:	0f1b      	lsrs	r3, r3, #28
10001e4a:	b2db      	uxtb	r3, r3
10001e4c:	1c1a      	adds	r2, r3, #0
10001e4e:	687b      	ldr	r3, [r7, #4]
10001e50:	62da      	str	r2, [r3, #44]	; 0x2c
}
10001e52:	46bd      	mov	sp, r7
10001e54:	b002      	add	sp, #8
10001e56:	bd80      	pop	{r7, pc}

10001e58 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
10001e58:	b580      	push	{r7, lr}
10001e5a:	b086      	sub	sp, #24
10001e5c:	af00      	add	r7, sp, #0
10001e5e:	6078      	str	r0, [r7, #4]
10001e60:	1c08      	adds	r0, r1, #0
10001e62:	1c11      	adds	r1, r2, #0
10001e64:	1cfb      	adds	r3, r7, #3
10001e66:	1c02      	adds	r2, r0, #0
10001e68:	701a      	strb	r2, [r3, #0]
10001e6a:	1cbb      	adds	r3, r7, #2
10001e6c:	1c0a      	adds	r2, r1, #0
10001e6e:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));

  switch (event)
10001e70:	1cfb      	adds	r3, r7, #3
10001e72:	781b      	ldrb	r3, [r3, #0]
10001e74:	2b0b      	cmp	r3, #11
10001e76:	d820      	bhi.n	10001eba <XMC_CCU4_SLICE_SetInterruptNode+0x62>
10001e78:	009a      	lsls	r2, r3, #2
10001e7a:	4b20      	ldr	r3, [pc, #128]	; (10001efc <XMC_CCU4_SLICE_SetInterruptNode+0xa4>)
10001e7c:	18d3      	adds	r3, r2, r3
10001e7e:	681b      	ldr	r3, [r3, #0]
10001e80:	469f      	mov	pc, r3
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
10001e82:	2303      	movs	r3, #3
10001e84:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
10001e86:	2300      	movs	r3, #0
10001e88:	617b      	str	r3, [r7, #20]
      break;
10001e8a:	e01b      	b.n	10001ec4 <XMC_CCU4_SLICE_SetInterruptNode+0x6c>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
10001e8c:	230c      	movs	r3, #12
10001e8e:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
10001e90:	2302      	movs	r3, #2
10001e92:	617b      	str	r3, [r7, #20]
      break;
10001e94:	e016      	b.n	10001ec4 <XMC_CCU4_SLICE_SetInterruptNode+0x6c>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
10001e96:	23c0      	movs	r3, #192	; 0xc0
10001e98:	009b      	lsls	r3, r3, #2
10001e9a:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
10001e9c:	2308      	movs	r3, #8
10001e9e:	617b      	str	r3, [r7, #20]
      break;
10001ea0:	e010      	b.n	10001ec4 <XMC_CCU4_SLICE_SetInterruptNode+0x6c>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
10001ea2:	23c0      	movs	r3, #192	; 0xc0
10001ea4:	011b      	lsls	r3, r3, #4
10001ea6:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
10001ea8:	230a      	movs	r3, #10
10001eaa:	617b      	str	r3, [r7, #20]
      break;
10001eac:	e00a      	b.n	10001ec4 <XMC_CCU4_SLICE_SetInterruptNode+0x6c>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT2:
    case XMC_CCU4_SLICE_IRQ_ID_TRAP:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
10001eae:	23c0      	movs	r3, #192	; 0xc0
10001eb0:	019b      	lsls	r3, r3, #6
10001eb2:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
10001eb4:	230c      	movs	r3, #12
10001eb6:	617b      	str	r3, [r7, #20]
      break;
10001eb8:	e004      	b.n	10001ec4 <XMC_CCU4_SLICE_SetInterruptNode+0x6c>
	  
	default:
	  mask = 0;
10001eba:	2300      	movs	r3, #0
10001ebc:	613b      	str	r3, [r7, #16]
	  pos = 0;
10001ebe:	2300      	movs	r3, #0
10001ec0:	617b      	str	r3, [r7, #20]
	  break;
10001ec2:	46c0      	nop			; (mov r8, r8)
  }

  if (mask != 0)
10001ec4:	693b      	ldr	r3, [r7, #16]
10001ec6:	2b00      	cmp	r3, #0
10001ec8:	d014      	beq.n	10001ef4 <XMC_CCU4_SLICE_SetInterruptNode+0x9c>
  {
    srs = slice->SRS;
10001eca:	687b      	ldr	r3, [r7, #4]
10001ecc:	22a8      	movs	r2, #168	; 0xa8
10001ece:	589b      	ldr	r3, [r3, r2]
10001ed0:	60fb      	str	r3, [r7, #12]
    srs &= ~mask;
10001ed2:	693b      	ldr	r3, [r7, #16]
10001ed4:	43da      	mvns	r2, r3
10001ed6:	68fb      	ldr	r3, [r7, #12]
10001ed8:	4013      	ands	r3, r2
10001eda:	60fb      	str	r3, [r7, #12]
    srs |= (uint32_t)sr << pos;
10001edc:	1cbb      	adds	r3, r7, #2
10001ede:	781a      	ldrb	r2, [r3, #0]
10001ee0:	697b      	ldr	r3, [r7, #20]
10001ee2:	409a      	lsls	r2, r3
10001ee4:	1c13      	adds	r3, r2, #0
10001ee6:	68fa      	ldr	r2, [r7, #12]
10001ee8:	4313      	orrs	r3, r2
10001eea:	60fb      	str	r3, [r7, #12]
    slice->SRS = srs;
10001eec:	687b      	ldr	r3, [r7, #4]
10001eee:	21a8      	movs	r1, #168	; 0xa8
10001ef0:	68fa      	ldr	r2, [r7, #12]
10001ef2:	505a      	str	r2, [r3, r1]
  }
}
10001ef4:	46bd      	mov	sp, r7
10001ef6:	b006      	add	sp, #24
10001ef8:	bd80      	pop	{r7, pc}
10001efa:	46c0      	nop			; (mov r8, r8)
10001efc:	10002c64 	.word	0x10002c64

10001f00 <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
10001f00:	b580      	push	{r7, lr}
10001f02:	b082      	sub	sp, #8
10001f04:	af00      	add	r7, sp, #0
10001f06:	6078      	str	r0, [r7, #4]
10001f08:	1c08      	adds	r0, r1, #0
10001f0a:	1c11      	adds	r1, r2, #0
10001f0c:	1cfb      	adds	r3, r7, #3
10001f0e:	1c02      	adds	r2, r0, #0
10001f10:	701a      	strb	r2, [r3, #0]
10001f12:	1cbb      	adds	r3, r7, #2
10001f14:	1c0a      	adds	r2, r1, #0
10001f16:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
10001f18:	687b      	ldr	r3, [r7, #4]
10001f1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
10001f1c:	1cfa      	adds	r2, r7, #3
10001f1e:	7812      	ldrb	r2, [r2, #0]
10001f20:	0052      	lsls	r2, r2, #1
10001f22:	1c11      	adds	r1, r2, #0
10001f24:	2203      	movs	r2, #3
10001f26:	408a      	lsls	r2, r1
10001f28:	43d2      	mvns	r2, r2
10001f2a:	401a      	ands	r2, r3
10001f2c:	687b      	ldr	r3, [r7, #4]
10001f2e:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
10001f30:	687b      	ldr	r3, [r7, #4]
10001f32:	6f5a      	ldr	r2, [r3, #116]	; 0x74
10001f34:	1cbb      	adds	r3, r7, #2
10001f36:	781b      	ldrb	r3, [r3, #0]
10001f38:	1cf9      	adds	r1, r7, #3
10001f3a:	7809      	ldrb	r1, [r1, #0]
10001f3c:	0049      	lsls	r1, r1, #1
10001f3e:	408b      	lsls	r3, r1
10001f40:	431a      	orrs	r2, r3
10001f42:	687b      	ldr	r3, [r7, #4]
10001f44:	675a      	str	r2, [r3, #116]	; 0x74
}
10001f46:	46bd      	mov	sp, r7
10001f48:	b002      	add	sp, #8
10001f4a:	bd80      	pop	{r7, pc}

10001f4c <__aeabi_uidiv>:
/***********************************************************************************************************************
 * API IMPLEMENTATION - aeabi routines
 **********************************************************************************************************************/
/* This function performs unsigned integer division */
uint32_t __aeabi_uidiv(uint32_t dividend, uint32_t divisor)
{
10001f4c:	b580      	push	{r7, lr}
10001f4e:	b088      	sub	sp, #32
10001f50:	af00      	add	r7, sp, #0
10001f52:	6078      	str	r0, [r7, #4]
10001f54:	6039      	str	r1, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10001f56:	f3ef 8310 	mrs	r3, PRIMASK
10001f5a:	617b      	str	r3, [r7, #20]
  return(result);
10001f5c:	697b      	ldr	r3, [r7, #20]
 * API IMPLEMENTATION - Utility functions
 ********************************************************************************************************************/
__attribute__((always_inline)) __STATIC_INLINE uint32_t critical_section_enter(void)
{
  uint32_t status;
  status = __get_PRIMASK();
10001f5e:	613b      	str	r3, [r7, #16]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
10001f60:	b672      	cpsid	i
  __disable_irq ();
  return status;
10001f62:	693b      	ldr	r3, [r7, #16]
/* This function performs unsigned integer division */
uint32_t __aeabi_uidiv(uint32_t dividend, uint32_t divisor)
{
  uint32_t result;
  uint32_t ics;
  ics = critical_section_enter();
10001f64:	61fb      	str	r3, [r7, #28]

  MATH->DIVCON  = XMC_MATH_UNSIGNED_DIVISION;
10001f66:	4b0c      	ldr	r3, [pc, #48]	; (10001f98 <__aeabi_uidiv+0x4c>)
10001f68:	2204      	movs	r2, #4
10001f6a:	635a      	str	r2, [r3, #52]	; 0x34
  MATH->DVD     = dividend;
10001f6c:	4b0a      	ldr	r3, [pc, #40]	; (10001f98 <__aeabi_uidiv+0x4c>)
10001f6e:	687a      	ldr	r2, [r7, #4]
10001f70:	621a      	str	r2, [r3, #32]
  MATH->DVS     = divisor;
10001f72:	4b09      	ldr	r3, [pc, #36]	; (10001f98 <__aeabi_uidiv+0x4c>)
10001f74:	683a      	ldr	r2, [r7, #0]
10001f76:	625a      	str	r2, [r3, #36]	; 0x24

  result = MATH->QUOT;
10001f78:	4b07      	ldr	r3, [pc, #28]	; (10001f98 <__aeabi_uidiv+0x4c>)
10001f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001f7c:	61bb      	str	r3, [r7, #24]
10001f7e:	69fb      	ldr	r3, [r7, #28]
10001f80:	60fb      	str	r3, [r7, #12]
10001f82:	68fb      	ldr	r3, [r7, #12]
10001f84:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10001f86:	68bb      	ldr	r3, [r7, #8]
10001f88:	f383 8810 	msr	PRIMASK, r3

  critical_section_exit(ics);

  return result;
10001f8c:	69bb      	ldr	r3, [r7, #24]
}
10001f8e:	1c18      	adds	r0, r3, #0
10001f90:	46bd      	mov	sp, r7
10001f92:	b008      	add	sp, #32
10001f94:	bd80      	pop	{r7, pc}
10001f96:	46c0      	nop			; (mov r8, r8)
10001f98:	40030000 	.word	0x40030000

10001f9c <__aeabi_uidivmod>:
  return result;
}

/* This function performs unsigned integer division modulo */
uint64_t __aeabi_uidivmod(uint32_t dividend, uint32_t divisor)
{
10001f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
10001f9e:	b08d      	sub	sp, #52	; 0x34
10001fa0:	af00      	add	r7, sp, #0
10001fa2:	6078      	str	r0, [r7, #4]
10001fa4:	6039      	str	r1, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10001fa6:	f3ef 8210 	mrs	r2, PRIMASK
10001faa:	617a      	str	r2, [r7, #20]
  return(result);
10001fac:	697a      	ldr	r2, [r7, #20]
 * API IMPLEMENTATION - Utility functions
 ********************************************************************************************************************/
__attribute__((always_inline)) __STATIC_INLINE uint32_t critical_section_enter(void)
{
  uint32_t status;
  status = __get_PRIMASK();
10001fae:	613a      	str	r2, [r7, #16]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
10001fb0:	b672      	cpsid	i
  __disable_irq ();
  return status;
10001fb2:	693a      	ldr	r2, [r7, #16]
uint64_t __aeabi_uidivmod(uint32_t dividend, uint32_t divisor)
{
  uint64_t remainder;
  uint64_t quot;
  uint32_t ics;
  ics = critical_section_enter();
10001fb4:	62fa      	str	r2, [r7, #44]	; 0x2c

  MATH->DIVCON  = XMC_MATH_UNSIGNED_DIVISION;
10001fb6:	4a15      	ldr	r2, [pc, #84]	; (1000200c <__aeabi_uidivmod+0x70>)
10001fb8:	2104      	movs	r1, #4
10001fba:	6351      	str	r1, [r2, #52]	; 0x34
  MATH->DVD     = dividend;
10001fbc:	4a13      	ldr	r2, [pc, #76]	; (1000200c <__aeabi_uidivmod+0x70>)
10001fbe:	6879      	ldr	r1, [r7, #4]
10001fc0:	6211      	str	r1, [r2, #32]
  MATH->DVS     = divisor;
10001fc2:	4a12      	ldr	r2, [pc, #72]	; (1000200c <__aeabi_uidivmod+0x70>)
10001fc4:	6839      	ldr	r1, [r7, #0]
10001fc6:	6251      	str	r1, [r2, #36]	; 0x24

  remainder = (uint64_t)MATH->RMD;
10001fc8:	4a10      	ldr	r2, [pc, #64]	; (1000200c <__aeabi_uidivmod+0x70>)
10001fca:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
10001fcc:	623a      	str	r2, [r7, #32]
10001fce:	2200      	movs	r2, #0
10001fd0:	627a      	str	r2, [r7, #36]	; 0x24
  quot = (uint64_t)MATH->QUOT;
10001fd2:	4a0e      	ldr	r2, [pc, #56]	; (1000200c <__aeabi_uidivmod+0x70>)
10001fd4:	6a92      	ldr	r2, [r2, #40]	; 0x28
10001fd6:	61ba      	str	r2, [r7, #24]
10001fd8:	2200      	movs	r2, #0
10001fda:	61fa      	str	r2, [r7, #28]
10001fdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
10001fde:	60fa      	str	r2, [r7, #12]
10001fe0:	68fa      	ldr	r2, [r7, #12]
10001fe2:	60ba      	str	r2, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10001fe4:	68ba      	ldr	r2, [r7, #8]
10001fe6:	f382 8810 	msr	PRIMASK, r2

  critical_section_exit(ics);

  return ((remainder << 32) | quot);
10001fea:	6a3a      	ldr	r2, [r7, #32]
10001fec:	0014      	movs	r4, r2
10001fee:	2200      	movs	r2, #0
10001ff0:	1c13      	adds	r3, r2, #0
10001ff2:	69ba      	ldr	r2, [r7, #24]
10001ff4:	431a      	orrs	r2, r3
10001ff6:	1c15      	adds	r5, r2, #0
10001ff8:	69fa      	ldr	r2, [r7, #28]
10001ffa:	4322      	orrs	r2, r4
10001ffc:	1c16      	adds	r6, r2, #0
10001ffe:	1c2b      	adds	r3, r5, #0
10002000:	1c34      	adds	r4, r6, #0
}
10002002:	1c18      	adds	r0, r3, #0
10002004:	1c21      	adds	r1, r4, #0
10002006:	46bd      	mov	sp, r7
10002008:	b00d      	add	sp, #52	; 0x34
1000200a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000200c:	40030000 	.word	0x40030000

10002010 <_init>:
  }
}

/* Init */
void _init(void)
{}
10002010:	b580      	push	{r7, lr}
10002012:	af00      	add	r7, sp, #0
10002014:	46bd      	mov	sp, r7
10002016:	bd80      	pop	{r7, pc}

10002018 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
10002018:	b580      	push	{r7, lr}
1000201a:	b082      	sub	sp, #8
1000201c:	af00      	add	r7, sp, #0
1000201e:	6078      	str	r0, [r7, #4]
10002020:	1c0a      	adds	r2, r1, #0
10002022:	1cfb      	adds	r3, r7, #3
10002024:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1) << slice_number;
10002026:	1cfb      	adds	r3, r7, #3
10002028:	781b      	ldrb	r3, [r3, #0]
1000202a:	2201      	movs	r2, #1
1000202c:	409a      	lsls	r2, r3
1000202e:	687b      	ldr	r3, [r7, #4]
10002030:	60da      	str	r2, [r3, #12]
}
10002032:	46bd      	mov	sp, r7
10002034:	b002      	add	sp, #8
10002036:	bd80      	pop	{r7, pc}

10002038 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
10002038:	b580      	push	{r7, lr}
1000203a:	b082      	sub	sp, #8
1000203c:	af00      	add	r7, sp, #0
1000203e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
10002040:	687b      	ldr	r3, [r7, #4]
10002042:	2201      	movs	r2, #1
10002044:	60da      	str	r2, [r3, #12]
}
10002046:	46bd      	mov	sp, r7
10002048:	b002      	add	sp, #8
1000204a:	bd80      	pop	{r7, pc}

1000204c <XMC_CCU4_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
1000204c:	b580      	push	{r7, lr}
1000204e:	b082      	sub	sp, #8
10002050:	af00      	add	r7, sp, #0
10002052:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
10002054:	687b      	ldr	r3, [r7, #4]
10002056:	2202      	movs	r2, #2
10002058:	611a      	str	r2, [r3, #16]
}
1000205a:	46bd      	mov	sp, r7
1000205c:	b002      	add	sp, #8
1000205e:	bd80      	pop	{r7, pc}

10002060 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
10002060:	b580      	push	{r7, lr}
10002062:	b082      	sub	sp, #8
10002064:	af00      	add	r7, sp, #0
10002066:	6078      	str	r0, [r7, #4]
10002068:	1c0a      	adds	r2, r1, #0
1000206a:	1cbb      	adds	r3, r7, #2
1000206c:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
1000206e:	1cbb      	adds	r3, r7, #2
10002070:	881a      	ldrh	r2, [r3, #0]
10002072:	687b      	ldr	r3, [r7, #4]
10002074:	635a      	str	r2, [r3, #52]	; 0x34
}
10002076:	46bd      	mov	sp, r7
10002078:	b002      	add	sp, #8
1000207a:	bd80      	pop	{r7, pc}

1000207c <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
1000207c:	b580      	push	{r7, lr}
1000207e:	b082      	sub	sp, #8
10002080:	af00      	add	r7, sp, #0
10002082:	6078      	str	r0, [r7, #4]
10002084:	1c0a      	adds	r2, r1, #0
10002086:	1cbb      	adds	r3, r7, #2
10002088:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
1000208a:	1cbb      	adds	r3, r7, #2
1000208c:	881a      	ldrh	r2, [r3, #0]
1000208e:	687b      	ldr	r3, [r7, #4]
10002090:	63da      	str	r2, [r3, #60]	; 0x3c
}
10002092:	46bd      	mov	sp, r7
10002094:	b002      	add	sp, #8
10002096:	bd80      	pop	{r7, pc}

10002098 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
10002098:	b580      	push	{r7, lr}
1000209a:	b082      	sub	sp, #8
1000209c:	af00      	add	r7, sp, #0
1000209e:	6078      	str	r0, [r7, #4]
100020a0:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;
100020a2:	687b      	ldr	r3, [r7, #4]
100020a4:	683a      	ldr	r2, [r7, #0]
100020a6:	611a      	str	r2, [r3, #16]
}
100020a8:	46bd      	mov	sp, r7
100020aa:	b002      	add	sp, #8
100020ac:	bd80      	pop	{r7, pc}
100020ae:	46c0      	nop			; (mov r8, r8)

100020b0 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
    const XMC_CCU4_SLICE_IRQ_ID_t event)
{
100020b0:	b580      	push	{r7, lr}
100020b2:	b082      	sub	sp, #8
100020b4:	af00      	add	r7, sp, #0
100020b6:	6078      	str	r0, [r7, #4]
100020b8:	1c0a      	adds	r2, r1, #0
100020ba:	1cfb      	adds	r3, r7, #3
100020bc:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
100020be:	687b      	ldr	r3, [r7, #4]
100020c0:	22a4      	movs	r2, #164	; 0xa4
100020c2:	589a      	ldr	r2, [r3, r2]
100020c4:	1cfb      	adds	r3, r7, #3
100020c6:	781b      	ldrb	r3, [r3, #0]
100020c8:	2101      	movs	r1, #1
100020ca:	4099      	lsls	r1, r3
100020cc:	1c0b      	adds	r3, r1, #0
100020ce:	431a      	orrs	r2, r3
100020d0:	687b      	ldr	r3, [r7, #4]
100020d2:	21a4      	movs	r1, #164	; 0xa4
100020d4:	505a      	str	r2, [r3, r1]
}
100020d6:	46bd      	mov	sp, r7
100020d8:	b002      	add	sp, #8
100020da:	bd80      	pop	{r7, pc}

100020dc <TIMER_Init>:
/*
 * This function initializes a TIMER APP based on user configuration.
 *
 */
TIMER_STATUS_t TIMER_Init(TIMER_t* const handle_ptr)
{
100020dc:	b590      	push	{r4, r7, lr}
100020de:	b085      	sub	sp, #20
100020e0:	af00      	add	r7, sp, #0
100020e2:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
100020e4:	230f      	movs	r3, #15
100020e6:	18fb      	adds	r3, r7, r3
100020e8:	2200      	movs	r2, #0
100020ea:	701a      	strb	r2, [r3, #0]
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
100020ec:	687b      	ldr	r3, [r7, #4]
100020ee:	2226      	movs	r2, #38	; 0x26
100020f0:	5c9b      	ldrb	r3, [r3, r2]
100020f2:	2201      	movs	r2, #1
100020f4:	4053      	eors	r3, r2
100020f6:	b2db      	uxtb	r3, r3
100020f8:	2b00      	cmp	r3, #0
100020fa:	d00c      	beq.n	10002116 <TIMER_Init+0x3a>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
100020fc:	687b      	ldr	r3, [r7, #4]
100020fe:	2221      	movs	r2, #33	; 0x21
10002100:	5c9b      	ldrb	r3, [r3, r2]
10002102:	2b00      	cmp	r3, #0
10002104:	d107      	bne.n	10002116 <TIMER_Init+0x3a>
    {
      /* Configure CCU4 timer for the required time tick settings */
      status = TIMER_CCU4_lInit(handle_ptr);
10002106:	230f      	movs	r3, #15
10002108:	18fc      	adds	r4, r7, r3
1000210a:	687b      	ldr	r3, [r7, #4]
1000210c:	1c18      	adds	r0, r3, #0
1000210e:	f000 f809 	bl	10002124 <TIMER_CCU4_lInit>
10002112:	1c03      	adds	r3, r0, #0
10002114:	7023      	strb	r3, [r4, #0]
      status = TIMER_CCU8_lInit(handle_ptr);
    }
#endif
  }

  return (status);
10002116:	230f      	movs	r3, #15
10002118:	18fb      	adds	r3, r7, r3
1000211a:	781b      	ldrb	r3, [r3, #0]
}
1000211c:	1c18      	adds	r0, r3, #0
1000211e:	46bd      	mov	sp, r7
10002120:	b005      	add	sp, #20
10002122:	bd90      	pop	{r4, r7, pc}

10002124 <TIMER_CCU4_lInit>:
#ifdef TIMER_CCU4_USED
/*
 * This function configures timer ccu4 timer with required time tick value
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
10002124:	b590      	push	{r4, r7, lr}
10002126:	b085      	sub	sp, #20
10002128:	af00      	add	r7, sp, #0
1000212a:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
1000212c:	687b      	ldr	r3, [r7, #4]
1000212e:	691b      	ldr	r3, [r3, #16]
10002130:	220f      	movs	r2, #15
10002132:	18bc      	adds	r4, r7, r2
10002134:	1c18      	adds	r0, r3, #0
10002136:	f000 f92f 	bl	10002398 <GLOBAL_CCU4_Init>
1000213a:	1c03      	adds	r3, r0, #0
1000213c:	7023      	strb	r3, [r4, #0]

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
1000213e:	687b      	ldr	r3, [r7, #4]
10002140:	691b      	ldr	r3, [r3, #16]
10002142:	689a      	ldr	r2, [r3, #8]
10002144:	687b      	ldr	r3, [r7, #4]
10002146:	7e1b      	ldrb	r3, [r3, #24]
10002148:	1c10      	adds	r0, r2, #0
1000214a:	1c19      	adds	r1, r3, #0
1000214c:	f7ff ff64 	bl	10002018 <XMC_CCU4_EnableClock>
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
10002150:	687b      	ldr	r3, [r7, #4]
10002152:	695a      	ldr	r2, [r3, #20]
10002154:	687b      	ldr	r3, [r7, #4]
10002156:	69db      	ldr	r3, [r3, #28]
10002158:	1c10      	adds	r0, r2, #0
1000215a:	1c19      	adds	r1, r3, #0
1000215c:	f7ff fe48 	bl	10001df0 <XMC_CCU4_SLICE_CompareInit>
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU4_lShadowTransfer(handle_ptr);
10002160:	687b      	ldr	r3, [r7, #4]
10002162:	1c18      	adds	r0, r3, #0
10002164:	f000 f830 	bl	100021c8 <TIMER_CCU4_lShadowTransfer>

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
10002168:	687b      	ldr	r3, [r7, #4]
1000216a:	2225      	movs	r2, #37	; 0x25
1000216c:	5c9b      	ldrb	r3, [r3, r2]
1000216e:	2b00      	cmp	r3, #0
10002170:	d00f      	beq.n	10002192 <TIMER_CCU4_lInit+0x6e>
  {
    /* Binds a period match event to an NVIC node  */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
10002172:	687b      	ldr	r3, [r7, #4]
10002174:	6959      	ldr	r1, [r3, #20]
10002176:	687b      	ldr	r3, [r7, #4]
10002178:	2220      	movs	r2, #32
1000217a:	5c9b      	ldrb	r3, [r3, r2]
1000217c:	1c08      	adds	r0, r1, #0
1000217e:	2100      	movs	r1, #0
10002180:	1c1a      	adds	r2, r3, #0
10002182:	f7ff fe69 	bl	10001e58 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_period_match_node);
    /* Enables a timer(period match) event  */
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
10002186:	687b      	ldr	r3, [r7, #4]
10002188:	695b      	ldr	r3, [r3, #20]
1000218a:	1c18      	adds	r0, r3, #0
1000218c:	2100      	movs	r1, #0
1000218e:	f7ff ff8f 	bl	100020b0 <XMC_CCU4_SLICE_EnableEvent>
  }
#endif
  /* Clears the timer register */
  XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
10002192:	687b      	ldr	r3, [r7, #4]
10002194:	695b      	ldr	r3, [r3, #20]
10002196:	1c18      	adds	r0, r3, #0
10002198:	f7ff ff58 	bl	1000204c <XMC_CCU4_SLICE_ClearTimer>

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
1000219c:	687b      	ldr	r3, [r7, #4]
1000219e:	2226      	movs	r2, #38	; 0x26
100021a0:	2101      	movs	r1, #1
100021a2:	5499      	strb	r1, [r3, r2]

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
100021a4:	687b      	ldr	r3, [r7, #4]
100021a6:	2224      	movs	r2, #36	; 0x24
100021a8:	5c9b      	ldrb	r3, [r3, r2]
100021aa:	2b00      	cmp	r3, #0
100021ac:	d004      	beq.n	100021b8 <TIMER_CCU4_lInit+0x94>
  {
    /* Start the timer */
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
100021ae:	687b      	ldr	r3, [r7, #4]
100021b0:	695b      	ldr	r3, [r3, #20]
100021b2:	1c18      	adds	r0, r3, #0
100021b4:	f7ff ff40 	bl	10002038 <XMC_CCU4_SLICE_StartTimer>
  }

  return (status);
100021b8:	230f      	movs	r3, #15
100021ba:	18fb      	adds	r3, r7, r3
100021bc:	781b      	ldrb	r3, [r3, #0]
}
100021be:	1c18      	adds	r0, r3, #0
100021c0:	46bd      	mov	sp, r7
100021c2:	b005      	add	sp, #20
100021c4:	bd90      	pop	{r4, r7, pc}
100021c6:	46c0      	nop			; (mov r8, r8)

100021c8 <TIMER_CCU4_lShadowTransfer>:

/*
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
{
100021c8:	b580      	push	{r7, lr}
100021ca:	b082      	sub	sp, #8
100021cc:	af00      	add	r7, sp, #0
100021ce:	6078      	str	r0, [r7, #4]
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
100021d0:	687b      	ldr	r3, [r7, #4]
100021d2:	695a      	ldr	r2, [r3, #20]
100021d4:	687b      	ldr	r3, [r7, #4]
100021d6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
100021d8:	1c10      	adds	r0, r2, #0
100021da:	1c19      	adds	r1, r3, #0
100021dc:	f7ff ff40 	bl	10002060 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
100021e0:	687b      	ldr	r3, [r7, #4]
100021e2:	695b      	ldr	r3, [r3, #20]
100021e4:	1c18      	adds	r0, r3, #0
100021e6:	2100      	movs	r1, #0
100021e8:	f7ff ff48 	bl	1000207c <XMC_CCU4_SLICE_SetTimerCompareMatch>
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
100021ec:	687b      	ldr	r3, [r7, #4]
100021ee:	691b      	ldr	r3, [r3, #16]
100021f0:	689a      	ldr	r2, [r3, #8]
100021f2:	687b      	ldr	r3, [r7, #4]
100021f4:	68db      	ldr	r3, [r3, #12]
100021f6:	1c10      	adds	r0, r2, #0
100021f8:	1c19      	adds	r1, r3, #0
100021fa:	f7ff ff4d 	bl	10002098 <XMC_CCU4_EnableShadowTransfer>
}
100021fe:	46bd      	mov	sp, r7
10002200:	b002      	add	sp, #8
10002202:	bd80      	pop	{r7, pc}

10002204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
10002204:	b580      	push	{r7, lr}
10002206:	b082      	sub	sp, #8
10002208:	af00      	add	r7, sp, #0
1000220a:	1c02      	adds	r2, r0, #0
1000220c:	1dfb      	adds	r3, r7, #7
1000220e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10002210:	1dfb      	adds	r3, r7, #7
10002212:	781b      	ldrb	r3, [r3, #0]
10002214:	2b7f      	cmp	r3, #127	; 0x7f
10002216:	d809      	bhi.n	1000222c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10002218:	4b06      	ldr	r3, [pc, #24]	; (10002234 <__NVIC_EnableIRQ+0x30>)
1000221a:	1dfa      	adds	r2, r7, #7
1000221c:	7812      	ldrb	r2, [r2, #0]
1000221e:	1c11      	adds	r1, r2, #0
10002220:	221f      	movs	r2, #31
10002222:	400a      	ands	r2, r1
10002224:	2101      	movs	r1, #1
10002226:	4091      	lsls	r1, r2
10002228:	1c0a      	adds	r2, r1, #0
1000222a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
1000222c:	46bd      	mov	sp, r7
1000222e:	b002      	add	sp, #8
10002230:	bd80      	pop	{r7, pc}
10002232:	46c0      	nop			; (mov r8, r8)
10002234:	e000e100 	.word	0xe000e100

10002238 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10002238:	b5b0      	push	{r4, r5, r7, lr}
1000223a:	b082      	sub	sp, #8
1000223c:	af00      	add	r7, sp, #0
1000223e:	1c02      	adds	r2, r0, #0
10002240:	6039      	str	r1, [r7, #0]
10002242:	1dfb      	adds	r3, r7, #7
10002244:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10002246:	1dfb      	adds	r3, r7, #7
10002248:	781b      	ldrb	r3, [r3, #0]
1000224a:	2b7f      	cmp	r3, #127	; 0x7f
1000224c:	d827      	bhi.n	1000229e <__NVIC_SetPriority+0x66>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000224e:	4c2d      	ldr	r4, [pc, #180]	; (10002304 <__NVIC_SetPriority+0xcc>)
10002250:	1dfb      	adds	r3, r7, #7
10002252:	781b      	ldrb	r3, [r3, #0]
10002254:	b25b      	sxtb	r3, r3
10002256:	089b      	lsrs	r3, r3, #2
10002258:	492a      	ldr	r1, [pc, #168]	; (10002304 <__NVIC_SetPriority+0xcc>)
1000225a:	1dfa      	adds	r2, r7, #7
1000225c:	7812      	ldrb	r2, [r2, #0]
1000225e:	b252      	sxtb	r2, r2
10002260:	0892      	lsrs	r2, r2, #2
10002262:	32c0      	adds	r2, #192	; 0xc0
10002264:	0092      	lsls	r2, r2, #2
10002266:	5852      	ldr	r2, [r2, r1]
10002268:	1df9      	adds	r1, r7, #7
1000226a:	7809      	ldrb	r1, [r1, #0]
1000226c:	1c08      	adds	r0, r1, #0
1000226e:	2103      	movs	r1, #3
10002270:	4001      	ands	r1, r0
10002272:	00c9      	lsls	r1, r1, #3
10002274:	1c08      	adds	r0, r1, #0
10002276:	21ff      	movs	r1, #255	; 0xff
10002278:	4081      	lsls	r1, r0
1000227a:	43c9      	mvns	r1, r1
1000227c:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1000227e:	683a      	ldr	r2, [r7, #0]
10002280:	0192      	lsls	r2, r2, #6
10002282:	20ff      	movs	r0, #255	; 0xff
10002284:	4002      	ands	r2, r0
10002286:	1df8      	adds	r0, r7, #7
10002288:	7800      	ldrb	r0, [r0, #0]
1000228a:	1c05      	adds	r5, r0, #0
1000228c:	2003      	movs	r0, #3
1000228e:	4028      	ands	r0, r5
10002290:	00c0      	lsls	r0, r0, #3
10002292:	4082      	lsls	r2, r0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002294:	430a      	orrs	r2, r1
10002296:	33c0      	adds	r3, #192	; 0xc0
10002298:	009b      	lsls	r3, r3, #2
1000229a:	511a      	str	r2, [r3, r4]
1000229c:	e02e      	b.n	100022fc <__NVIC_SetPriority+0xc4>
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000229e:	4c1a      	ldr	r4, [pc, #104]	; (10002308 <__NVIC_SetPriority+0xd0>)
100022a0:	1dfb      	adds	r3, r7, #7
100022a2:	781b      	ldrb	r3, [r3, #0]
100022a4:	1c1a      	adds	r2, r3, #0
100022a6:	230f      	movs	r3, #15
100022a8:	4013      	ands	r3, r2
100022aa:	3b08      	subs	r3, #8
100022ac:	0899      	lsrs	r1, r3, #2
100022ae:	4a16      	ldr	r2, [pc, #88]	; (10002308 <__NVIC_SetPriority+0xd0>)
100022b0:	1dfb      	adds	r3, r7, #7
100022b2:	781b      	ldrb	r3, [r3, #0]
100022b4:	1c18      	adds	r0, r3, #0
100022b6:	230f      	movs	r3, #15
100022b8:	4003      	ands	r3, r0
100022ba:	3b08      	subs	r3, #8
100022bc:	089b      	lsrs	r3, r3, #2
100022be:	3306      	adds	r3, #6
100022c0:	009b      	lsls	r3, r3, #2
100022c2:	18d3      	adds	r3, r2, r3
100022c4:	685b      	ldr	r3, [r3, #4]
100022c6:	1dfa      	adds	r2, r7, #7
100022c8:	7812      	ldrb	r2, [r2, #0]
100022ca:	1c10      	adds	r0, r2, #0
100022cc:	2203      	movs	r2, #3
100022ce:	4002      	ands	r2, r0
100022d0:	00d2      	lsls	r2, r2, #3
100022d2:	1c10      	adds	r0, r2, #0
100022d4:	22ff      	movs	r2, #255	; 0xff
100022d6:	4082      	lsls	r2, r0
100022d8:	43d2      	mvns	r2, r2
100022da:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
100022dc:	683b      	ldr	r3, [r7, #0]
100022de:	019b      	lsls	r3, r3, #6
100022e0:	20ff      	movs	r0, #255	; 0xff
100022e2:	4003      	ands	r3, r0
100022e4:	1df8      	adds	r0, r7, #7
100022e6:	7800      	ldrb	r0, [r0, #0]
100022e8:	1c05      	adds	r5, r0, #0
100022ea:	2003      	movs	r0, #3
100022ec:	4028      	ands	r0, r5
100022ee:	00c0      	lsls	r0, r0, #3
100022f0:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100022f2:	431a      	orrs	r2, r3
100022f4:	1d8b      	adds	r3, r1, #6
100022f6:	009b      	lsls	r3, r3, #2
100022f8:	18e3      	adds	r3, r4, r3
100022fa:	605a      	str	r2, [r3, #4]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
100022fc:	46bd      	mov	sp, r7
100022fe:	b002      	add	sp, #8
10002300:	bdb0      	pop	{r4, r5, r7, pc}
10002302:	46c0      	nop			; (mov r8, r8)
10002304:	e000e100 	.word	0xe000e100
10002308:	e000ed00 	.word	0xe000ed00

1000230c <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
1000230c:	b580      	push	{r7, lr}
1000230e:	b082      	sub	sp, #8
10002310:	af00      	add	r7, sp, #0
10002312:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
10002314:	687b      	ldr	r3, [r7, #4]
10002316:	789b      	ldrb	r3, [r3, #2]
10002318:	b25b      	sxtb	r3, r3
1000231a:	1c18      	adds	r0, r3, #0
1000231c:	f7ff ff72 	bl	10002204 <__NVIC_EnableIRQ>
}
10002320:	46bd      	mov	sp, r7
10002322:	b002      	add	sp, #8
10002324:	bd80      	pop	{r7, pc}
10002326:	46c0      	nop			; (mov r8, r8)

10002328 <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
10002328:	b580      	push	{r7, lr}
1000232a:	b082      	sub	sp, #8
1000232c:	af00      	add	r7, sp, #0
1000232e:	6078      	str	r0, [r7, #4]
    INTERRUPT_Enable(handler);
  }
#endif

#if(UC_FAMILY == XMC1)
  NVIC_SetPriority(handler->node, handler->priority);
10002330:	687b      	ldr	r3, [r7, #4]
10002332:	789a      	ldrb	r2, [r3, #2]
10002334:	687b      	ldr	r3, [r7, #4]
10002336:	78db      	ldrb	r3, [r3, #3]
10002338:	1c19      	adds	r1, r3, #0
1000233a:	b253      	sxtb	r3, r2
1000233c:	1c18      	adds	r0, r3, #0
1000233e:	f7ff ff7b 	bl	10002238 <__NVIC_SetPriority>
  
#if (UC_SERIES == XMC14)
  XMC_SCU_SetInterruptControl((uint8_t)handler->node, (XMC_SCU_IRQCTRL_t)((handler->node << 8) | handler->irqctrl));
10002342:	687b      	ldr	r3, [r7, #4]
10002344:	789b      	ldrb	r3, [r3, #2]
10002346:	b2da      	uxtb	r2, r3
10002348:	687b      	ldr	r3, [r7, #4]
1000234a:	789b      	ldrb	r3, [r3, #2]
1000234c:	b25b      	sxtb	r3, r3
1000234e:	021b      	lsls	r3, r3, #8
10002350:	b299      	uxth	r1, r3
10002352:	687b      	ldr	r3, [r7, #4]
10002354:	881b      	ldrh	r3, [r3, #0]
10002356:	b29b      	uxth	r3, r3
10002358:	430b      	orrs	r3, r1
1000235a:	b29b      	uxth	r3, r3
1000235c:	b29b      	uxth	r3, r3
1000235e:	1c10      	adds	r0, r2, #0
10002360:	1c19      	adds	r1, r3, #0
10002362:	f7ff f977 	bl	10001654 <XMC_SCU_SetInterruptControl>
#endif

  /* Enable the interrupt if enable_at_init is enabled */
  if (handler->enable_at_init == true)
10002366:	687b      	ldr	r3, [r7, #4]
10002368:	791b      	ldrb	r3, [r3, #4]
1000236a:	2b00      	cmp	r3, #0
1000236c:	d003      	beq.n	10002376 <INTERRUPT_Init+0x4e>
  {
    INTERRUPT_Enable(handler);
1000236e:	687b      	ldr	r3, [r7, #4]
10002370:	1c18      	adds	r0, r3, #0
10002372:	f7ff ffcb 	bl	1000230c <INTERRUPT_Enable>
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
10002376:	2300      	movs	r3, #0
}
10002378:	1c18      	adds	r0, r3, #0
1000237a:	46bd      	mov	sp, r7
1000237c:	b002      	add	sp, #8
1000237e:	bd80      	pop	{r7, pc}

10002380 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
10002380:	b580      	push	{r7, lr}
10002382:	b082      	sub	sp, #8
10002384:	af00      	add	r7, sp, #0
10002386:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
10002388:	687b      	ldr	r3, [r7, #4]
1000238a:	2280      	movs	r2, #128	; 0x80
1000238c:	0052      	lsls	r2, r2, #1
1000238e:	60da      	str	r2, [r3, #12]
}
10002390:	46bd      	mov	sp, r7
10002392:	b002      	add	sp, #8
10002394:	bd80      	pop	{r7, pc}
10002396:	46c0      	nop			; (mov r8, r8)

10002398 <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
10002398:	b580      	push	{r7, lr}
1000239a:	b082      	sub	sp, #8
1000239c:	af00      	add	r7, sp, #0
1000239e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
100023a0:	687b      	ldr	r3, [r7, #4]
100023a2:	7b5b      	ldrb	r3, [r3, #13]
100023a4:	2201      	movs	r2, #1
100023a6:	4053      	eors	r3, r2
100023a8:	b2db      	uxtb	r3, r3
100023aa:	2b00      	cmp	r3, #0
100023ac:	d00f      	beq.n	100023ce <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
100023ae:	687b      	ldr	r3, [r7, #4]
100023b0:	689a      	ldr	r2, [r3, #8]
100023b2:	687b      	ldr	r3, [r7, #4]
100023b4:	7b1b      	ldrb	r3, [r3, #12]
100023b6:	1c10      	adds	r0, r2, #0
100023b8:	1c19      	adds	r1, r3, #0
100023ba:	f7ff fcf5 	bl	10001da8 <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
100023be:	687b      	ldr	r3, [r7, #4]
100023c0:	689b      	ldr	r3, [r3, #8]
100023c2:	1c18      	adds	r0, r3, #0
100023c4:	f7ff ffdc 	bl	10002380 <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
100023c8:	687b      	ldr	r3, [r7, #4]
100023ca:	2201      	movs	r2, #1
100023cc:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
100023ce:	2300      	movs	r3, #0
}
100023d0:	1c18      	adds	r0, r3, #0
100023d2:	46bd      	mov	sp, r7
100023d4:	b002      	add	sp, #8
100023d6:	bd80      	pop	{r7, pc}

100023d8 <GLOBAL_CAN_Init>:
  return (version);
}

/*  Function to initialize the CAN Peripheral module clock.  */
GLOBAL_CAN_STATUS_t GLOBAL_CAN_Init(GLOBAL_CAN_t *handle)
{
100023d8:	b580      	push	{r7, lr}
100023da:	b084      	sub	sp, #16
100023dc:	af00      	add	r7, sp, #0
100023de:	6078      	str	r0, [r7, #4]
  GLOBAL_CAN_STATUS_t status = GLOBAL_CAN_STATUS_SUCCESS;
100023e0:	230f      	movs	r3, #15
100023e2:	18fb      	adds	r3, r7, r3
100023e4:	2200      	movs	r2, #0
100023e6:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("GLOBAL_CAN_Init: handle null", handle != NULL);

  if (handle->init_status != true)
100023e8:	687b      	ldr	r3, [r7, #4]
100023ea:	7a5b      	ldrb	r3, [r3, #9]
100023ec:	2201      	movs	r2, #1
100023ee:	4053      	eors	r3, r2
100023f0:	b2db      	uxtb	r3, r3
100023f2:	2b00      	cmp	r3, #0
100023f4:	d011      	beq.n	1000241a <GLOBAL_CAN_Init+0x42>
  {
#if defined(MULTICAN_PLUS)
    XMC_CAN_InitEx(handle->canglobal_ptr, (XMC_CAN_CANCLKSRC_t)handle->can_clock_src, handle->can_frequency);
100023f6:	687b      	ldr	r3, [r7, #4]
100023f8:	6859      	ldr	r1, [r3, #4]
100023fa:	687b      	ldr	r3, [r7, #4]
100023fc:	7a1a      	ldrb	r2, [r3, #8]
100023fe:	687b      	ldr	r3, [r7, #4]
10002400:	681b      	ldr	r3, [r3, #0]
10002402:	1c08      	adds	r0, r1, #0
10002404:	1c11      	adds	r1, r2, #0
10002406:	1c1a      	adds	r2, r3, #0
10002408:	f7ff fb14 	bl	10001a34 <XMC_CAN_InitEx>
#else
    XMC_CAN_InitEx(handle->canglobal_ptr, XMC_CAN_CANCLKSRC_FPERI, handle->can_frequency);
#endif
    handle->init_status = true;
1000240c:	687b      	ldr	r3, [r7, #4]
1000240e:	2201      	movs	r2, #1
10002410:	725a      	strb	r2, [r3, #9]
    status = GLOBAL_CAN_STATUS_SUCCESS;
10002412:	230f      	movs	r3, #15
10002414:	18fb      	adds	r3, r7, r3
10002416:	2200      	movs	r2, #0
10002418:	701a      	strb	r2, [r3, #0]
  }
  return (status);
1000241a:	230f      	movs	r3, #15
1000241c:	18fb      	adds	r3, r7, r3
1000241e:	781b      	ldrb	r3, [r3, #0]

}
10002420:	1c18      	adds	r0, r3, #0
10002422:	46bd      	mov	sp, r7
10002424:	b004      	add	sp, #16
10002426:	bd80      	pop	{r7, pc}

10002428 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
10002428:	b580      	push	{r7, lr}
1000242a:	b082      	sub	sp, #8
1000242c:	af00      	add	r7, sp, #0
1000242e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
10002430:	687b      	ldr	r3, [r7, #4]
10002432:	6819      	ldr	r1, [r3, #0]
10002434:	687b      	ldr	r3, [r7, #4]
10002436:	7b1a      	ldrb	r2, [r3, #12]
10002438:	687b      	ldr	r3, [r7, #4]
1000243a:	3304      	adds	r3, #4
1000243c:	1c08      	adds	r0, r1, #0
1000243e:	1c11      	adds	r1, r2, #0
10002440:	1c1a      	adds	r2, r3, #0
10002442:	f7fe fea1 	bl	10001188 <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
10002446:	687b      	ldr	r3, [r7, #4]
10002448:	6819      	ldr	r1, [r3, #0]
1000244a:	687b      	ldr	r3, [r7, #4]
1000244c:	7b1a      	ldrb	r2, [r3, #12]
1000244e:	687b      	ldr	r3, [r7, #4]
10002450:	7b5b      	ldrb	r3, [r3, #13]
10002452:	1c08      	adds	r0, r1, #0
10002454:	1c11      	adds	r1, r2, #0
10002456:	1c1a      	adds	r2, r3, #0
10002458:	f7ff fd52 	bl	10001f00 <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
1000245c:	2300      	movs	r3, #0
}
1000245e:	1c18      	adds	r0, r3, #0
10002460:	46bd      	mov	sp, r7
10002462:	b002      	add	sp, #8
10002464:	bd80      	pop	{r7, pc}
10002466:	46c0      	nop			; (mov r8, r8)

10002468 <SystemCoreSetup>:
{
  .initialized = false
};
 
void SystemCoreSetup(void)
{
10002468:	b580      	push	{r7, lr}
1000246a:	af00      	add	r7, sp, #0
#if UC_SERIES == XMC14
  /* Enable Prefetch unit */
  SCU_GENERAL->PFUCR &= ~SCU_GENERAL_PFUCR_PFUBYP_Msk;
1000246c:	4b03      	ldr	r3, [pc, #12]	; (1000247c <SystemCoreSetup+0x14>)
1000246e:	4a03      	ldr	r2, [pc, #12]	; (1000247c <SystemCoreSetup+0x14>)
10002470:	6e92      	ldr	r2, [r2, #104]	; 0x68
10002472:	2101      	movs	r1, #1
10002474:	438a      	bics	r2, r1
10002476:	669a      	str	r2, [r3, #104]	; 0x68
#endif
}
10002478:	46bd      	mov	sp, r7
1000247a:	bd80      	pop	{r7, pc}
1000247c:	40010000 	.word	0x40010000

10002480 <CLOCK_XMC1_Init>:

/*
 * API to initialize the CLOCK_XMC1 APP Interrupts
 */
CLOCK_XMC1_STATUS_t CLOCK_XMC1_Init(CLOCK_XMC1_t *handle)
{
10002480:	b580      	push	{r7, lr}
10002482:	b084      	sub	sp, #16
10002484:	af00      	add	r7, sp, #0
10002486:	6078      	str	r0, [r7, #4]
  CLOCK_XMC1_STATUS_t status = CLOCK_XMC1_STATUS_SUCCESS;
10002488:	230f      	movs	r3, #15
1000248a:	18fb      	adds	r3, r7, r3
1000248c:	2200      	movs	r2, #0
1000248e:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t loci_event_status = CLOCK_XMC1_STATUS_SUCCESS;
10002490:	230e      	movs	r3, #14
10002492:	18fb      	adds	r3, r7, r3
10002494:	2200      	movs	r2, #0
10002496:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t stdbyclkfail_status = CLOCK_XMC1_STATUS_SUCCESS;
10002498:	230d      	movs	r3, #13
1000249a:	18fb      	adds	r3, r7, r3
1000249c:	2200      	movs	r2, #0
1000249e:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t loss_ext_clock_event_status = CLOCK_XMC1_STATUS_SUCCESS;
100024a0:	230c      	movs	r3, #12
100024a2:	18fb      	adds	r3, r7, r3
100024a4:	2200      	movs	r2, #0
100024a6:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t dco1_out_sync_status = CLOCK_XMC1_STATUS_SUCCESS;
100024a8:	230b      	movs	r3, #11
100024aa:	18fb      	adds	r3, r7, r3
100024ac:	2200      	movs	r2, #0
100024ae:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("CLOCK_XMC1_Init: CLOCK_XMC1 APP handle pointer uninitialized", (handle != NULL));

  if (handle->init_status == false)
100024b0:	687b      	ldr	r3, [r7, #4]
100024b2:	781b      	ldrb	r3, [r3, #0]
100024b4:	2201      	movs	r2, #1
100024b6:	4053      	eors	r3, r2
100024b8:	b2db      	uxtb	r3, r3
100024ba:	2b00      	cmp	r3, #0
100024bc:	d01b      	beq.n	100024f6 <CLOCK_XMC1_Init+0x76>

#endif
    }

#endif
    status = (CLOCK_XMC1_STATUS_t)(((uint32_t)loci_event_status) | ((uint32_t)stdbyclkfail_status) |
100024be:	230e      	movs	r3, #14
100024c0:	18fa      	adds	r2, r7, r3
100024c2:	230d      	movs	r3, #13
100024c4:	18fb      	adds	r3, r7, r3
100024c6:	7812      	ldrb	r2, [r2, #0]
100024c8:	781b      	ldrb	r3, [r3, #0]
100024ca:	4313      	orrs	r3, r2
100024cc:	b2da      	uxtb	r2, r3
100024ce:	230c      	movs	r3, #12
100024d0:	18fb      	adds	r3, r7, r3
100024d2:	781b      	ldrb	r3, [r3, #0]
100024d4:	4313      	orrs	r3, r2
100024d6:	b2d9      	uxtb	r1, r3
100024d8:	230f      	movs	r3, #15
100024da:	18fb      	adds	r3, r7, r3
100024dc:	220b      	movs	r2, #11
100024de:	18ba      	adds	r2, r7, r2
100024e0:	7812      	ldrb	r2, [r2, #0]
100024e2:	430a      	orrs	r2, r1
100024e4:	701a      	strb	r2, [r3, #0]
    		                       ((uint32_t)loss_ext_clock_event_status) | ((uint32_t)dco1_out_sync_status));
    if (CLOCK_XMC1_STATUS_SUCCESS == status)
100024e6:	230f      	movs	r3, #15
100024e8:	18fb      	adds	r3, r7, r3
100024ea:	781b      	ldrb	r3, [r3, #0]
100024ec:	2b00      	cmp	r3, #0
100024ee:	d102      	bne.n	100024f6 <CLOCK_XMC1_Init+0x76>
    {
      handle->init_status = true;
100024f0:	687b      	ldr	r3, [r7, #4]
100024f2:	2201      	movs	r2, #1
100024f4:	701a      	strb	r2, [r3, #0]
    }
  }
  return (status);
100024f6:	230f      	movs	r3, #15
100024f8:	18fb      	adds	r3, r7, r3
100024fa:	781b      	ldrb	r3, [r3, #0]
}
100024fc:	1c18      	adds	r0, r3, #0
100024fe:	46bd      	mov	sp, r7
10002500:	b004      	add	sp, #16
10002502:	bd80      	pop	{r7, pc}

10002504 <SystemCoreClockSetup>:

/**********************************************************************************************************************
* API IMPLEMENTATION
**********************************************************************************************************************/
void SystemCoreClockSetup(void)
{
10002504:	b590      	push	{r4, r7, lr}
10002506:	b085      	sub	sp, #20
10002508:	af00      	add	r7, sp, #0
/* LOCAL DATA STRUCTURES */
const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC1_0_CONFIG =
1000250a:	1c3b      	adds	r3, r7, #0
1000250c:	4a05      	ldr	r2, [pc, #20]	; (10002524 <SystemCoreClockSetup+0x20>)
1000250e:	ca13      	ldmia	r2!, {r0, r1, r4}
10002510:	c313      	stmia	r3!, {r0, r1, r4}
10002512:	6812      	ldr	r2, [r2, #0]
10002514:	601a      	str	r2, [r3, #0]
  .osclp_mode = XMC_SCU_CLOCK_OSCLP_MODE_DISABLED

};

  /* Configure FDIV, IDIV, PCLKSEL dividers*/
  XMC_SCU_CLOCK_Init(&CLOCK_XMC1_0_CONFIG);
10002516:	1c3b      	adds	r3, r7, #0
10002518:	1c18      	adds	r0, r3, #0
1000251a:	f7fe ff0d 	bl	10001338 <XMC_SCU_CLOCK_Init>
}
1000251e:	46bd      	mov	sp, r7
10002520:	b005      	add	sp, #20
10002522:	bd90      	pop	{r4, r7, pc}
10002524:	10002cdc 	.word	0x10002cdc

10002528 <XMC_CAN_NODE_SetEventNodePointer>:
 */

__STATIC_INLINE void XMC_CAN_NODE_SetEventNodePointer(XMC_CAN_NODE_t *const can_node,
    const XMC_CAN_NODE_POINTER_EVENT_t ptr_event,
    const uint32_t service_request)
{
10002528:	b580      	push	{r7, lr}
1000252a:	b084      	sub	sp, #16
1000252c:	af00      	add	r7, sp, #0
1000252e:	60f8      	str	r0, [r7, #12]
10002530:	607a      	str	r2, [r7, #4]
10002532:	230b      	movs	r3, #11
10002534:	18fb      	adds	r3, r7, r3
10002536:	1c0a      	adds	r2, r1, #0
10002538:	701a      	strb	r2, [r3, #0]
  can_node->NIPR = (uint32_t)((can_node->NIPR) & ~(uint32_t)(CAN_NODE_NIPR_Msk << (uint32_t)ptr_event)) | (service_request << (uint32_t)ptr_event);
1000253a:	68fb      	ldr	r3, [r7, #12]
1000253c:	689b      	ldr	r3, [r3, #8]
1000253e:	220b      	movs	r2, #11
10002540:	18ba      	adds	r2, r7, r2
10002542:	7812      	ldrb	r2, [r2, #0]
10002544:	2107      	movs	r1, #7
10002546:	4091      	lsls	r1, r2
10002548:	1c0a      	adds	r2, r1, #0
1000254a:	43d2      	mvns	r2, r2
1000254c:	401a      	ands	r2, r3
1000254e:	230b      	movs	r3, #11
10002550:	18fb      	adds	r3, r7, r3
10002552:	781b      	ldrb	r3, [r3, #0]
10002554:	6879      	ldr	r1, [r7, #4]
10002556:	4099      	lsls	r1, r3
10002558:	1c0b      	adds	r3, r1, #0
1000255a:	431a      	orrs	r2, r3
1000255c:	68fb      	ldr	r3, [r7, #12]
1000255e:	609a      	str	r2, [r3, #8]
}
10002560:	46bd      	mov	sp, r7
10002562:	b004      	add	sp, #16
10002564:	bd80      	pop	{r7, pc}
10002566:	46c0      	nop			; (mov r8, r8)

10002568 <XMC_CAN_NODE_SetReceiveInput>:
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
    const XMC_CAN_NODE_RECEIVE_INPUT_t input)
{
10002568:	b580      	push	{r7, lr}
1000256a:	b082      	sub	sp, #8
1000256c:	af00      	add	r7, sp, #0
1000256e:	6078      	str	r0, [r7, #4]
10002570:	1c0a      	adds	r2, r1, #0
10002572:	1cfb      	adds	r3, r7, #3
10002574:	701a      	strb	r2, [r3, #0]
  can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
10002576:	687b      	ldr	r3, [r7, #4]
10002578:	68db      	ldr	r3, [r3, #12]
1000257a:	2207      	movs	r2, #7
1000257c:	4393      	bics	r3, r2
1000257e:	1c1a      	adds	r2, r3, #0
                   (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Msk);
10002580:	1cfb      	adds	r3, r7, #3
10002582:	781b      	ldrb	r3, [r3, #0]
10002584:	2107      	movs	r1, #7
10002586:	400b      	ands	r3, r1
 */

__STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
    const XMC_CAN_NODE_RECEIVE_INPUT_t input)
{
  can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
10002588:	431a      	orrs	r2, r3
1000258a:	687b      	ldr	r3, [r7, #4]
1000258c:	60da      	str	r2, [r3, #12]
                   (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Msk);
}
1000258e:	46bd      	mov	sp, r7
10002590:	b002      	add	sp, #8
10002592:	bd80      	pop	{r7, pc}

10002594 <XMC_CAN_NODE_EnableLoopBack>:
 *  NPCRx can be written only if bit NCRx.CCE is set.
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableLoopBack(XMC_CAN_NODE_t *const can_node)
{
10002594:	b580      	push	{r7, lr}
10002596:	b082      	sub	sp, #8
10002598:	af00      	add	r7, sp, #0
1000259a:	6078      	str	r0, [r7, #4]
  can_node->NPCR |= (uint32_t)CAN_NODE_NPCR_LBM_Msk;
1000259c:	687b      	ldr	r3, [r7, #4]
1000259e:	68db      	ldr	r3, [r3, #12]
100025a0:	2280      	movs	r2, #128	; 0x80
100025a2:	0052      	lsls	r2, r2, #1
100025a4:	431a      	orrs	r2, r3
100025a6:	687b      	ldr	r3, [r7, #4]
100025a8:	60da      	str	r2, [r3, #12]
}
100025aa:	46bd      	mov	sp, r7
100025ac:	b002      	add	sp, #8
100025ae:	bd80      	pop	{r7, pc}

100025b0 <XMC_CAN_NODE_EnableConfigurationChange>:
 * XMC_CAN_NODE_DisableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
100025b0:	b580      	push	{r7, lr}
100025b2:	b082      	sub	sp, #8
100025b4:	af00      	add	r7, sp, #0
100025b6:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
100025b8:	687b      	ldr	r3, [r7, #4]
100025ba:	681b      	ldr	r3, [r3, #0]
100025bc:	2240      	movs	r2, #64	; 0x40
100025be:	431a      	orrs	r2, r3
100025c0:	687b      	ldr	r3, [r7, #4]
100025c2:	601a      	str	r2, [r3, #0]
}
100025c4:	46bd      	mov	sp, r7
100025c6:	b002      	add	sp, #8
100025c8:	bd80      	pop	{r7, pc}
100025ca:	46c0      	nop			; (mov r8, r8)

100025cc <XMC_CAN_NODE_DisableConfigurationChange>:
 * XMC_CAN_NODE_EnableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
100025cc:	b580      	push	{r7, lr}
100025ce:	b082      	sub	sp, #8
100025d0:	af00      	add	r7, sp, #0
100025d2:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
100025d4:	687b      	ldr	r3, [r7, #4]
100025d6:	681b      	ldr	r3, [r3, #0]
100025d8:	2240      	movs	r2, #64	; 0x40
100025da:	4393      	bics	r3, r2
100025dc:	1c1a      	adds	r2, r3, #0
100025de:	687b      	ldr	r3, [r7, #4]
100025e0:	601a      	str	r2, [r3, #0]
}
100025e2:	46bd      	mov	sp, r7
100025e4:	b002      	add	sp, #8
100025e6:	bd80      	pop	{r7, pc}

100025e8 <XMC_CAN_NODE_SetInitBit>:
 * XMC_CAN_NODE_ResetInitBit()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_SetInitBit(XMC_CAN_NODE_t *const can_node)
{
100025e8:	b580      	push	{r7, lr}
100025ea:	b082      	sub	sp, #8
100025ec:	af00      	add	r7, sp, #0
100025ee:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_INIT_Msk;
100025f0:	687b      	ldr	r3, [r7, #4]
100025f2:	681b      	ldr	r3, [r3, #0]
100025f4:	2201      	movs	r2, #1
100025f6:	431a      	orrs	r2, r3
100025f8:	687b      	ldr	r3, [r7, #4]
100025fa:	601a      	str	r2, [r3, #0]
}
100025fc:	46bd      	mov	sp, r7
100025fe:	b002      	add	sp, #8
10002600:	bd80      	pop	{r7, pc}
10002602:	46c0      	nop			; (mov r8, r8)

10002604 <XMC_CAN_NODE_ResetInitBit>:
 * \par<b>Related API's:</b><br>
 * XMC_CAN_NODE_SetInitBit()
 *
 */
__STATIC_INLINE void XMC_CAN_NODE_ResetInitBit(XMC_CAN_NODE_t *const can_node)
{
10002604:	b580      	push	{r7, lr}
10002606:	b082      	sub	sp, #8
10002608:	af00      	add	r7, sp, #0
1000260a:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_INIT_Msk;
1000260c:	687b      	ldr	r3, [r7, #4]
1000260e:	681b      	ldr	r3, [r3, #0]
10002610:	2201      	movs	r2, #1
10002612:	4393      	bics	r3, r2
10002614:	1c1a      	adds	r2, r3, #0
10002616:	687b      	ldr	r3, [r7, #4]
10002618:	601a      	str	r2, [r3, #0]
}
1000261a:	46bd      	mov	sp, r7
1000261c:	b002      	add	sp, #8
1000261e:	bd80      	pop	{r7, pc}

10002620 <XMC_CAN_NODE_ReSetAnalyzerMode>:
 * XMC_CAN_NODE_SetAnalyzerMode()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_ReSetAnalyzerMode(XMC_CAN_NODE_t *const can_node)
{
10002620:	b580      	push	{r7, lr}
10002622:	b082      	sub	sp, #8
10002624:	af00      	add	r7, sp, #0
10002626:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CALM_Msk;
10002628:	687b      	ldr	r3, [r7, #4]
1000262a:	681b      	ldr	r3, [r3, #0]
1000262c:	2280      	movs	r2, #128	; 0x80
1000262e:	4393      	bics	r3, r2
10002630:	1c1a      	adds	r2, r3, #0
10002632:	687b      	ldr	r3, [r7, #4]
10002634:	601a      	str	r2, [r3, #0]
}
10002636:	46bd      	mov	sp, r7
10002638:	b002      	add	sp, #8
1000263a:	bd80      	pop	{r7, pc}

1000263c <XMC_CAN_MO_SetEventNodePointer>:
 */

__STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
    const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
    const uint32_t service_request)
{
1000263c:	b580      	push	{r7, lr}
1000263e:	b084      	sub	sp, #16
10002640:	af00      	add	r7, sp, #0
10002642:	60f8      	str	r0, [r7, #12]
10002644:	607a      	str	r2, [r7, #4]
10002646:	230b      	movs	r3, #11
10002648:	18fb      	adds	r3, r7, r3
1000264a:	1c0a      	adds	r2, r1, #0
1000264c:	701a      	strb	r2, [r3, #0]
  can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Msk << (uint32_t)can_mo_ptr_int)) |
1000264e:	68fb      	ldr	r3, [r7, #12]
10002650:	681b      	ldr	r3, [r3, #0]
10002652:	68fa      	ldr	r2, [r7, #12]
10002654:	6812      	ldr	r2, [r2, #0]
10002656:	6892      	ldr	r2, [r2, #8]
10002658:	210b      	movs	r1, #11
1000265a:	1879      	adds	r1, r7, r1
1000265c:	7809      	ldrb	r1, [r1, #0]
1000265e:	2007      	movs	r0, #7
10002660:	4088      	lsls	r0, r1
10002662:	1c01      	adds	r1, r0, #0
10002664:	43c9      	mvns	r1, r1
10002666:	4011      	ands	r1, r2
                              (service_request << (uint32_t)can_mo_ptr_int);
10002668:	220b      	movs	r2, #11
1000266a:	18ba      	adds	r2, r7, r2
1000266c:	7812      	ldrb	r2, [r2, #0]
1000266e:	6878      	ldr	r0, [r7, #4]
10002670:	4090      	lsls	r0, r2
10002672:	1c02      	adds	r2, r0, #0

__STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
    const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
    const uint32_t service_request)
{
  can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Msk << (uint32_t)can_mo_ptr_int)) |
10002674:	430a      	orrs	r2, r1
10002676:	609a      	str	r2, [r3, #8]
                              (service_request << (uint32_t)can_mo_ptr_int);
}
10002678:	46bd      	mov	sp, r7
1000267a:	b004      	add	sp, #16
1000267c:	bd80      	pop	{r7, pc}
1000267e:	46c0      	nop			; (mov r8, r8)

10002680 <XMC_CAN_MO_EnableEvent>:
 *
 */

__STATIC_INLINE void XMC_CAN_MO_EnableEvent(const XMC_CAN_MO_t *const can_mo,
    const uint32_t event)
{
10002680:	b580      	push	{r7, lr}
10002682:	b082      	sub	sp, #8
10002684:	af00      	add	r7, sp, #0
10002686:	6078      	str	r0, [r7, #4]
10002688:	6039      	str	r1, [r7, #0]
  can_mo->can_mo_ptr->MOFCR |= event;
1000268a:	687b      	ldr	r3, [r7, #4]
1000268c:	681b      	ldr	r3, [r3, #0]
1000268e:	687a      	ldr	r2, [r7, #4]
10002690:	6812      	ldr	r2, [r2, #0]
10002692:	6811      	ldr	r1, [r2, #0]
10002694:	683a      	ldr	r2, [r7, #0]
10002696:	430a      	orrs	r2, r1
10002698:	601a      	str	r2, [r3, #0]
}
1000269a:	46bd      	mov	sp, r7
1000269c:	b002      	add	sp, #8
1000269e:	bd80      	pop	{r7, pc}

100026a0 <CAN_NODE_MO_EnableTxEvent>:
 *   return (1);
 * }
 * @endcode
 */
__STATIC_INLINE void CAN_NODE_MO_EnableTxEvent(const CAN_NODE_LMO_t *const can_lmo)
{
100026a0:	b580      	push	{r7, lr}
100026a2:	b082      	sub	sp, #8
100026a4:	af00      	add	r7, sp, #0
100026a6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_EnableTxEvent: null pointer", can_lmo != NULL);
  XMC_CAN_MO_EnableEvent(can_lmo->mo_ptr,XMC_CAN_MO_EVENT_TRANSMIT);
100026a8:	687b      	ldr	r3, [r7, #4]
100026aa:	681a      	ldr	r2, [r3, #0]
100026ac:	2380      	movs	r3, #128	; 0x80
100026ae:	029b      	lsls	r3, r3, #10
100026b0:	1c10      	adds	r0, r2, #0
100026b2:	1c19      	adds	r1, r3, #0
100026b4:	f7ff ffe4 	bl	10002680 <XMC_CAN_MO_EnableEvent>
}
100026b8:	46bd      	mov	sp, r7
100026ba:	b002      	add	sp, #8
100026bc:	bd80      	pop	{r7, pc}
100026be:	46c0      	nop			; (mov r8, r8)

100026c0 <CAN_NODE_MO_EnableRxEvent>:
 *   return (1);
 * }
 * @endcode
 */
__STATIC_INLINE void CAN_NODE_MO_EnableRxEvent(const CAN_NODE_LMO_t *const can_lmo)
{
100026c0:	b580      	push	{r7, lr}
100026c2:	b082      	sub	sp, #8
100026c4:	af00      	add	r7, sp, #0
100026c6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_EnableRxEvent: null pointer", can_lmo != NULL);
  XMC_CAN_MO_EnableEvent(can_lmo->mo_ptr,XMC_CAN_MO_EVENT_RECEIVE);
100026c8:	687b      	ldr	r3, [r7, #4]
100026ca:	681a      	ldr	r2, [r3, #0]
100026cc:	2380      	movs	r3, #128	; 0x80
100026ce:	025b      	lsls	r3, r3, #9
100026d0:	1c10      	adds	r0, r2, #0
100026d2:	1c19      	adds	r1, r3, #0
100026d4:	f7ff ffd4 	bl	10002680 <XMC_CAN_MO_EnableEvent>
}
100026d8:	46bd      	mov	sp, r7
100026da:	b002      	add	sp, #8
100026dc:	bd80      	pop	{r7, pc}
100026de:	46c0      	nop			; (mov r8, r8)

100026e0 <CAN_NODE_SetNodeEvents>:
  * @param  handle is a pointer pointing to APP data structure.
  * @return None
  */

static void CAN_NODE_SetNodeEvents(const CAN_NODE_t *handle)
{
100026e0:	b580      	push	{r7, lr}
100026e2:	b084      	sub	sp, #16
100026e4:	af00      	add	r7, sp, #0
100026e6:	6078      	str	r0, [r7, #4]
  uint32_t lnode_event = 0U;
100026e8:	2300      	movs	r3, #0
100026ea:	60fb      	str	r3, [r7, #12]

  XMC_ASSERT("CAN_NODE_lInit: handle null", handle != NULL);

  CAN_NODE_SetNodePointer(handle); /* set node service pointer */
100026ec:	687b      	ldr	r3, [r7, #4]
100026ee:	1c18      	adds	r0, r3, #0
100026f0:	f000 f832 	bl	10002758 <CAN_NODE_SetNodePointer>

  if (handle->txok_event_enable == true)
100026f4:	687b      	ldr	r3, [r7, #4]
100026f6:	22a4      	movs	r2, #164	; 0xa4
100026f8:	5c9b      	ldrb	r3, [r3, r2]
100026fa:	2b00      	cmp	r3, #0
100026fc:	d003      	beq.n	10002706 <CAN_NODE_SetNodeEvents+0x26>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_TX_INT;
100026fe:	68fb      	ldr	r3, [r7, #12]
10002700:	2202      	movs	r2, #2
10002702:	4313      	orrs	r3, r2
10002704:	60fb      	str	r3, [r7, #12]
  }
  if (handle->lec_event_enable == true)
10002706:	687b      	ldr	r3, [r7, #4]
10002708:	22a3      	movs	r2, #163	; 0xa3
1000270a:	5c9b      	ldrb	r3, [r3, r2]
1000270c:	2b00      	cmp	r3, #0
1000270e:	d003      	beq.n	10002718 <CAN_NODE_SetNodeEvents+0x38>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_LEC;
10002710:	68fb      	ldr	r3, [r7, #12]
10002712:	2204      	movs	r2, #4
10002714:	4313      	orrs	r3, r2
10002716:	60fb      	str	r3, [r7, #12]
  }
  if (handle->alert_event_enable == true)
10002718:	687b      	ldr	r3, [r7, #4]
1000271a:	22a5      	movs	r2, #165	; 0xa5
1000271c:	5c9b      	ldrb	r3, [r3, r2]
1000271e:	2b00      	cmp	r3, #0
10002720:	d003      	beq.n	1000272a <CAN_NODE_SetNodeEvents+0x4a>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_ALERT;
10002722:	68fb      	ldr	r3, [r7, #12]
10002724:	2208      	movs	r2, #8
10002726:	4313      	orrs	r3, r2
10002728:	60fb      	str	r3, [r7, #12]
  }
  XMC_CAN_NODE_EnableEvent(handle->node_ptr, (XMC_CAN_NODE_EVENT_t)lnode_event);
1000272a:	687b      	ldr	r3, [r7, #4]
1000272c:	685a      	ldr	r2, [r3, #4]
1000272e:	68fb      	ldr	r3, [r7, #12]
10002730:	1c10      	adds	r0, r2, #0
10002732:	1c19      	adds	r1, r3, #0
10002734:	f7ff faea 	bl	10001d0c <XMC_CAN_NODE_EnableEvent>

  if (handle->framecount_event_enable == true)
10002738:	687b      	ldr	r3, [r7, #4]
1000273a:	22a6      	movs	r2, #166	; 0xa6
1000273c:	5c9b      	ldrb	r3, [r3, r2]
1000273e:	2b00      	cmp	r3, #0
10002740:	d007      	beq.n	10002752 <CAN_NODE_SetNodeEvents+0x72>
  {
    XMC_CAN_NODE_EnableEvent(handle->node_ptr, XMC_CAN_NODE_EVENT_CFCIE);
10002742:	687b      	ldr	r3, [r7, #4]
10002744:	685a      	ldr	r2, [r3, #4]
10002746:	2380      	movs	r3, #128	; 0x80
10002748:	03db      	lsls	r3, r3, #15
1000274a:	1c10      	adds	r0, r2, #0
1000274c:	1c19      	adds	r1, r3, #0
1000274e:	f7ff fadd 	bl	10001d0c <XMC_CAN_NODE_EnableEvent>
  }

}
10002752:	46bd      	mov	sp, r7
10002754:	b004      	add	sp, #16
10002756:	bd80      	pop	{r7, pc}

10002758 <CAN_NODE_SetNodePointer>:
  * @brief  Function to set the Node event pointer
  *
  */

static void CAN_NODE_SetNodePointer(const CAN_NODE_t *handle)
{
10002758:	b580      	push	{r7, lr}
1000275a:	b082      	sub	sp, #8
1000275c:	af00      	add	r7, sp, #0
1000275e:	6078      	str	r0, [r7, #4]

  XMC_ASSERT("CAN_NODE_SetNodePointer: handle null", handle != NULL);

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
10002760:	687b      	ldr	r3, [r7, #4]
10002762:	6859      	ldr	r1, [r3, #4]
                                                        handle->node_sr_ptr->alert_event_sr);
10002764:	687b      	ldr	r3, [r7, #4]
10002766:	228c      	movs	r2, #140	; 0x8c
10002768:	589b      	ldr	r3, [r3, r2]
1000276a:	781b      	ldrb	r3, [r3, #0]
{

  XMC_ASSERT("CAN_NODE_SetNodePointer: handle null", handle != NULL);

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
1000276c:	1c08      	adds	r0, r1, #0
1000276e:	2100      	movs	r1, #0
10002770:	1c1a      	adds	r2, r3, #0
10002772:	f7ff fed9 	bl	10002528 <XMC_CAN_NODE_SetEventNodePointer>
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
10002776:	687b      	ldr	r3, [r7, #4]
10002778:	6859      	ldr	r1, [r3, #4]
                                                         handle->node_sr_ptr->lec_event_sr);
1000277a:	687b      	ldr	r3, [r7, #4]
1000277c:	228c      	movs	r2, #140	; 0x8c
1000277e:	589b      	ldr	r3, [r3, r2]
10002780:	785b      	ldrb	r3, [r3, #1]

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
10002782:	1c08      	adds	r0, r1, #0
10002784:	2104      	movs	r1, #4
10002786:	1c1a      	adds	r2, r3, #0
10002788:	f7ff fece 	bl	10002528 <XMC_CAN_NODE_SetEventNodePointer>
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
1000278c:	687b      	ldr	r3, [r7, #4]
1000278e:	6859      	ldr	r1, [r3, #4]
                                                               handle->node_sr_ptr->txok_event_sr);
10002790:	687b      	ldr	r3, [r7, #4]
10002792:	228c      	movs	r2, #140	; 0x8c
10002794:	589b      	ldr	r3, [r3, r2]
10002796:	789b      	ldrb	r3, [r3, #2]
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
10002798:	1c08      	adds	r0, r1, #0
1000279a:	2108      	movs	r1, #8
1000279c:	1c1a      	adds	r2, r3, #0
1000279e:	f7ff fec3 	bl	10002528 <XMC_CAN_NODE_SetEventNodePointer>
                                                               handle->node_sr_ptr->txok_event_sr);
  /* Configured the node event pointer for the Frame counter event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER,
100027a2:	687b      	ldr	r3, [r7, #4]
100027a4:	6859      	ldr	r1, [r3, #4]
                                                             handle->node_sr_ptr->framecount_event_sr);
100027a6:	687b      	ldr	r3, [r7, #4]
100027a8:	228c      	movs	r2, #140	; 0x8c
100027aa:	589b      	ldr	r3, [r3, r2]
100027ac:	78db      	ldrb	r3, [r3, #3]
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
                                                               handle->node_sr_ptr->txok_event_sr);
  /* Configured the node event pointer for the Frame counter event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER,
100027ae:	1c08      	adds	r0, r1, #0
100027b0:	210c      	movs	r1, #12
100027b2:	1c1a      	adds	r2, r3, #0
100027b4:	f7ff feb8 	bl	10002528 <XMC_CAN_NODE_SetEventNodePointer>
                                                             handle->node_sr_ptr->framecount_event_sr);

}
100027b8:	46bd      	mov	sp, r7
100027ba:	b002      	add	sp, #8
100027bc:	bd80      	pop	{r7, pc}
100027be:	46c0      	nop			; (mov r8, r8)

100027c0 <CAN_NODE_MO_Init>:
  XMC_CAN_NODE_NominalBitTimeConfigure(can_node, can_bit_time);
}

/*  Function to initialize the CAN MO based on UI configuration. */
void CAN_NODE_MO_Init(const CAN_NODE_LMO_t *lmo_ptr)
{
100027c0:	b580      	push	{r7, lr}
100027c2:	b082      	sub	sp, #8
100027c4:	af00      	add	r7, sp, #0
100027c6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_Init: lmo_ptr null", lmo_ptr != NULL);

  XMC_CAN_MO_Config(lmo_ptr->mo_ptr);
100027c8:	687b      	ldr	r3, [r7, #4]
100027ca:	681b      	ldr	r3, [r3, #0]
100027cc:	1c18      	adds	r0, r3, #0
100027ce:	f7ff f983 	bl	10001ad8 <XMC_CAN_MO_Config>

  if (lmo_ptr->tx_event_enable == true)
100027d2:	687b      	ldr	r3, [r7, #4]
100027d4:	79db      	ldrb	r3, [r3, #7]
100027d6:	2b00      	cmp	r3, #0
100027d8:	d00c      	beq.n	100027f4 <CAN_NODE_MO_Init+0x34>
  {
    XMC_CAN_MO_SetEventNodePointer(lmo_ptr->mo_ptr, XMC_CAN_MO_POINTER_EVENT_TRANSMIT, lmo_ptr->tx_sr);
100027da:	687b      	ldr	r3, [r7, #4]
100027dc:	681a      	ldr	r2, [r3, #0]
100027de:	687b      	ldr	r3, [r7, #4]
100027e0:	795b      	ldrb	r3, [r3, #5]
100027e2:	1c10      	adds	r0, r2, #0
100027e4:	2104      	movs	r1, #4
100027e6:	1c1a      	adds	r2, r3, #0
100027e8:	f7ff ff28 	bl	1000263c <XMC_CAN_MO_SetEventNodePointer>
    CAN_NODE_MO_EnableTxEvent(lmo_ptr);
100027ec:	687b      	ldr	r3, [r7, #4]
100027ee:	1c18      	adds	r0, r3, #0
100027f0:	f7ff ff56 	bl	100026a0 <CAN_NODE_MO_EnableTxEvent>
  }
  if (lmo_ptr->rx_event_enable == true)
100027f4:	687b      	ldr	r3, [r7, #4]
100027f6:	7a1b      	ldrb	r3, [r3, #8]
100027f8:	2b00      	cmp	r3, #0
100027fa:	d00c      	beq.n	10002816 <CAN_NODE_MO_Init+0x56>
  {
    XMC_CAN_MO_SetEventNodePointer(lmo_ptr->mo_ptr, XMC_CAN_MO_POINTER_EVENT_RECEIVE, lmo_ptr->rx_sr);
100027fc:	687b      	ldr	r3, [r7, #4]
100027fe:	681a      	ldr	r2, [r3, #0]
10002800:	687b      	ldr	r3, [r7, #4]
10002802:	799b      	ldrb	r3, [r3, #6]
10002804:	1c10      	adds	r0, r2, #0
10002806:	2100      	movs	r1, #0
10002808:	1c1a      	adds	r2, r3, #0
1000280a:	f7ff ff17 	bl	1000263c <XMC_CAN_MO_SetEventNodePointer>
    CAN_NODE_MO_EnableRxEvent(lmo_ptr);
1000280e:	687b      	ldr	r3, [r7, #4]
10002810:	1c18      	adds	r0, r3, #0
10002812:	f7ff ff55 	bl	100026c0 <CAN_NODE_MO_EnableRxEvent>
  }

}
10002816:	46bd      	mov	sp, r7
10002818:	b002      	add	sp, #8
1000281a:	bd80      	pop	{r7, pc}

1000281c <CAN_NODE_MO_Transmit>:

/* Function to transmit the can MO frame.  */
CAN_NODE_STATUS_t CAN_NODE_MO_Transmit(const CAN_NODE_LMO_t *lmo_ptr)
{
1000281c:	b590      	push	{r4, r7, lr}
1000281e:	b085      	sub	sp, #20
10002820:	af00      	add	r7, sp, #0
10002822:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
10002824:	230f      	movs	r3, #15
10002826:	18fb      	adds	r3, r7, r3
10002828:	2200      	movs	r2, #0
1000282a:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("CAN_NODE_MO_Transmit: lmo_ptr null", lmo_ptr != NULL);

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_Transmit(lmo_ptr->mo_ptr);
1000282c:	687b      	ldr	r3, [r7, #4]
1000282e:	681b      	ldr	r3, [r3, #0]
10002830:	220f      	movs	r2, #15
10002832:	18bc      	adds	r4, r7, r2
10002834:	1c18      	adds	r0, r3, #0
10002836:	f7ff fa31 	bl	10001c9c <XMC_CAN_MO_Transmit>
1000283a:	1c03      	adds	r3, r0, #0
1000283c:	7023      	strb	r3, [r4, #0]
  return (status);
1000283e:	230f      	movs	r3, #15
10002840:	18fb      	adds	r3, r7, r3
10002842:	781b      	ldrb	r3, [r3, #0]
}
10002844:	1c18      	adds	r0, r3, #0
10002846:	46bd      	mov	sp, r7
10002848:	b005      	add	sp, #20
1000284a:	bd90      	pop	{r4, r7, pc}

1000284c <CAN_NODE_MO_UpdateData>:
  return (status);
}

/* Function to updates the data for the CAN Message Object. */
CAN_NODE_STATUS_t CAN_NODE_MO_UpdateData(const CAN_NODE_LMO_t *const lmo_ptr, uint8_t *array_data)
{
1000284c:	b590      	push	{r4, r7, lr}
1000284e:	b085      	sub	sp, #20
10002850:	af00      	add	r7, sp, #0
10002852:	6078      	str	r0, [r7, #4]
10002854:	6039      	str	r1, [r7, #0]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
10002856:	230f      	movs	r3, #15
10002858:	18fb      	adds	r3, r7, r3
1000285a:	2200      	movs	r2, #0
1000285c:	701a      	strb	r2, [r3, #0]
  uint32_t *data_pointer = (uint32_t*) array_data;
1000285e:	683b      	ldr	r3, [r7, #0]
10002860:	60bb      	str	r3, [r7, #8]

  XMC_ASSERT("CAN_NODE_MO_UpdateData: lmo_ptr null", lmo_ptr != NULL);

  lmo_ptr->mo_ptr->can_data[0U] = *data_pointer;
10002862:	687b      	ldr	r3, [r7, #4]
10002864:	681b      	ldr	r3, [r3, #0]
10002866:	68ba      	ldr	r2, [r7, #8]
10002868:	6812      	ldr	r2, [r2, #0]
1000286a:	611a      	str	r2, [r3, #16]
  lmo_ptr->mo_ptr->can_data[1U] = *(data_pointer + 1U);
1000286c:	687b      	ldr	r3, [r7, #4]
1000286e:	681b      	ldr	r3, [r3, #0]
10002870:	68ba      	ldr	r2, [r7, #8]
10002872:	6852      	ldr	r2, [r2, #4]
10002874:	615a      	str	r2, [r3, #20]

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_UpdateData(lmo_ptr->mo_ptr);
10002876:	687b      	ldr	r3, [r7, #4]
10002878:	681b      	ldr	r3, [r3, #0]
1000287a:	220f      	movs	r2, #15
1000287c:	18bc      	adds	r4, r7, r2
1000287e:	1c18      	adds	r0, r3, #0
10002880:	f7ff f9ca 	bl	10001c18 <XMC_CAN_MO_UpdateData>
10002884:	1c03      	adds	r3, r0, #0
10002886:	7023      	strb	r3, [r4, #0]
  return (status);
10002888:	230f      	movs	r3, #15
1000288a:	18fb      	adds	r3, r7, r3
1000288c:	781b      	ldrb	r3, [r3, #0]
}
1000288e:	1c18      	adds	r0, r3, #0
10002890:	46bd      	mov	sp, r7
10002892:	b005      	add	sp, #20
10002894:	bd90      	pop	{r4, r7, pc}
10002896:	46c0      	nop			; (mov r8, r8)

10002898 <CAN_NODE_Init>:
/*  Function to initialize the CAN node by configuring the baud rate, can bus type (External or internal)
 *  and message objects.
 */

CAN_NODE_STATUS_t CAN_NODE_Init(const CAN_NODE_t* handle)
{
10002898:	b590      	push	{r4, r7, lr}
1000289a:	b087      	sub	sp, #28
1000289c:	af00      	add	r7, sp, #0
1000289e:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
100028a0:	2317      	movs	r3, #23
100028a2:	18fb      	adds	r3, r7, r3
100028a4:	2200      	movs	r2, #0
100028a6:	701a      	strb	r2, [r3, #0]
  uint32_t loop_count;
  const CAN_NODE_LMO_t *lmo_ptr;

  XMC_ASSERT("CAN_NODE_Init: handle null", handle != NULL);

  const CAN_NODE_GPIO_t *const lgpio_ptr = handle->gpio_out;
100028a8:	687b      	ldr	r3, [r7, #4]
100028aa:	2290      	movs	r2, #144	; 0x90
100028ac:	589b      	ldr	r3, [r3, r2]
100028ae:	60fb      	str	r3, [r7, #12]

  /* Initialize the GLOBAL_CAN APP */
  status  = (CAN_NODE_STATUS_t)GLOBAL_CAN_Init(handle->global_ptr);
100028b0:	687b      	ldr	r3, [r7, #4]
100028b2:	681b      	ldr	r3, [r3, #0]
100028b4:	2217      	movs	r2, #23
100028b6:	18bc      	adds	r4, r7, r2
100028b8:	1c18      	adds	r0, r3, #0
100028ba:	f7ff fd8d 	bl	100023d8 <GLOBAL_CAN_Init>
100028be:	1c03      	adds	r3, r0, #0
100028c0:	7023      	strb	r3, [r4, #0]

  if (status == CAN_NODE_STATUS_SUCCESS)
100028c2:	2317      	movs	r3, #23
100028c4:	18fb      	adds	r3, r7, r3
100028c6:	781b      	ldrb	r3, [r3, #0]
100028c8:	2b00      	cmp	r3, #0
100028ca:	d000      	beq.n	100028ce <CAN_NODE_Init+0x36>
100028cc:	e085      	b.n	100029da <CAN_NODE_Init+0x142>
  {
    /* Initialize the GUI configured values for baud rate to NBTR Reg */
    if (XMC_CAN_NODE_NominalBitTimeConfigureEx(handle->node_ptr, handle->baudrate_config) == XMC_CAN_STATUS_SUCCESS)
100028ce:	687b      	ldr	r3, [r7, #4]
100028d0:	685a      	ldr	r2, [r3, #4]
100028d2:	687b      	ldr	r3, [r7, #4]
100028d4:	689b      	ldr	r3, [r3, #8]
100028d6:	1c10      	adds	r0, r2, #0
100028d8:	1c19      	adds	r1, r3, #0
100028da:	f7fe ff71 	bl	100017c0 <XMC_CAN_NODE_NominalBitTimeConfigureEx>
100028de:	1e03      	subs	r3, r0, #0
100028e0:	d176      	bne.n	100029d0 <CAN_NODE_Init+0x138>
    {
      /* set CCE and INIT bit NCR for node configuration */

      XMC_CAN_NODE_EnableConfigurationChange(handle->node_ptr);
100028e2:	687b      	ldr	r3, [r7, #4]
100028e4:	685b      	ldr	r3, [r3, #4]
100028e6:	1c18      	adds	r0, r3, #0
100028e8:	f7ff fe62 	bl	100025b0 <XMC_CAN_NODE_EnableConfigurationChange>
      XMC_CAN_NODE_SetInitBit(handle->node_ptr);
100028ec:	687b      	ldr	r3, [r7, #4]
100028ee:	685b      	ldr	r3, [r3, #4]
100028f0:	1c18      	adds	r0, r3, #0
100028f2:	f7ff fe79 	bl	100025e8 <XMC_CAN_NODE_SetInitBit>
      XMC_CAN_NODE_ReSetAnalyzerMode(handle->node_ptr);
100028f6:	687b      	ldr	r3, [r7, #4]
100028f8:	685b      	ldr	r3, [r3, #4]
100028fa:	1c18      	adds	r0, r3, #0
100028fc:	f7ff fe90 	bl	10002620 <XMC_CAN_NODE_ReSetAnalyzerMode>

      if (handle->loopback_enable == true) /* Loop back mode enabled */
10002900:	687b      	ldr	r3, [r7, #4]
10002902:	22a7      	movs	r2, #167	; 0xa7
10002904:	5c9b      	ldrb	r3, [r3, r2]
10002906:	2b00      	cmp	r3, #0
10002908:	d005      	beq.n	10002916 <CAN_NODE_Init+0x7e>
      {
        XMC_CAN_NODE_EnableLoopBack(handle->node_ptr);
1000290a:	687b      	ldr	r3, [r7, #4]
1000290c:	685b      	ldr	r3, [r3, #4]
1000290e:	1c18      	adds	r0, r3, #0
10002910:	f7ff fe40 	bl	10002594 <XMC_CAN_NODE_EnableLoopBack>
10002914:	e016      	b.n	10002944 <CAN_NODE_Init+0xac>
      }
      else
      {
        XMC_GPIO_Init(handle->gpio_in->port, handle->gpio_in->pin, handle->gpio_in_config);
10002916:	687b      	ldr	r3, [r7, #4]
10002918:	2298      	movs	r2, #152	; 0x98
1000291a:	589b      	ldr	r3, [r3, r2]
1000291c:	6818      	ldr	r0, [r3, #0]
1000291e:	687b      	ldr	r3, [r7, #4]
10002920:	2298      	movs	r2, #152	; 0x98
10002922:	589b      	ldr	r3, [r3, r2]
10002924:	7919      	ldrb	r1, [r3, #4]
10002926:	687b      	ldr	r3, [r7, #4]
10002928:	229c      	movs	r2, #156	; 0x9c
1000292a:	589b      	ldr	r3, [r3, r2]
1000292c:	1c1a      	adds	r2, r3, #0
1000292e:	f7fe fc2b 	bl	10001188 <XMC_GPIO_Init>
        XMC_CAN_NODE_SetReceiveInput(handle->node_ptr, handle->rx_signal);
10002932:	687b      	ldr	r3, [r7, #4]
10002934:	6859      	ldr	r1, [r3, #4]
10002936:	687b      	ldr	r3, [r7, #4]
10002938:	22a0      	movs	r2, #160	; 0xa0
1000293a:	5c9b      	ldrb	r3, [r3, r2]
1000293c:	1c08      	adds	r0, r1, #0
1000293e:	1c19      	adds	r1, r3, #0
10002940:	f7ff fe12 	bl	10002568 <XMC_CAN_NODE_SetReceiveInput>
      }
      CAN_NODE_SetNodeEvents(handle); /* API to enable node events */
10002944:	687b      	ldr	r3, [r7, #4]
10002946:	1c18      	adds	r0, r3, #0
10002948:	f7ff feca 	bl	100026e0 <CAN_NODE_SetNodeEvents>

      for (loop_count = 0U; loop_count < handle->mo_count; loop_count++)
1000294c:	2300      	movs	r3, #0
1000294e:	613b      	str	r3, [r7, #16]
10002950:	e01a      	b.n	10002988 <CAN_NODE_Init+0xf0>
      {
        lmo_ptr = handle->lmobj_ptr[loop_count];
10002952:	687a      	ldr	r2, [r7, #4]
10002954:	693b      	ldr	r3, [r7, #16]
10002956:	3302      	adds	r3, #2
10002958:	009b      	lsls	r3, r3, #2
1000295a:	18d3      	adds	r3, r2, r3
1000295c:	685b      	ldr	r3, [r3, #4]
1000295e:	60bb      	str	r3, [r7, #8]
        XMC_CAN_AllocateMOtoNodeList(handle->global_ptr->canglobal_ptr, handle->node_num, lmo_ptr->number);
10002960:	687b      	ldr	r3, [r7, #4]
10002962:	681b      	ldr	r3, [r3, #0]
10002964:	6859      	ldr	r1, [r3, #4]
10002966:	687b      	ldr	r3, [r7, #4]
10002968:	22a1      	movs	r2, #161	; 0xa1
1000296a:	5c9a      	ldrb	r2, [r3, r2]
1000296c:	68bb      	ldr	r3, [r7, #8]
1000296e:	791b      	ldrb	r3, [r3, #4]
10002970:	1c08      	adds	r0, r1, #0
10002972:	1c11      	adds	r1, r2, #0
10002974:	1c1a      	adds	r2, r3, #0
10002976:	f7fe ffd1 	bl	1000191c <XMC_CAN_AllocateMOtoNodeList>
        CAN_NODE_MO_Init(lmo_ptr);
1000297a:	68bb      	ldr	r3, [r7, #8]
1000297c:	1c18      	adds	r0, r3, #0
1000297e:	f7ff ff1f 	bl	100027c0 <CAN_NODE_MO_Init>
        XMC_GPIO_Init(handle->gpio_in->port, handle->gpio_in->pin, handle->gpio_in_config);
        XMC_CAN_NODE_SetReceiveInput(handle->node_ptr, handle->rx_signal);
      }
      CAN_NODE_SetNodeEvents(handle); /* API to enable node events */

      for (loop_count = 0U; loop_count < handle->mo_count; loop_count++)
10002982:	693b      	ldr	r3, [r7, #16]
10002984:	3301      	adds	r3, #1
10002986:	613b      	str	r3, [r7, #16]
10002988:	687b      	ldr	r3, [r7, #4]
1000298a:	22a2      	movs	r2, #162	; 0xa2
1000298c:	5c9b      	ldrb	r3, [r3, r2]
1000298e:	1e1a      	subs	r2, r3, #0
10002990:	693b      	ldr	r3, [r7, #16]
10002992:	429a      	cmp	r2, r3
10002994:	d8dd      	bhi.n	10002952 <CAN_NODE_Init+0xba>
        lmo_ptr = handle->lmobj_ptr[loop_count];
        XMC_CAN_AllocateMOtoNodeList(handle->global_ptr->canglobal_ptr, handle->node_num, lmo_ptr->number);
        CAN_NODE_MO_Init(lmo_ptr);
      }
      /* reset CCE and INIT bit NCR for node configuration */
      XMC_CAN_NODE_DisableConfigurationChange(handle->node_ptr);
10002996:	687b      	ldr	r3, [r7, #4]
10002998:	685b      	ldr	r3, [r3, #4]
1000299a:	1c18      	adds	r0, r3, #0
1000299c:	f7ff fe16 	bl	100025cc <XMC_CAN_NODE_DisableConfigurationChange>
      XMC_CAN_NODE_ResetInitBit(handle->node_ptr);
100029a0:	687b      	ldr	r3, [r7, #4]
100029a2:	685b      	ldr	r3, [r3, #4]
100029a4:	1c18      	adds	r0, r3, #0
100029a6:	f7ff fe2d 	bl	10002604 <XMC_CAN_NODE_ResetInitBit>
      if (handle->loopback_enable == false)
100029aa:	687b      	ldr	r3, [r7, #4]
100029ac:	22a7      	movs	r2, #167	; 0xa7
100029ae:	5c9b      	ldrb	r3, [r3, r2]
100029b0:	2201      	movs	r2, #1
100029b2:	4053      	eors	r3, r2
100029b4:	b2db      	uxtb	r3, r3
100029b6:	2b00      	cmp	r3, #0
100029b8:	d013      	beq.n	100029e2 <CAN_NODE_Init+0x14a>
      {
        /* CAN transmit pin configuration */
        XMC_GPIO_Init(lgpio_ptr->port, lgpio_ptr->pin, handle->gpio_out_config);
100029ba:	68fb      	ldr	r3, [r7, #12]
100029bc:	6818      	ldr	r0, [r3, #0]
100029be:	68fb      	ldr	r3, [r7, #12]
100029c0:	7919      	ldrb	r1, [r3, #4]
100029c2:	687b      	ldr	r3, [r7, #4]
100029c4:	2294      	movs	r2, #148	; 0x94
100029c6:	589b      	ldr	r3, [r3, r2]
100029c8:	1c1a      	adds	r2, r3, #0
100029ca:	f7fe fbdd 	bl	10001188 <XMC_GPIO_Init>
100029ce:	e008      	b.n	100029e2 <CAN_NODE_Init+0x14a>
      }
    }
    else
    {
      status = CAN_NODE_STATUS_FAILURE;
100029d0:	2317      	movs	r3, #23
100029d2:	18fb      	adds	r3, r7, r3
100029d4:	2201      	movs	r2, #1
100029d6:	701a      	strb	r2, [r3, #0]
100029d8:	e003      	b.n	100029e2 <CAN_NODE_Init+0x14a>
    }
  }
  else
  {
    status = CAN_NODE_STATUS_FAILURE;
100029da:	2317      	movs	r3, #23
100029dc:	18fb      	adds	r3, r7, r3
100029de:	2201      	movs	r2, #1
100029e0:	701a      	strb	r2, [r3, #0]
  }

  return (status);
100029e2:	2317      	movs	r3, #23
100029e4:	18fb      	adds	r3, r7, r3
100029e6:	781b      	ldrb	r3, [r3, #0]
}
100029e8:	1c18      	adds	r0, r3, #0
100029ea:	46bd      	mov	sp, r7
100029ec:	b007      	add	sp, #28
100029ee:	bd90      	pop	{r4, r7, pc}

100029f0 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
100029f0:	b590      	push	{r4, r7, lr}
100029f2:	b083      	sub	sp, #12
100029f4:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
100029f6:	1dfb      	adds	r3, r7, #7
100029f8:	2200      	movs	r2, #0
100029fa:	701a      	strb	r2, [r3, #0]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC1_Init(&CLOCK_XMC1_0);
100029fc:	1dfc      	adds	r4, r7, #7
100029fe:	4b2c      	ldr	r3, [pc, #176]	; (10002ab0 <DAVE_Init+0xc0>)
10002a00:	1c18      	adds	r0, r3, #0
10002a02:	f7ff fd3d 	bl	10002480 <CLOCK_XMC1_Init>
10002a06:	1c03      	adds	r3, r0, #0
10002a08:	7023      	strb	r3, [r4, #0]

  if (init_status == DAVE_STATUS_SUCCESS)
10002a0a:	1dfb      	adds	r3, r7, #7
10002a0c:	781b      	ldrb	r3, [r3, #0]
10002a0e:	2b00      	cmp	r3, #0
10002a10:	d106      	bne.n	10002a20 <DAVE_Init+0x30>
  {
	 /**  Initialization of CAN_NODE APP instance CAN_NODE_0 */
	 init_status = (DAVE_STATUS_t)CAN_NODE_Init(&CAN_NODE_0); 
10002a12:	1dfc      	adds	r4, r7, #7
10002a14:	4b27      	ldr	r3, [pc, #156]	; (10002ab4 <DAVE_Init+0xc4>)
10002a16:	1c18      	adds	r0, r3, #0
10002a18:	f7ff ff3e 	bl	10002898 <CAN_NODE_Init>
10002a1c:	1c03      	adds	r3, r0, #0
10002a1e:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10002a20:	1dfb      	adds	r3, r7, #7
10002a22:	781b      	ldrb	r3, [r3, #0]
10002a24:	2b00      	cmp	r3, #0
10002a26:	d106      	bne.n	10002a36 <DAVE_Init+0x46>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_0 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0); 
10002a28:	1dfc      	adds	r4, r7, #7
10002a2a:	4b23      	ldr	r3, [pc, #140]	; (10002ab8 <DAVE_Init+0xc8>)
10002a2c:	1c18      	adds	r0, r3, #0
10002a2e:	f7ff fcfb 	bl	10002428 <DIGITAL_IO_Init>
10002a32:	1c03      	adds	r3, r0, #0
10002a34:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10002a36:	1dfb      	adds	r3, r7, #7
10002a38:	781b      	ldrb	r3, [r3, #0]
10002a3a:	2b00      	cmp	r3, #0
10002a3c:	d106      	bne.n	10002a4c <DAVE_Init+0x5c>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_1 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_1); 
10002a3e:	1dfc      	adds	r4, r7, #7
10002a40:	4b1e      	ldr	r3, [pc, #120]	; (10002abc <DAVE_Init+0xcc>)
10002a42:	1c18      	adds	r0, r3, #0
10002a44:	f7ff fcf0 	bl	10002428 <DIGITAL_IO_Init>
10002a48:	1c03      	adds	r3, r0, #0
10002a4a:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10002a4c:	1dfb      	adds	r3, r7, #7
10002a4e:	781b      	ldrb	r3, [r3, #0]
10002a50:	2b00      	cmp	r3, #0
10002a52:	d106      	bne.n	10002a62 <DAVE_Init+0x72>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_2 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_2); 
10002a54:	1dfc      	adds	r4, r7, #7
10002a56:	4b1a      	ldr	r3, [pc, #104]	; (10002ac0 <DAVE_Init+0xd0>)
10002a58:	1c18      	adds	r0, r3, #0
10002a5a:	f7ff fce5 	bl	10002428 <DIGITAL_IO_Init>
10002a5e:	1c03      	adds	r3, r0, #0
10002a60:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10002a62:	1dfb      	adds	r3, r7, #7
10002a64:	781b      	ldrb	r3, [r3, #0]
10002a66:	2b00      	cmp	r3, #0
10002a68:	d106      	bne.n	10002a78 <DAVE_Init+0x88>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_3 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_3); 
10002a6a:	1dfc      	adds	r4, r7, #7
10002a6c:	4b15      	ldr	r3, [pc, #84]	; (10002ac4 <DAVE_Init+0xd4>)
10002a6e:	1c18      	adds	r0, r3, #0
10002a70:	f7ff fcda 	bl	10002428 <DIGITAL_IO_Init>
10002a74:	1c03      	adds	r3, r0, #0
10002a76:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10002a78:	1dfb      	adds	r3, r7, #7
10002a7a:	781b      	ldrb	r3, [r3, #0]
10002a7c:	2b00      	cmp	r3, #0
10002a7e:	d106      	bne.n	10002a8e <DAVE_Init+0x9e>
  {
	 /**  Initialization of INTERRUPT APP instance INTERRUPT_0 */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INTERRUPT_0); 
10002a80:	1dfc      	adds	r4, r7, #7
10002a82:	4b11      	ldr	r3, [pc, #68]	; (10002ac8 <DAVE_Init+0xd8>)
10002a84:	1c18      	adds	r0, r3, #0
10002a86:	f7ff fc4f 	bl	10002328 <INTERRUPT_Init>
10002a8a:	1c03      	adds	r3, r0, #0
10002a8c:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10002a8e:	1dfb      	adds	r3, r7, #7
10002a90:	781b      	ldrb	r3, [r3, #0]
10002a92:	2b00      	cmp	r3, #0
10002a94:	d106      	bne.n	10002aa4 <DAVE_Init+0xb4>
  {
	 /**  Initialization of TIMER APP instance TIMER_0 */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&TIMER_0); 
10002a96:	1dfc      	adds	r4, r7, #7
10002a98:	4b0c      	ldr	r3, [pc, #48]	; (10002acc <DAVE_Init+0xdc>)
10002a9a:	1c18      	adds	r0, r3, #0
10002a9c:	f7ff fb1e 	bl	100020dc <TIMER_Init>
10002aa0:	1c03      	adds	r3, r0, #0
10002aa2:	7023      	strb	r3, [r4, #0]
   }  
  return init_status;
10002aa4:	1dfb      	adds	r3, r7, #7
10002aa6:	781b      	ldrb	r3, [r3, #0]
} /**  End of function DAVE_Init */
10002aa8:	1c18      	adds	r0, r3, #0
10002aaa:	46bd      	mov	sp, r7
10002aac:	b003      	add	sp, #12
10002aae:	bd90      	pop	{r4, r7, pc}
10002ab0:	200005c8 	.word	0x200005c8
10002ab4:	10002d28 	.word	0x10002d28
10002ab8:	10002c9c 	.word	0x10002c9c
10002abc:	10002cac 	.word	0x10002cac
10002ac0:	10002cbc 	.word	0x10002cbc
10002ac4:	10002ccc 	.word	0x10002ccc
10002ac8:	10002c94 	.word	0x10002c94
10002acc:	20000558 	.word	0x20000558

10002ad0 <XMC_GPIO_ToggleOutput>:
 * and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
10002ad0:	b580      	push	{r7, lr}
10002ad2:	b082      	sub	sp, #8
10002ad4:	af00      	add	r7, sp, #0
10002ad6:	6078      	str	r0, [r7, #4]
10002ad8:	1c0a      	adds	r2, r1, #0
10002ada:	1cfb      	adds	r3, r7, #3
10002adc:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10001U << pin;
10002ade:	1cfb      	adds	r3, r7, #3
10002ae0:	781b      	ldrb	r3, [r3, #0]
10002ae2:	4a03      	ldr	r2, [pc, #12]	; (10002af0 <XMC_GPIO_ToggleOutput+0x20>)
10002ae4:	409a      	lsls	r2, r3
10002ae6:	687b      	ldr	r3, [r7, #4]
10002ae8:	605a      	str	r2, [r3, #4]
}
10002aea:	46bd      	mov	sp, r7
10002aec:	b002      	add	sp, #8
10002aee:	bd80      	pop	{r7, pc}
10002af0:	00010001 	.word	0x00010001

10002af4 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
10002af4:	b580      	push	{r7, lr}
10002af6:	b082      	sub	sp, #8
10002af8:	af00      	add	r7, sp, #0
10002afa:	6078      	str	r0, [r7, #4]
10002afc:	1c0a      	adds	r2, r1, #0
10002afe:	1cfb      	adds	r3, r7, #3
10002b00:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
10002b02:	687b      	ldr	r3, [r7, #4]
10002b04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
10002b06:	1cfb      	adds	r3, r7, #3
10002b08:	781b      	ldrb	r3, [r3, #0]
10002b0a:	40da      	lsrs	r2, r3
10002b0c:	1c13      	adds	r3, r2, #0
10002b0e:	2201      	movs	r2, #1
10002b10:	4013      	ands	r3, r2
}
10002b12:	1c18      	adds	r0, r3, #0
10002b14:	46bd      	mov	sp, r7
10002b16:	b002      	add	sp, #8
10002b18:	bd80      	pop	{r7, pc}
10002b1a:	46c0      	nop			; (mov r8, r8)

10002b1c <DIGITAL_IO_ToggleOutput>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_ToggleOutput(const DIGITAL_IO_t *const handler)
{
10002b1c:	b580      	push	{r7, lr}
10002b1e:	b082      	sub	sp, #8
10002b20:	af00      	add	r7, sp, #0
10002b22:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_ToggleOutput: handler null pointer", handler != NULL);
  XMC_GPIO_ToggleOutput(handler->gpio_port, handler->gpio_pin);
10002b24:	687b      	ldr	r3, [r7, #4]
10002b26:	681a      	ldr	r2, [r3, #0]
10002b28:	687b      	ldr	r3, [r7, #4]
10002b2a:	7b1b      	ldrb	r3, [r3, #12]
10002b2c:	1c10      	adds	r0, r2, #0
10002b2e:	1c19      	adds	r1, r3, #0
10002b30:	f7ff ffce 	bl	10002ad0 <XMC_GPIO_ToggleOutput>
}
10002b34:	46bd      	mov	sp, r7
10002b36:	b002      	add	sp, #8
10002b38:	bd80      	pop	{r7, pc}
10002b3a:	46c0      	nop			; (mov r8, r8)

10002b3c <DIGITAL_IO_GetInput>:
* }
*  @endcode
*/

__STATIC_INLINE uint32_t DIGITAL_IO_GetInput(const DIGITAL_IO_t *const handler)
{
10002b3c:	b580      	push	{r7, lr}
10002b3e:	b082      	sub	sp, #8
10002b40:	af00      	add	r7, sp, #0
10002b42:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_GetInput: handler null pointer", handler != NULL);
  return XMC_GPIO_GetInput(handler->gpio_port, handler->gpio_pin);
10002b44:	687b      	ldr	r3, [r7, #4]
10002b46:	681a      	ldr	r2, [r3, #0]
10002b48:	687b      	ldr	r3, [r7, #4]
10002b4a:	7b1b      	ldrb	r3, [r3, #12]
10002b4c:	1c10      	adds	r0, r2, #0
10002b4e:	1c19      	adds	r1, r3, #0
10002b50:	f7ff ffd0 	bl	10002af4 <XMC_GPIO_GetInput>
10002b54:	1c03      	adds	r3, r0, #0
}
10002b56:	1c18      	adds	r0, r3, #0
10002b58:	46bd      	mov	sp, r7
10002b5a:	b002      	add	sp, #8
10002b5c:	bd80      	pop	{r7, pc}
10002b5e:	46c0      	nop			; (mov r8, r8)

10002b60 <main>:
#include "DAVE.h"                 //Declarations from DAVE Code Generation (includes SFR declaration)



int main(void)
{
10002b60:	b590      	push	{r4, r7, lr}
10002b62:	b083      	sub	sp, #12
10002b64:	af00      	add	r7, sp, #0
  DAVE_STATUS_t status;

  status = DAVE_Init();           /* Initialization of DAVE APPs  */
10002b66:	1dfc      	adds	r4, r7, #7
10002b68:	f7ff ff42 	bl	100029f0 <DAVE_Init>
10002b6c:	1c03      	adds	r3, r0, #0
10002b6e:	7023      	strb	r3, [r4, #0]

  if (status != DAVE_STATUS_SUCCESS)
10002b70:	1dfb      	adds	r3, r7, #7
10002b72:	781b      	ldrb	r3, [r3, #0]
10002b74:	2b00      	cmp	r3, #0
10002b76:	d000      	beq.n	10002b7a <main+0x1a>
    XMC_DEBUG("DAVE APPs initialization failed\n");

    while(1U)
    {

    }
10002b78:	e7fe      	b.n	10002b78 <main+0x18>

  /* Placeholder for user application code. The while loop below can be replaced with user application code. */
  while(1U)
  {

  }
10002b7a:	e7fe      	b.n	10002b7a <main+0x1a>

10002b7c <IRQ0_Handler>:
}
void Can_TX(void)
{
10002b7c:	b580      	push	{r7, lr}
10002b7e:	b082      	sub	sp, #8
10002b80:	af00      	add	r7, sp, #0

CAN_NODE_STATUS_t status_1; // variable for struct
const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
10002b82:	4b20      	ldr	r3, [pc, #128]	; (10002c04 <IRQ0_Handler+0x88>)
10002b84:	607b      	str	r3, [r7, #4]

uint8_t can_data_arr[1]={0};
10002b86:	1c3b      	adds	r3, r7, #0
10002b88:	2200      	movs	r2, #0
10002b8a:	701a      	strb	r2, [r3, #0]

    if((DIGITAL_IO_GetInput(&DIGITAL_IO_0)) == 1)
10002b8c:	4b1e      	ldr	r3, [pc, #120]	; (10002c08 <IRQ0_Handler+0x8c>)
10002b8e:	1c18      	adds	r0, r3, #0
10002b90:	f7ff ffd4 	bl	10002b3c <DIGITAL_IO_GetInput>
10002b94:	1e03      	subs	r3, r0, #0
10002b96:	2b01      	cmp	r3, #1
10002b98:	d113      	bne.n	10002bc2 <IRQ0_Handler+0x46>
    		  {
    			  DIGITAL_IO_ToggleOutput(&DIGITAL_IO_2);
10002b9a:	4b1c      	ldr	r3, [pc, #112]	; (10002c0c <IRQ0_Handler+0x90>)
10002b9c:	1c18      	adds	r0, r3, #0
10002b9e:	f7ff ffbd 	bl	10002b1c <DIGITAL_IO_ToggleOutput>

    			  can_data_arr[1] = 1;
10002ba2:	1c3b      	adds	r3, r7, #0
10002ba4:	2201      	movs	r2, #1
10002ba6:	705a      	strb	r2, [r3, #1]

    			  (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[0],can_data_arr);
10002ba8:	687b      	ldr	r3, [r7, #4]
10002baa:	68da      	ldr	r2, [r3, #12]
10002bac:	1c3b      	adds	r3, r7, #0
10002bae:	1c10      	adds	r0, r2, #0
10002bb0:	1c19      	adds	r1, r3, #0
10002bb2:	f7ff fe4b 	bl	1000284c <CAN_NODE_MO_UpdateData>
    		  CAN_NODE_MO_Transmit(HandlePtr1->lmobj_ptr[0]);
10002bb6:	687b      	ldr	r3, [r7, #4]
10002bb8:	68db      	ldr	r3, [r3, #12]
10002bba:	1c18      	adds	r0, r3, #0
10002bbc:	f7ff fe2e 	bl	1000281c <CAN_NODE_MO_Transmit>
10002bc0:	e01d      	b.n	10002bfe <IRQ0_Handler+0x82>

    		  }
    else if((DIGITAL_IO_GetInput(&DIGITAL_IO_1)) == 1)
10002bc2:	4b13      	ldr	r3, [pc, #76]	; (10002c10 <IRQ0_Handler+0x94>)
10002bc4:	1c18      	adds	r0, r3, #0
10002bc6:	f7ff ffb9 	bl	10002b3c <DIGITAL_IO_GetInput>
10002bca:	1e03      	subs	r3, r0, #0
10002bcc:	2b01      	cmp	r3, #1
10002bce:	d113      	bne.n	10002bf8 <IRQ0_Handler+0x7c>
    		  {


    			  DIGITAL_IO_ToggleOutput(&DIGITAL_IO_3);
10002bd0:	4b10      	ldr	r3, [pc, #64]	; (10002c14 <IRQ0_Handler+0x98>)
10002bd2:	1c18      	adds	r0, r3, #0
10002bd4:	f7ff ffa2 	bl	10002b1c <DIGITAL_IO_ToggleOutput>
    			  can_data_arr[1] = 2;
10002bd8:	1c3b      	adds	r3, r7, #0
10002bda:	2202      	movs	r2, #2
10002bdc:	705a      	strb	r2, [r3, #1]

    			  (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[0],can_data_arr);
10002bde:	687b      	ldr	r3, [r7, #4]
10002be0:	68da      	ldr	r2, [r3, #12]
10002be2:	1c3b      	adds	r3, r7, #0
10002be4:	1c10      	adds	r0, r2, #0
10002be6:	1c19      	adds	r1, r3, #0
10002be8:	f7ff fe30 	bl	1000284c <CAN_NODE_MO_UpdateData>
    			 CAN_NODE_MO_Transmit(HandlePtr1->lmobj_ptr[0]);
10002bec:	687b      	ldr	r3, [r7, #4]
10002bee:	68db      	ldr	r3, [r3, #12]
10002bf0:	1c18      	adds	r0, r3, #0
10002bf2:	f7ff fe13 	bl	1000281c <CAN_NODE_MO_Transmit>
10002bf6:	e002      	b.n	10002bfe <IRQ0_Handler+0x82>



  else
  {
	  can_data_arr[1] = 0;
10002bf8:	1c3b      	adds	r3, r7, #0
10002bfa:	2200      	movs	r2, #0
10002bfc:	705a      	strb	r2, [r3, #1]
  }
}
10002bfe:	46bd      	mov	sp, r7
10002c00:	b002      	add	sp, #8
10002c02:	bd80      	pop	{r7, pc}
10002c04:	10002d28 	.word	0x10002d28
10002c08:	10002c9c 	.word	0x10002c9c
10002c0c:	10002cbc 	.word	0x10002cbc
10002c10:	10002cac 	.word	0x10002cac
10002c14:	10002ccc 	.word	0x10002ccc

10002c18 <__libc_init_array>:
10002c18:	4b0e      	ldr	r3, [pc, #56]	; (10002c54 <__libc_init_array+0x3c>)
10002c1a:	b570      	push	{r4, r5, r6, lr}
10002c1c:	2500      	movs	r5, #0
10002c1e:	1c1e      	adds	r6, r3, #0
10002c20:	4c0d      	ldr	r4, [pc, #52]	; (10002c58 <__libc_init_array+0x40>)
10002c22:	1ae4      	subs	r4, r4, r3
10002c24:	10a4      	asrs	r4, r4, #2
10002c26:	42a5      	cmp	r5, r4
10002c28:	d004      	beq.n	10002c34 <__libc_init_array+0x1c>
10002c2a:	00ab      	lsls	r3, r5, #2
10002c2c:	58f3      	ldr	r3, [r6, r3]
10002c2e:	4798      	blx	r3
10002c30:	3501      	adds	r5, #1
10002c32:	e7f8      	b.n	10002c26 <__libc_init_array+0xe>
10002c34:	f7ff f9ec 	bl	10002010 <_init>
10002c38:	4b08      	ldr	r3, [pc, #32]	; (10002c5c <__libc_init_array+0x44>)
10002c3a:	2500      	movs	r5, #0
10002c3c:	1c1e      	adds	r6, r3, #0
10002c3e:	4c08      	ldr	r4, [pc, #32]	; (10002c60 <__libc_init_array+0x48>)
10002c40:	1ae4      	subs	r4, r4, r3
10002c42:	10a4      	asrs	r4, r4, #2
10002c44:	42a5      	cmp	r5, r4
10002c46:	d004      	beq.n	10002c52 <__libc_init_array+0x3a>
10002c48:	00ab      	lsls	r3, r5, #2
10002c4a:	58f3      	ldr	r3, [r6, r3]
10002c4c:	4798      	blx	r3
10002c4e:	3501      	adds	r5, #1
10002c50:	e7f8      	b.n	10002c44 <__libc_init_array+0x2c>
10002c52:	bd70      	pop	{r4, r5, r6, pc}
10002c54:	200005c0 	.word	0x200005c0
10002c58:	200005c0 	.word	0x200005c0
10002c5c:	200005c0 	.word	0x200005c0
10002c60:	200005c0 	.word	0x200005c0
10002c64:	10001e82 	.word	0x10001e82
10002c68:	10001e82 	.word	0x10001e82
10002c6c:	10001e8c 	.word	0x10001e8c
10002c70:	10001e8c 	.word	0x10001e8c
10002c74:	10001eba 	.word	0x10001eba
10002c78:	10001eba 	.word	0x10001eba
10002c7c:	10001eba 	.word	0x10001eba
10002c80:	10001eba 	.word	0x10001eba
10002c84:	10001e96 	.word	0x10001e96
10002c88:	10001ea2 	.word	0x10001ea2
10002c8c:	10001eae 	.word	0x10001eae
10002c90:	10001eae 	.word	0x10001eae

10002c94 <INTERRUPT_0>:
10002c94:	03000002 00000001                       ........

10002c9c <DIGITAL_IO_0>:
10002c9c:	40040200 00000018 00000000 00000000     ...@............

10002cac <DIGITAL_IO_1>:
10002cac:	40040200 00000018 00000000 00000001     ...@............

10002cbc <DIGITAL_IO_2>:
10002cbc:	40040400 00000080 00010000 00000000     ...@............

10002ccc <DIGITAL_IO_3>:
10002ccc:	40040400 00000080 00010000 00000001     ...@............
10002cdc:	00010000 03300000 00010000 00000000     ......0.........

10002cec <CAN_NODE_0_gpio_out>:
10002cec:	40040400 00000009                       ...@....

10002cf4 <CAN_NODE_0_gpio_out_config>:
10002cf4:	000000a4 00000001                       ........

10002cfc <CAN_NODE_0_gpio_in>:
10002cfc:	40040400 00000008                       ...@....

10002d04 <CAN_NODE_0_gpio_in_config>:
	...

10002d0c <CAN_NODE_0_BitTimeConfig>:
10002d0c:	02dc6c00 0007a120 00011f40              .l.. ...@...

10002d18 <CAN_NODE_0_sr>:
10002d18:	00000000                                ....

10002d1c <CAN_NODE_0_LMO_01_Config>:
10002d1c:	200005a0 00000013 00000000              ... ........

10002d28 <CAN_NODE_0>:
10002d28:	20000590 50040300 10002d0c 10002d1c     ... ...P.-...-..
	...
10002db4:	10002d18 10002cec 10002cf4 10002cfc     .-...,...,...,..
10002dc4:	10002d04 00010102 00000000              .-..........

Disassembly of section .VENEER_Code:

2000000c <HardFault_Veener>:
/* ==================VENEERS VENEERS VENEERS VENEERS VENEERS=============== */
    .section ".XmcVeneerCode","ax",%progbits
    
    .align 1
    
	Insert_InterruptVeener HardFault
2000000c:	482c      	ldr	r0, [pc, #176]	; (200000c0 <IRQ31_Veener+0x4>)
2000000e:	4700      	bx	r0
	...

2000002c <SVC_Veener>:
    .long 0
    .long 0
    .long 0
    .long 0
    .long 0
	Insert_InterruptVeener SVC
2000002c:	4825      	ldr	r0, [pc, #148]	; (200000c4 <IRQ31_Veener+0x8>)
2000002e:	4700      	bx	r0
	...

20000038 <PendSV_Veener>:
    .long 0
    .long 0
	Insert_InterruptVeener PendSV	
20000038:	4823      	ldr	r0, [pc, #140]	; (200000c8 <IRQ31_Veener+0xc>)
2000003a:	4700      	bx	r0

2000003c <SysTick_Veener>:
	Insert_InterruptVeener SysTick
2000003c:	4823      	ldr	r0, [pc, #140]	; (200000cc <IRQ31_Veener+0x10>)
2000003e:	4700      	bx	r0

20000040 <IRQ0_Veener>:
	
	Insert_InterruptVeener IRQ0	
20000040:	4823      	ldr	r0, [pc, #140]	; (200000d0 <IRQ31_Veener+0x14>)
20000042:	4700      	bx	r0

20000044 <IRQ1_Veener>:
	Insert_InterruptVeener IRQ1	
20000044:	4823      	ldr	r0, [pc, #140]	; (200000d4 <IRQ31_Veener+0x18>)
20000046:	4700      	bx	r0

20000048 <IRQ2_Veener>:
	Insert_InterruptVeener IRQ2	
20000048:	4823      	ldr	r0, [pc, #140]	; (200000d8 <IRQ31_Veener+0x1c>)
2000004a:	4700      	bx	r0

2000004c <IRQ3_Veener>:
	Insert_InterruptVeener IRQ3	
2000004c:	4823      	ldr	r0, [pc, #140]	; (200000dc <IRQ31_Veener+0x20>)
2000004e:	4700      	bx	r0

20000050 <IRQ4_Veener>:
	Insert_InterruptVeener IRQ4	
20000050:	4823      	ldr	r0, [pc, #140]	; (200000e0 <IRQ31_Veener+0x24>)
20000052:	4700      	bx	r0

20000054 <IRQ5_Veener>:
	Insert_InterruptVeener IRQ5	
20000054:	4823      	ldr	r0, [pc, #140]	; (200000e4 <IRQ31_Veener+0x28>)
20000056:	4700      	bx	r0

20000058 <IRQ6_Veener>:
	Insert_InterruptVeener IRQ6	
20000058:	4823      	ldr	r0, [pc, #140]	; (200000e8 <IRQ31_Veener+0x2c>)
2000005a:	4700      	bx	r0

2000005c <IRQ7_Veener>:
	Insert_InterruptVeener IRQ7	
2000005c:	4823      	ldr	r0, [pc, #140]	; (200000ec <IRQ31_Veener+0x30>)
2000005e:	4700      	bx	r0

20000060 <IRQ8_Veener>:
	Insert_InterruptVeener IRQ8	
20000060:	4823      	ldr	r0, [pc, #140]	; (200000f0 <IRQ31_Veener+0x34>)
20000062:	4700      	bx	r0

20000064 <IRQ9_Veener>:
	Insert_InterruptVeener IRQ9	
20000064:	4823      	ldr	r0, [pc, #140]	; (200000f4 <IRQ31_Veener+0x38>)
20000066:	4700      	bx	r0

20000068 <IRQ10_Veener>:
	Insert_InterruptVeener IRQ10	
20000068:	4823      	ldr	r0, [pc, #140]	; (200000f8 <IRQ31_Veener+0x3c>)
2000006a:	4700      	bx	r0

2000006c <IRQ11_Veener>:
	Insert_InterruptVeener IRQ11	
2000006c:	4823      	ldr	r0, [pc, #140]	; (200000fc <IRQ31_Veener+0x40>)
2000006e:	4700      	bx	r0

20000070 <IRQ12_Veener>:
	Insert_InterruptVeener IRQ12	
20000070:	4823      	ldr	r0, [pc, #140]	; (20000100 <IRQ31_Veener+0x44>)
20000072:	4700      	bx	r0

20000074 <IRQ13_Veener>:
	Insert_InterruptVeener IRQ13	
20000074:	4823      	ldr	r0, [pc, #140]	; (20000104 <IRQ31_Veener+0x48>)
20000076:	4700      	bx	r0

20000078 <IRQ14_Veener>:
	Insert_InterruptVeener IRQ14	
20000078:	4823      	ldr	r0, [pc, #140]	; (20000108 <IRQ31_Veener+0x4c>)
2000007a:	4700      	bx	r0

2000007c <IRQ15_Veener>:
	Insert_InterruptVeener IRQ15	
2000007c:	4823      	ldr	r0, [pc, #140]	; (2000010c <IRQ31_Veener+0x50>)
2000007e:	4700      	bx	r0

20000080 <IRQ16_Veener>:
	Insert_InterruptVeener IRQ16	
20000080:	4823      	ldr	r0, [pc, #140]	; (20000110 <IRQ31_Veener+0x54>)
20000082:	4700      	bx	r0

20000084 <IRQ17_Veener>:
	Insert_InterruptVeener IRQ17	
20000084:	4823      	ldr	r0, [pc, #140]	; (20000114 <IRQ31_Veener+0x58>)
20000086:	4700      	bx	r0

20000088 <IRQ18_Veener>:
	Insert_InterruptVeener IRQ18	
20000088:	4823      	ldr	r0, [pc, #140]	; (20000118 <IRQ31_Veener+0x5c>)
2000008a:	4700      	bx	r0

2000008c <IRQ19_Veener>:
	Insert_InterruptVeener IRQ19	
2000008c:	4823      	ldr	r0, [pc, #140]	; (2000011c <IRQ31_Veener+0x60>)
2000008e:	4700      	bx	r0

20000090 <IRQ20_Veener>:
	Insert_InterruptVeener IRQ20
20000090:	4823      	ldr	r0, [pc, #140]	; (20000120 <IRQ31_Veener+0x64>)
20000092:	4700      	bx	r0

20000094 <IRQ21_Veener>:
	Insert_InterruptVeener IRQ21
20000094:	4823      	ldr	r0, [pc, #140]	; (20000124 <IRQ31_Veener+0x68>)
20000096:	4700      	bx	r0

20000098 <IRQ22_Veener>:
	Insert_InterruptVeener IRQ22	
20000098:	4823      	ldr	r0, [pc, #140]	; (20000128 <IRQ31_Veener+0x6c>)
2000009a:	4700      	bx	r0

2000009c <IRQ23_Veener>:
	Insert_InterruptVeener IRQ23	
2000009c:	4823      	ldr	r0, [pc, #140]	; (2000012c <IRQ31_Veener+0x70>)
2000009e:	4700      	bx	r0

200000a0 <IRQ24_Veener>:
	Insert_InterruptVeener IRQ24	
200000a0:	4823      	ldr	r0, [pc, #140]	; (20000130 <IRQ31_Veener+0x74>)
200000a2:	4700      	bx	r0

200000a4 <IRQ25_Veener>:
	Insert_InterruptVeener IRQ25	
200000a4:	4823      	ldr	r0, [pc, #140]	; (20000134 <IRQ31_Veener+0x78>)
200000a6:	4700      	bx	r0

200000a8 <IRQ26_Veener>:
	Insert_InterruptVeener IRQ26	
200000a8:	4823      	ldr	r0, [pc, #140]	; (20000138 <IRQ31_Veener+0x7c>)
200000aa:	4700      	bx	r0

200000ac <IRQ27_Veener>:
	Insert_InterruptVeener IRQ27	
200000ac:	4823      	ldr	r0, [pc, #140]	; (2000013c <IRQ31_Veener+0x80>)
200000ae:	4700      	bx	r0

200000b0 <IRQ28_Veener>:
	Insert_InterruptVeener IRQ28	
200000b0:	4823      	ldr	r0, [pc, #140]	; (20000140 <IRQ31_Veener+0x84>)
200000b2:	4700      	bx	r0

200000b4 <IRQ29_Veener>:
	Insert_InterruptVeener IRQ29	
200000b4:	4823      	ldr	r0, [pc, #140]	; (20000144 <IRQ31_Veener+0x88>)
200000b6:	4700      	bx	r0

200000b8 <IRQ30_Veener>:
	Insert_InterruptVeener IRQ30	
200000b8:	4823      	ldr	r0, [pc, #140]	; (20000148 <IRQ31_Veener+0x8c>)
200000ba:	4700      	bx	r0

200000bc <IRQ31_Veener>:
	Insert_InterruptVeener IRQ31	
200000bc:	4823      	ldr	r0, [pc, #140]	; (2000014c <IRQ31_Veener+0x90>)
200000be:	4700      	bx	r0
/* ==================VENEERS VENEERS VENEERS VENEERS VENEERS=============== */
    .section ".XmcVeneerCode","ax",%progbits
    
    .align 1
    
	Insert_InterruptVeener HardFault
200000c0:	1000109d 	.word	0x1000109d
    .long 0
    .long 0
    .long 0
    .long 0
    .long 0
	Insert_InterruptVeener SVC
200000c4:	1000109d 	.word	0x1000109d
    .long 0
    .long 0
	Insert_InterruptVeener PendSV	
200000c8:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener SysTick
200000cc:	1000109d 	.word	0x1000109d
	
	Insert_InterruptVeener IRQ0	
200000d0:	10002b7d 	.word	0x10002b7d
	Insert_InterruptVeener IRQ1	
200000d4:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ2	
200000d8:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ3	
200000dc:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ4	
200000e0:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ5	
200000e4:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ6	
200000e8:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ7	
200000ec:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ8	
200000f0:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ9	
200000f4:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ10	
200000f8:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ11	
200000fc:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ12	
20000100:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ13	
20000104:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ14	
20000108:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ15	
2000010c:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ16	
20000110:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ17	
20000114:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ18	
20000118:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ19	
2000011c:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ20
20000120:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ21
20000124:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ22	
20000128:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ23	
2000012c:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ24	
20000130:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ25	
20000134:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ26	
20000138:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ27	
2000013c:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ28	
20000140:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ29	
20000144:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ30	
20000148:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ31	
2000014c:	1000109d 	.word	0x1000109d
